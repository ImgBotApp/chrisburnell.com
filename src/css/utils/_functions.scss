////
/// Functions
/// @group utils
////


///
/// Contrasting Text Color
///
/// @param {Color} $background-color - Background Color to contrast
/// @param {Color} $text-color-light [$color-white] - Color to use for dark backgrounds
/// @param {Color} $text-color-dark [$color-black] - Color to use for light backgrounds
///
/// @example scss
///   background-color: #111111;
///   color: contrasting-color(#111111);
///   // background-color: #111111;
///   // color: #f9f9f9;
///
/// @return {Color} Contrasting Text Color
///
@function contrasting-color($background-color, $text-color-dark: $color-text, $text-color-light: $color-white) {
    @if not $background-color {
        @warn "contrasting-color() expects at least one parameter.";
        @return false;
    }

    @if lightness($background-color) > 65 {
        @return $text-color-dark;
    }

    @return $text-color-light;
}


///
/// Accepts two or three parameters.
///
/// @param {Color} $from - Start Color
/// @param {Color} $to - End Color
/// @param {String} $direction [to bottom] - Gradient direction
///
/// @example scss - Two parameters
///   background-image: gradient(white, black);
///   // background-image: linear-gradient(to bottom, white 0%, black 100%);
///
/// @example scss - Three parameters
///   background-image: gradient(black, white, to top);
///   // background-image: linear-gradient(to top, black 0%, white 100%);
///
/// @return {String} Linear Gradient snippet
///
@function gradient($from, $to, $direction: "to bottom") {
    @if not $from or not $to {
        @warn "gradient() expects two or three parameters.";
        @return false;
    }

    @return linear-gradient(#{$direction}, #{$from} 0%, #{$to} 100%);
}


///
/// Define Opacity
///
/// @param {String} $value - Value of the opacity (0-1) or respective label
///
/// @require {Variable} $opacities
///
/// @example scss
///   opacity: opacity(1);
///   // opacity: 1;
///
/// @example scss
///   opacity: opacity("10-percent");
///   // opacity: 0.10;
///
/// @return {Number} Opacity value
///
@function opacity($value) {
    @if not $value {
        @warn "opacity() expects one parameter.";
        @return false;
    }

    @if map-has-key($opacities, $value) {
        @return map-get($opacities, $value);
    }

    @return $value;
}


///
/// Strip Units from a Number
///
/// @param {Number} $value - Number with units
///
/// @example scss
///   line-height: strip-units(2em);
///   // line-height: 2;
///
/// @return {Number} Number without units
///
@function strip-units($value) {
    @if not $value {
        @warn "strip-units() expects at least one parameter.";
        @return false;
    }

    @return $value / ($value * 0 + 1);
}


///
/// Unpack Transition List
///
/// @param {list} $list - Transition list to unpack
///
/// @example scss
///   transition: unpack-transition(all 1s)
///   // transition: all 1s ease;
///
/// @return {String} Full Transition
///
@function unpack-transition($list) {
    $property: nth($list, 1);
    $time: if(length($list) > 1, nth($list, 2), $transition-time);
    $function: if(length($list) > 2, nth($list, 3), $transition-function);

    @return $property $time $function;
}


///
/// Walk through a List with a Function
///
/// @param {List} $list - List to walk through
/// @param {String} $function - Function to apply to all members
/// @param {ArgList} $args - Extra arguments to pass to the function
///
/// @example scss
///   content: "#{walk(one two three, to-upper-case)}";
///   // content: "ONE TWO THREE";
///
/// @return {List} Updated list
///
@function walk($list, $function, $args...) {
    @if not function-exists($function) {
        @warn "There is no `#{$function}` function.";
        @return false;
    }

    @for $i from 1 through length($list) {
        $list: set-nth($list, $i, call($function, nth($list, $i), $args...));
    }

    @return $list;
}
