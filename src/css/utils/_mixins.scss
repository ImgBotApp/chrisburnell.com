////
/// Mixins
/// @group utils
////


///
/// Add a border-radius.
///
/// @author Chris Burnell
///
/// @param {String} $values - Values
///
/// @require {Variable} $border-radius-default
/// @require {Variable} $border-radius-thin
///
/// @example scss - Zero parameters
///   @include radius;
///   // border-radius: 0.375rem;
///
/// @example scss - One parameter
///   @include radius(1em);
///   // border-radius: 1em;
///
/// @throw Error if no parameters are passed.
///
@mixin border-radius($values...) {

    @if (length($values) == 0 or #{$values} == "default") {
        $values: $border-radius-default;
    }
    @else if(#{$values} == "thin") {
        $values: $border-radius-thin;
    }

    background-clip: padding-box;
    border-radius: #{$values};

}


///
/// Clear an element of floats.
///
/// @example scss
///   @include clear;
///   // clear: both;
///   // zoom: 1;
///   // &::before,
///   // &::after {
///   //     content: "";
///   //     display: table;
///   // }
///   // &::after {
///   //     clear: both;
///   // }
///
@mixin clear() {

    clear: both;
    zoom: 1;

    &::before,
    &::after {
        content: "";
        display: table;
    }

    &::after {
        clear: both;
    }

}


///
/// Specify font-family and associated font-display.
///
/// @author Chris Burnell
///
/// @param {String} $family - Font Family value
/// @param {String} $display - Font Display value
///
/// @require {Variable} $font-families
///
/// @example scss - One family
///   @include font-family(default);
///   // font-family: "ff-meta-serif-web-pro", Georgia, serif;
///
/// @example scss - One family, one display
///   @include font-family(beta, swap);
///   // font-family: "proxima-nova", sans-serif;
///   // font-display: swap;
///
/// @throw Error if no parameters are passed.
///
@mixin font-family($family, $display) {

    @if (length($family) == 0) {
        @error "font-family() expects at least one parameter."
    }

    @if not map-has-key($font-families, $family) {
        @error "There is no font-family named `#{$family}` in $font-families. Font Family should be one of #{map-keys($font-families)}.";
    }

    font-family: map-get($font-families, $family);

    @if (length($display) != 0) {
        font-display: $display;
    }

}


///
/// Hide an element properly.
///
/// @example scss
///   @include hide;
///   // width:  1px !important;
///   // height: 1px !important;
///   // padding: 0 !important;
///   // border:  0 !important;
///   // position: absolute !important;
///   // overflow: hidden !important;
///   // clip: rect(1px, 1px, 1px, 1px) !important;
///
@mixin hide() {

    width:  1px !important;
    height: 1px !important;
    padding: 0 !important;
    border:  0 !important;
    position: absolute !important;
    overflow: hidden !important;
    clip: rect(1px, 1px, 1px, 1px) !important;

}


///
/// Hyphenate text.
///
/// @example scss
///   @include hyphenate;
///   // overflow-wrap: break-word;
///   // word-wrap: break-word;
///   // hyphens: auto;
///
@mixin hyphenate() {

    overflow-wrap: break-word;
    word-wrap: break-word;
    hyphens: auto;

}


///
/// Make text non-selectable;
///
/// @example scss
///   @include non-selectable;
///   // user-select: none;
///   // -webkit-touch-callout: default;
///   // -webkit-touch-callout: none;
///
@mixin non-selectable() {

    user-select: none;
    -webkit-touch-callout: default;
    -webkit-touch-callout: none;

}


///
/// Absolutely position an element.
///
/// @author Chris Burnell
///
/// @param {String} $value - Position of the element
///
/// @example scss
///   @include position(bottom);
///   // position: absolute;
///   // bottom: 0;
///   // left:   0;
///   // right:  0;
///
/// @throw Error if no parameters are passed.
///
@mixin position($value) {

    @if (length($value) == 0) {
        @error "position() expects one parameter."
    }

    @if ($value == "top") {
        position: absolute;
        top:   0;
        left:  0;
        right: 0;
    }

    @if ($value == "top-left") {
        position: absolute;
        top:  0;
        left: 0;
    }

    @else if($value == "bottom") {
        position: absolute;
        bottom: 0;
        left:   0;
        right:  0;
    }

    @else if($value == "center") {
        position: absolute;
        top:  50%;
        left: 50%;
        transform: translateX(-50%) translateY(-50%);
    }

    @else if($value == "none" or $value == "reset") {
        position: relative;
        top:    auto;
        left:   auto;
        right:  auto;
        bottom: auto;
    }

}


///
/// Generate transitions based on flexible input parameters.
/// Pass zero or more properties and zero to two further parameters.
/// If passing two or more properties, quotation marks must be used.
///
/// @author Chris Burnell
///
/// @param {String} $values - Values
///
/// @require {Variable} $transition-time
/// @require {Variable} $transition-function
///
/// @example scss - Zero parameters
///   @include transition;
///   // transition: all 0.2s ease;
///
/// @example scss - One property
///   @include transition(color);
///   // transition: color 0.2s ease;
///
/// @example scss - Two properties
///   @include transition(color, border);
///   // transition: color 0.2s ease, border 0.2s ease;
///
/// @example scss - One property, one duration
///   @include transition(color 0.5s);
///   // transition: color 0.5s ease;
///
/// @example scss - One property, one duration, one timing function
///   @include transition(color 1s linear);
///   // transition: color 1s linear;
///
/// @example scss - Two properties, two durations, two timing functions
///   @include transition(color 2s ease-in-out, border 1s linear);
///   // transition: color 2s ease-in-out, border 1s linear;
///
@mixin transition($values...) {

    $transition: ();

    @if (length($values) == 0 or $values == "default") {
        $transition: all #{$transition-time} #{$transition-function};
    }

    @else if(str-index(""+$values+"", " ") == null and str-index(""+$values+"", ",") == null and $values != "none") {
        $transition: #{$values} #{$transition-time} #{$transition-function};
    }

    @else if(str-index(""+$values+"", ",") != null) {
        @each $value in $values {

            @if (str-index(""+$value+"", " ") == null) {
                $transition: append($transition, unquote("#{$value} #{$transition-time} #{$transition-function}"), comma);
            }

            @else if(str-index(""+$value+"", " ") == 1) {
                $transition: append($transition, unquote("#{$value} #{$transition-function}"), comma);
            }

            @else {
                $transition: append($transition, unquote("#{$value}"), comma);
            }

        }
    }

    @else {
        $transition: #{$values};
    }

    transition: #{$transition};

}


///
/// Define characters for quotes
///
/// @example scss
///   @include quotes;
///   // quotes: "“" "”" "‘" "’";
///
@mixin quotes() {

    &,
    :lang(en) & {
        quotes: "“" "”" "‘" "’";
    }

    :lang(de) & {
        quotes: "„" "“" "‚" "‘";
    }

    :lang(fr) & {
        quotes: "« " " »" "‹ " " ›";
    }

}


///
/// Describes CSS changes to the browser; to be coupled with any transitions.
///
/// @author Chris Burnell
///
/// @param {String} $values - Values
///
/// @example scss - One parameter
///   @include will-change(color);
///   // will-change: color;
///
/// @example scss - Multiple parameters
///   @include will-change(color, border);
///   // will-change: color, border;
///
/// @throw Error if no parameters are passed.
///
@mixin will-change($values...) {

    @if (length($values) == 0) {
        @error "will-change() expects at least one parameter.";
    }

    will-change: #{$values};

}


///
/// Simplify z-index.
///
/// @param {String} $value - Generic level
///
/// @require {Variable} $z-indexes
///
/// @example scss
///   @include z-index(above);
///   // z-index: 2;
///
/// @throw Error if no parameters are passed.
/// @throw Error if parameter passed does not match a key in $z-indexes.
///
@mixin z-index($value) {

    @if (length($value) == 0) {
        @error "z-index() expects at least one parameter."
    }

    @if not map-has-key($z-indexes, $value) {
        @error "There is no layer named `#{$value}` in $z-indexes. Layer should be one of #{map-keys($z-indexes)}.";
    }

    z-index: map-get($z-indexes, $value);

}
