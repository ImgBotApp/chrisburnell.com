////
/// Functions
/// @group abstracts
////


///
/// Contrasting Text Color
///
/// @param {Color} $background-color - Background-color to contrast against
/// @param {Color} $text-color-light [$color-white] - Color for dark backgrounds
/// @param {Color} $text-color-dark [$color-black] - Color for light backgrounds
///
/// @example scss
///   background-color: #111111;
///   color: contrasting-color(#111111);
///   // background-color: #111111;
///   // color: #f9f9f9;
///
/// @throw Error if no parameters are passed.
///
/// @return {Color} Contrasting Text Color
///
@function contrasting-color($background-color, $text-color-dark: $color-kaiser, $text-color-light: $color-white) {
    @if not $background-color {
        @warn "contrasting-color() expects at least one parameter.";
        @return false;
    }

    @if lightness($background-color) > 65 {
        @return $text-color-dark;
    }

    @return $text-color-light;
}


///
/// Accepts two or three parameters.
///
/// @param {Color} $from - Start Color
/// @param {Color} $to - End Color
/// @param {String} $direction [to bottom] - Gradient direction
///
/// @example scss - Two parameters
///   background-image: gradient(white, black);
///   // background-image: linear-gradient(to bottom, white, black);
///
/// @example scss - Three parameters
///   background-image: gradient(to top right, red, green, blue);
///   // background-image: linear-gradient(to top right, red, green, blue);
///
/// @throw Error if two or more parameters are not passed.
///
/// @return {String} Linear Gradient snippet
///
@function gradient($direction, $color-stops...) {
    @if not $direction and not $color-stops {
        @warn "gradient() expects a direction and two or more colors to gradient between.";
        @return false;
    }

    @if is-direction($direction) == false {
        $color-stops: $direction, $color-stops;
        $direction: "to bottom"; // equivalent to "to bottom"
    }

    @return linear-gradient(#{$direction}, $color-stops);
}


///
/// Test if `$value` is a valid direction
///
/// @param {*} $value - Value to test
///
/// @return {Bool}
///
@function is-direction($value) {
    $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
    $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

    @return $is-keyword or $is-angle;
}


///
/// Define Opacity
///
/// @param {String} $value - Label for the target opacity
///
/// @require {Variable} $opacities
///
/// @example scss
///   opacity: opacity("alpha");
///   // opacity: 0.900;
///
/// @throw Error if no parameters are passed.
/// @throw Error if parameter passed does not match a key in $opacities.
///
/// @return {Number} Opacity value
///
@function opacity($value) {
    @if not $value {
        @warn "opacity() expects one parameter.";
        @return false;
    }

    @if not map-has-key($opacities, $value) {
        @warn "There is no value named `#{$value}` in `$opacities`. Value should be one of `#{map-keys($opacities)}`.";
        @return false;
    }

    @return map-get($opacities, $value);
}


///
/// Strip Units from a Number
///
/// @param {Number} $value - Number with units
///
/// @example scss
///   line-height: strip-units(2em);
///   // line-height: 2;
///
/// @return {Number} Number without units
///
@function strip-units($value) {
    @if not $value {
        @warn "strip-units() expects at least one parameter.";
        @return false;
    }

    @return $value / ($value * 0 + 1);
}


///
/// Unique Pairs
///
/// @param {List|Map} $pairs - List/Map of pairs
///
/// @example scss
///   $list:
///     alpha,
///     beta,
///     gamma;
///   @each $list-item in unique-pairs($list) {
///     @each $list-item-key, $list-item-value in $list-item {
///       .from-#{$list-item-key}-to-#{$list-item-value} {
///         color: initial;
///       }
///     }
///   }
///   // .from-alpha-to-beta {
///   //   color: initial;
///   // }
///   // .from-alpha-to-gamma {
///   //   color: initial;
///   // }
///   // .from-beta-to-gamma {
///   //   color: initial;
///   // }
///
/// @throw Error if no parameter is passed.
/// @throw Error if parameter passed is neither a List nor a Map.
///
/// @return {Map} Unique pairs
///
@function unique-pairs($pairs) {
    @if not $pairs or not (type-of($pairs) == list or type-of($pairs) == map) {
        @warn "unique-pairs() expects either a single List or single Map of data.";
        @return false;
    }

    $unique-pairs: ();
    $seen: ();

    @if type-of($pairs) == list {
        @each $first in $pairs {
            $seen: append($seen, $first);
            @each $second in $pairs {
                @if $first != $second and not index($seen, $second) {
                    $unique-pair: ($first: $second);
                    $unique-pairs: append($unique-pairs, $unique-pair);
                }
            }
        }
    }

    @else if type-of($pairs) == map {
        @each $first-key, $first-value in $pairs {
            $seen: append($seen, $first-key);
            @each $second-key, $second-value in $pairs {
                @if $first-key != $second-key and not index($seen, $second-key) {
                    $unique-pair: (
                        ($first-key: $first-value): ($second-key: $second-value)
                    );
                    $unique-pairs: append($unique-pairs, $unique-pair);
                }
            }
        }
    }

    @else {
        @warn "unique-pairs() expects either a List or Map.";
        @return false;
    }

    @return $unique-pairs;
}


///
/// Unpack Transition List
///
/// @param {list} $list - Transition list to unpack
///
/// @example scss
///   transition: unpack-transition(all 1s)
///   // transition: all 1s ease;
///
/// @return {String} Full Transition
///
@function unpack-transition($list) {
    $property: nth($list, 1);
    $time: if(length($list) > 1, nth($list, 2), $transition-time);
    $function: if(length($list) > 2, nth($list, 3), $transition-function);

    @return $property $time $function;
}


///
/// Walk through a List with a Function
///
/// @param {List} $list - List to walk through
/// @param {String} $function - Function to apply to all members
/// @param {ArgList} $args - Extra arguments to pass to the function
///
/// @example scss
///   content: "#{walk(one two three, to-upper-case)}";
///   // content: "ONE TWO THREE";
///
/// @return {List} Updated list
///
@function walk($list, $function, $args...) {
    @if not function-exists($function) {
        @warn "There is no `#{$function}` function.";
        @return false;
    }

    @for $i from 1 through length($list) {
        $list: set-nth($list, $i, call($function, nth($list, $i), $args...));
    }

    @return $list;
}


///
/// Simplify z-index.
///
/// @param {String} $value - Generic level
///
/// @require {Variable} $z-indexes
///
/// @example scss
///   z-index: z-index(above);
///   // z-index: 2;
///
/// @throw Error if no parameters are passed.
/// @throw Error if parameter passed does not match a key in $z-indexes.
///
/// @return {Number} z-index
///
@function z-index($z-index) {
    @if not $z-index {
        @warn "z-index() expects at least one parameter.";
        @return false;
    }

    @if not map-has-key($z-indexes, $z-index) {
        @warn "There is no `z-index` named `#{$z-index}` in `$z-indexes`. `z-index` should be one of `#{map-keys($z-index)}`.";
        @return false;
    }

    @return map-get($z-indexes, $z-index);
}
