/*!
 * Service Worker
 * @author Chris Burnell <@iamchrisburnell>
 */
!function(){"use strict";var VERSION="v2::",CACHE_NAME="chrisburnell",urlsToCache=["/","/about","/articles","/pens","/search","/css/main.min.css","/js/main.min.js","/images/avatar.png"];"serviceWorker"in navigator&&navigator.serviceWorker.register("/serviceworker.min.js").then(function(registration){console.log("SW "+VERSION+CACHE_NAME+" - registration successful with scope:",registration.scope)})["catch"](function(err){console.log("SW "+VERSION+CACHE_NAME+" - registration failed:",err)}),self.addEventListener("install",function(event){console.log("SW "+VERSION+CACHE_NAME+" - install event in progress."),event.waitUntil(caches.open(VERSION+CACHE_NAME).then(function(cache){return console.log("SW "+VERSION+CACHE_NAME+" - opened cache.",event.request.url),cache.addAll(urlsToCache)}))}),self.addEventListener("fetch",function(event){return console.log("SW "+VERSION+CACHE_NAME+" - fetch event in progress."),"GET"!==event.request.method?void console.log("SW "+VERSION+CACHE_NAME+" - fetch event ignored.",event.request.method,event.request.url):void event.respondWith(caches.match(event.request).then(function(cached){function fetchedFromNetwork(response){var cacheCopy=response.clone();return console.log("SW "+VERSION+CACHE_NAME+" - fetch response from network.",event.request.url),caches.open(VERSION+CACHE_NAME).then(function(cache){cache.put(event.request,cacheCopy)}).then(function(){console.log("SW "+VERSION+CACHE_NAME+" - fetch response stored in cache.",event.request.url)}),response}function unableToResolve(){return console.log("SW "+VERSION+CACHE_NAME+" - fetch request failed in both cache and network"),new Response("<h1>Service Unavailable</h1>",{status:503,statusText:"Service Unavailable",headers:new Headers({"Content-Type":"text/html"})})}var networked=fetch(event.request).then(fetchedFromNetwork,unableToResolve)["catch"](unableToResolve);return console.log("SW "+VERSION+CACHE_NAME+" - fetch event",cached?"(cached)":"(network)",event.request.url),cached||networked}))}),self.addEventListener("activate",function(event){console.log("SW "+VERSION+CACHE_NAME+" - activate event in progress."),event.waitUntil(caches.keys().then(function(keys){return Promise.all(keys.filter(function(key){return!key.startsWith(VERSION)}).map(function(key){return caches["delete"](key)}))}).then(function(){console.log("SW "+VERSION+CACHE_NAME+" - activate event completed.")}))})}();