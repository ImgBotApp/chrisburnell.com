@charset "UTF-8";
/*! Ravenous - version 2.2.0 */
/* by Chris Burnell (@iamchrisburnell)
 * The sixth iteration design of chrisburnell.com.
 * Please contact me if you want to learn about anything you see here.
 *
 * Table of Contents:
 *
 * NORMALIZE................. Import normalize as a reset.
 * INCLUDE MEDIA............. Import Include Media for dynamic media queries.
 * LAYOUT.................... Set the general page layout.
 * TYPOGRAPHY................ Set the default content styles.
 * BUTTONS................... Set the default button styles.
 * HEADER.................... Set the header styles.
 * LOGO...................... Set the logo styles.
 * NAVIGATION................ Set the navigation styles.
 * CONTENT................... Set the content styles.
 * ASIDES.................... Set the aside styles.
 * FOOTER.................... Set the footer styles.
 * CODE BLOCKS............... Set the code block styles.
 * ICONS..................... Set the icon styles.
 * PRINT..................... Set the print styles.
 * SHAME..................... Shameful hacks, shims, and temporary fixes.
 */
/*! normalize.css v3.0.2 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio, canvas, progress, video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden], template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active, a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b, strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code, kbd, pre, samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button, input, optgroup, select, textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button, select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button, html input[type="button"], input[type="reset"], input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled], html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner, input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"], input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button, input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td, th {
  padding: 0; }

/*------------------------------------*\
    $LAYOUT
\*------------------------------------*/
html {
  box-sizing: border-box; }

*, *:before, *:after {
  box-sizing: inherit; }

body {
  background-color: #F9F9F9;
  color: #4F4F4F;
  position: relative;
  font: 400 normal 16px/1.875em "ff-meta-serif-web-pro", Georgia, serif;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased; }

.wrap {
  width: auto;
  max-width: 1140px;
  padding-right: 1.25rem;
  padding-left: 1.25rem;
  margin-right: auto;
  margin-left: auto; }

.clear {
  clear: both;
  zoom: 1; }
  .clear:before, .clear:after {
    content: "";
    display: table; }
  .clear:after {
    clear: both; }

/**
 * Allow for fixed-width content
 */
.fixed-width {
  width: 1140px; }

/**
 * Hide things... â€™nuff said
 */
.hidden, p:empty {
  display: none; }

figure img, figure svg, blockquote, .article-banner, .small-articles-list a, .color-block-list li, aside:not(.author), .author-image, pre:not(.codepen), [data-lang]:before {
  background-clip: padding-box;
  border-radius: .375em; }

button, .button, .logo {
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
  -webkit-touch-callout: none; }

/*------------------------------------*\
    $TYPOGRAPHY
\*------------------------------------*/
h1, h2, h3, h4, h5, h6 {
  min-height: 1.2em;
  padding: 0;
  margin: 0;
  font-weight: 400;
  line-height: 1.2em; }

h1 {
  font-family: "league-gothic", Impact, sans-serif;
  font-size: 2.625em;
  text-transform: uppercase;
  text-shadow: .0714em .0714em 0 rgba(6, 6, 6, 0.05); }

h2 {
  font-family: "ff-meta-serif-web-pro", Georgia, serif;
  font-size: 1.625em; }

h3, h4, .articles-list .article-date {
  font-family: "proxima-nova", sans-serif;
  font-weight: 600; }

h3, .articles-list .article-date {
  font-size: 1.125em;
  line-height: 1.875em;
  text-transform: uppercase; }

h3 {
  margin-top: .5em;
  border-bottom: .125em solid #DDDDDD;
  position: relative; }
  h3:not(:last-child) {
    margin-bottom: 1.25rem; }

h4 {
  margin-bottom: .5em; }

a {
  color: #5F8AA6;
  text-decoration: none;
  -webkit-transition: background 0.2s ease, color 0.2s ease;
          transition: background 0.2s ease, color 0.2s ease; }
  a:hover, a:focus, a:active {
    text-decoration: underline; }
  h2 a, h3 a {
    color: #4F4F4F; }
    h2 a:hover, h2 a:focus, h2 a:active, h3 a:hover, h3 a:focus, h3 a:active {
      color: #5F8AA6; }
  a span:not([class]) {
    width: 1px;
    height: 1px;
    position: absolute;
    overflow: hidden; }

.heading-anchor {
  color: #737373;
  display: none;
  padding-left: 1em;
  font-family: Consolas, Monaco, "Courier New", monospace;
  font-size: .8125rem;
  font-weight: 600;
  line-height: 1.875em;
  text-transform: lowercase;
  vertical-align: middle; }
  :hover > .heading-anchor, :focus > .heading-anchor, :active > .heading-anchor {
    display: inline-block; }
  h1 .heading-anchor {
    text-shadow: none; }

/**
     * Brand Link Colours
     */
.codepen-link {
  color: #212121 !important; }

.github-link {
  color: #333333 !important; }

.lastfm-link {
  color: #E31B23 !important; }

.rss-link {
  color: #5F8AA6 !important; }

.twitter-link {
  color: #2795e9 !important; }

.article-link {
  color: #5F8AA6 !important; }

.feather-link {
  color: #5F8AA6 !important; }

.heart-link {
  color: #5F8AA6 !important; }

.tag-link {
  color: #5F8AA6 !important; }

p {
  margin: 0; }
  p:not(:last-child) {
    margin-bottom: 1.25rem; }

ol, ul {
  padding: 0;
  margin: 0;
  list-style: none; }

ol:not([class]) li, ul:not([class]) li, .default-list li {
  padding-left: 2em;
  margin-bottom: 1em;
  position: relative; }
  ol:not([class]) li:before, ul:not([class]) li:before, .default-list li:before {
    position: absolute;
    top: 0;
    left: 0;
    font-family: "proxima-nova", sans-serif;
    font-weight: 600; }
ol:not([class]) ol:not([class]), ol:not([class]) ul:not([class]), ol:not([class]) .default-list, ul:not([class]) ol:not([class]), ul:not([class]) ul:not([class]), ul:not([class]) .default-list, .default-list ol:not([class]), .default-list ul:not([class]), .default-list .default-list {
  margin-top: 1em; }

ol:not([class]), ol.default-list {
  counter-reset: ordered-list; }
  ol:not([class]) li, ol.default-list li {
    counter-increment: ordered-list; }
    ol:not([class]) li:before, ol.default-list li:before {
      content: counter(ordered-list) "."; }

ul:not([class]) li:before, ul.default-list li:before {
  content: "\2022";
  font-size: 1.5em;
  line-height: 1em; }

dl {
  width: 100%;
  display: table; }
  dl:not(:last-child) {
    margin-bottom: 1.25rem; }
  dl dt {
    width: auto;
    min-width: 10em;
    display: inline-block;
    padding-right: 1.25rem;
    font-family: "proxima-nova", sans-serif;
    font-weight: 600; }
    @media (min-width: 501px) {
      dl dt {
        min-width: 10em;
        padding-right: 1.25rem; } }
  dl dd {
    width: 1140px;
    display: table-cell;
    margin: 0;
    overflow: hidden;
    vertical-align: top; }
    @media (max-width: 500px) {
      dl dd {
        width: auto;
        display: block;
        margin-left: 1.25rem; } }

img, a img {
  width: auto;
  max-width: 100%;
  height: auto; }

figure {
  margin: 0 0 .5em;
  text-align: center; }
  figure:not(:last-child) {
    margin-bottom: 1.25rem; }

figcaption {
  color: #737373;
  font-style: italic; }

abbr[title], blockquote, cite, dfn[title] {
  color: #737373;
  font-style: italic; }

abbr[title], dfn[title] {
  border-bottom: 1px dotted #737373;
  cursor: help; }

ins {
  text-decoration: none; }

q {
  font-style: italic;
  quotes: "\201C" "\201D" "\2018" "\2019"; }

blockquote {
  background-color: rgba(95, 138, 166, 0.1);
  padding: 1em;
  margin: 0 2.25rem 1em;
  quotes: "\201C" "\201D" "\2018" "\2019"; }
  @media (max-width: 500px) {
    blockquote {
      margin-right: 1em;
      margin-left: 1em; } }
  blockquote p {
    margin-bottom: 0 !important; }
    blockquote p:before {
      content: open-quote;
      padding-right: .1875em; }
    blockquote p:after {
      content: close-quote;
      padding-left: .1875em; }
  blockquote cite {
    display: block;
    margin-left: 2em;
    margin-top: 1em; }
    blockquote cite:before {
      content: "\2013\00a0"; }

hr {
  background: rgba(6, 6, 6, 0.1);
  width: 100%;
  height: .125em;
  display: block;
  border: 0;
  margin: .5em 0 1.25rem; }

::-moz-selection {
  background: #5F8AA6;
  color: #F9F9F9; }

::selection {
  background: #5F8AA6;
  color: #F9F9F9; }

/*------------------------------------*\
    $BUTTONS
\*------------------------------------*/
button, .button {
  background-color: #5F8AA6;
  color: #F9F9F9;
  min-width: 8em;
  height: 2.182em;
  display: inline-block;
  padding: 0 .727em .182em;
  border: 0;
  margin-top: .182em;
  outline-style: none;
  position: relative;
  font-family: "league-gothic", Impact, sans-serif;
  font-size: 1.375em;
  line-height: 2em;
  text-align: center;
  text-transform: uppercase;
  white-space: nowrap;
  cursor: pointer;
  border-radius: .182em;
  box-shadow: inset 0 -0.182em 0 0 #4b6f87;
  -webkit-transition: background-color 0.2s ease;
          transition: background-color 0.2s ease; }
  button:hover, button:focus, button:active, .button:hover, .button:focus, .button:active {
    background-color: #6f96af;
    outline-style: auto;
    text-decoration: none; }
  button:active, .button:active {
    height: 2em;
    padding-bottom: 0;
    margin-bottom: .182em;
    box-shadow: inset 0 -0.046em 0 0 #4b6f87;
    -webkit-transform: translate3d(0, .182em, 0);
            transform: translate3d(0, .182em, 0); }
  button:before, button:after, .button:before, .button:after {
    content: "";
    width: 100%;
    height: .182em;
    position: absolute;
    top: 0;
    left: 0; }
  button:active:before, button:active:after, .button:active:before, .button:active:after {
    top: -0.182em; }
  button[disabled], .button[disabled] {
    opacity: .4; }
  @media (max-width: 768px) {
    .not-found-page button, .not-found-page .button {
      display: block;
      margin: 0 auto 1.25rem; } }
  button svg, .button svg {
    width: .8em;
    height: .8em;
    display: inline-block;
    margin-right: .25em; }
  button .article-icon, .button .article-icon {
    width: .72em; }
  button .feather-icon, .button .feather-icon {
    width: .58em; }

/*------------------------------------*\
    $HEADER
\*------------------------------------*/
@media (max-width: 768px) {
  header {
    text-align: center; } }

/*------------------------------------*\
    $LOGO
\*------------------------------------*/
.logo {
  color: #4F4F4F;
  display: inline-block;
  padding-top: .5em;
  padding-left: 1.923em;
  position: relative;
  font-family: "league-gothic", Impact, sans-serif;
  font-size: 3.25em;
  line-height: 1em;
  text-transform: uppercase;
  text-shadow: .058em .058em 0 rgba(6, 6, 6, 0.05);
  white-space: nowrap;
  z-index: 1;
  -webkit-transition: all 0.2s ease;
          transition: all 0.2s ease; }
  .logo:hover, .logo:focus, .logo:active {
    text-decoration: none; }
  @media (min-width: 769px) {
    .logo {
      float: left; } }
  @media (max-width: 500px) {
    .logo {
      font-size: 2.75em; } }
  .logo:active {
    -webkit-transform: translate3d(0, .039em, 0);
            transform: translate3d(0, .039em, 0); }
    .logo:active svg {
      /**
             * In order to get `.logo svg` to travel up 2x the distance the
             * `.logo` text does, first the `translate` applied on the parent
             * (of the `aside`) has to be counteracted, then (2 * 0.039em)
             * is added, totalling 0.117em, made negative on the y-axis to
             * go up. We cannot use `translate` as it is used below for
             * further animating.
             */
      top: -0.117em; }
  .logo svg {
    width: 2.307em;
    height: 2.307em;
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    -webkit-animation: soaring 30s linear alternate infinite;
            animation: soaring 30s linear alternate infinite;
    -webkit-animation-play-state: paused;
            animation-play-state: paused;
    -webkit-transition: all 0.2s ease;
            transition: all 0.2s ease;
    -webkit-transform: translate3d(0, -0.8125em, 0);
            transform: translate3d(0, -0.8125em, 0); }
  .logo:hover svg, .logo:focus svg, .logo:active svg {
    /**
         * Only animate the image when the user hovers `.logo`.
         */
    -webkit-animation-play-state: running;
            animation-play-state: running; }

@-webkit-keyframes soaring {
  0%, 100% {
    -webkit-transform: translate3d(0, -0.8125em, 0);
            transform: translate3d(0, -0.8125em, 0); }

  12.5% {
    -webkit-transform: translate3d(-0.0625em, -0.6875em, 0);
            transform: translate3d(-0.0625em, -0.6875em, 0); }

  25% {
    -webkit-transform: translate3d(.125em, -0.3125em, 0);
            transform: translate3d(.125em, -0.3125em, 0); }

  37.5% {
    -webkit-transform: translate3d(.3125em, -0.375em, 0);
            transform: translate3d(.3125em, -0.375em, 0); }

  50% {
    -webkit-transform: translate3d(.125em, -0.4375em, 0);
            transform: translate3d(.125em, -0.4375em, 0); }

  62.5% {
    -webkit-transform: translate3d(.0625em, -0.25em, 0);
            transform: translate3d(.0625em, -0.25em, 0); }

  75% {
    -webkit-transform: translate3d(.1875em, -0.4375em, 0);
            transform: translate3d(.1875em, -0.4375em, 0); }

  87.5% {
    -webkit-transform: translate3d(-0.0625em, -0.5625em, 0);
            transform: translate3d(-0.0625em, -0.5625em, 0); } }

@keyframes soaring {
  0%, 100% {
    -webkit-transform: translate3d(0, -0.8125em, 0);
            transform: translate3d(0, -0.8125em, 0); }

  12.5% {
    -webkit-transform: translate3d(-0.0625em, -0.6875em, 0);
            transform: translate3d(-0.0625em, -0.6875em, 0); }

  25% {
    -webkit-transform: translate3d(.125em, -0.3125em, 0);
            transform: translate3d(.125em, -0.3125em, 0); }

  37.5% {
    -webkit-transform: translate3d(.3125em, -0.375em, 0);
            transform: translate3d(.3125em, -0.375em, 0); }

  50% {
    -webkit-transform: translate3d(.125em, -0.4375em, 0);
            transform: translate3d(.125em, -0.4375em, 0); }

  62.5% {
    -webkit-transform: translate3d(.0625em, -0.25em, 0);
            transform: translate3d(.0625em, -0.25em, 0); }

  75% {
    -webkit-transform: translate3d(.1875em, -0.4375em, 0);
            transform: translate3d(.1875em, -0.4375em, 0); }

  87.5% {
    -webkit-transform: translate3d(-0.0625em, -0.5625em, 0);
            transform: translate3d(-0.0625em, -0.5625em, 0); } }

/*------------------------------------*\
    $NAVIGATION
\*------------------------------------*/
.primary-navigation {
  padding-bottom: 1.25em;
  white-space: nowrap; }
  @media (min-width: 769px) {
    .primary-navigation {
      float: right;
      padding-top: 1.5em; } }
  @media (max-width: 768px) {
    .primary-navigation {
      width: 100%; } }

.primary-navigation-list {
  height: 3.75em; }
  @media (min-width: 769px) {
    .primary-navigation-list {
      float: right; } }
  @media (max-width: 768px) {
    .primary-navigation-list {
      text-align: center; } }
  .primary-navigation-list li {
    display: inline-block; }
    @media (min-width: 769px) {
      .primary-navigation-list li {
        float: left; } }
    .primary-navigation-list li + li {
      margin-left: 1em; }
      @media (max-width: 768px) {
        .primary-navigation-list li + li {
          margin-left: .5em; } }
      @media (max-width: 500px) {
        .primary-navigation-list li + li {
          margin-left: .25em; } }
  .primary-navigation-list a {
    color: #737373;
    display: block;
    padding: .75em;
    border-bottom: 0 solid #5F8AA6;
    margin-bottom: .3em;
    position: relative;
    font-family: "league-gothic", Impact, sans-serif;
    font-size: 1.25em;
    line-height: 1.25em;
    text-transform: uppercase;
    -webkit-transition: color 0.2s ease, padding-bottom 0.2s ease, border-bottom-width 0.2s ease, -webkit-transform 0.2s ease;
            transition: color 0.2s ease, padding-bottom 0.2s ease, border-bottom-width 0.2s ease, transform 0.2s ease; }
    .primary-navigation-list a:hover, .primary-navigation-list a:focus, .primary-navigation-list a:active {
      text-decoration: none; }
    .primary-navigation-list a:active {
      -webkit-transform: translate3d(0, .2em, 0);
              transform: translate3d(0, .2em, 0); }
    @media (max-width: 500px) {
      .primary-navigation-list a {
        padding-left: .5em;
        padding-right: .5em; } }

.primary-navigation-list a:hover, .primary-navigation-list a:focus, .primary-navigation-list a:active, .home-page .primary-navigation-home a, .about-page .primary-navigation-about a, .archive-page .primary-navigation-archive a, .pens-page .primary-navigation-pens a {
  color: #4F4F4F;
  padding-bottom: .55em;
  border-bottom-width: .2em; }

.home-page .primary-navigation-home a:after, .about-page .primary-navigation-about a:after, .archive-page .primary-navigation-archive a:after, .pens-page .primary-navigation-pens a:after {
  content: "";
  border-top: .5em solid #5F8AA6;
  border-right: .5em solid transparent;
  border-left: .5em solid transparent;
  position: absolute;
  top: 100%;
  left: 50%;
  -webkit-transform: translate3d(-50%, 0, 0);
          transform: translate3d(-50%, 0, 0); }

/*------------------------------------*\
    $CONTENT
\*------------------------------------*/
.content {
  padding-bottom: 2.25rem; }

/**
 * The width of the articles is fluid, and always has padding on the left-hand
 * side to make room for any `aside`, which can appear anywhere inside
 * `article` or `.articles-list`.
 * Maximum total width of container
 *   = 1080px
 * Left-hand padding
 *   = 25% of 1080px = 270px  = 16.875em
 */
article {
  padding-top: 2.25rem;
  border-top: 0.25rem solid #5F8AA6; }
  @media (min-width: 769px) {
    article {
      padding-left: 18.125rem; } }
  @media (max-width: 768px) {
    article {
      /**
         * When you hit the `medium` media query, `article`, `article-list`, and
         * `aside` becomes full width and `aside.author-information` pushes to
         * the bottom of the page.
         */
      display: -webkit-box;
      display: -webkit-flex;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -webkit-flex-direction: column;
          -ms-flex-direction: column;
              flex-direction: column; } }

.articles-list li {
  width: 100%;
  display: inline-block;
  clear: both;
  padding: 1.5em 1em;
  border-top: 0.125rem solid rgba(6, 6, 6, 0.1);
  position: relative; }
  .articles-list li:nth-child(odd) {
    background-color: rgba(6, 6, 6, 0.05); }
  @media (max-width: 768px) {
    .articles-list li {
      padding-top: 1.875em;
      padding-bottom: 1.875em;
      text-align: center; } }
.articles-list .article-title, .articles-list .article-date, .articles-list .comments-link {
  text-shadow: 0 1px 0 #F9F9F9; }

.article-banner {
  width: 810px;
  margin-bottom: 1em; }
  @media (max-width: 500px) {
    .article-banner {
      width: 500px; } }

.article-title, .page-title, .site-tagline {
  margin-bottom: .75em; }

.site-description {
  max-width: 24em;
  margin-top: -0.2em;
  margin-bottom: 1em;
  line-height: 1.4em; }
  @media (max-width: 768px) {
    .site-description {
      margin-bottom: 1.385em; } }

.article-introduction, .page-description {
  margin-bottom: 1em;
  font-size: 1.25em;
  line-height: 1.5em; }

@media (max-width: 768px) {
  .article-title, .article-date, .article-introduction {
    text-align: left; } }

.article-introduction {
  margin-top: -5px; }
  @media (max-width: 768px) {
    .article-introduction {
      margin-top: 0; } }
  .article-banner + .article-introduction {
    margin-top: 0; }

.article-title {
  width: 100%; }
  .article-title .article-title-link {
    display: inline-block;
    padding: 0 .27em;
    border-bottom: .077em solid transparent;
    margin-left: -0.27em;
    -webkit-transition: border-color 0.2s ease;
            transition: border-color 0.2s ease; }
    .article-title .article-title-link:hover, .article-title .article-title-link:focus, .article-title .article-title-link:active {
      color: #4F4F4F;
      border-bottom-color: #5F8AA6;
      text-decoration: none; }

.articles-list .article-date:before {
  content: "\2013\0020";
  color: #737373; }

.comments-link {
  display: inline-block;
  margin-top: 1.625em;
  font-family: "proxima-nova", sans-serif;
  font-weight: 600;
  line-height: 1em; }
  .comments-link:after {
    content: "\00a0\2192"; }
  @media (min-width: 769px) {
    .comments-link {
      float: right; } }
  @media (max-width: 768px) {
    .comments-link {
      display: block;
      margin-top: 1.25rem; } }

.small-articles-list {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  -webkit-flex-direction: row;
      -ms-flex-direction: row;
          flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
      -ms-flex-pack: justify;
          justify-content: space-between;
  -webkit-flex-wrap: wrap;
      -ms-flex-wrap: wrap;
          flex-wrap: wrap;
  margin: 0 -0.5em 1.5em;
  font-family: "proxima-nova", sans-serif;
  line-height: 1.25em; }
  @media (max-width: 768px) {
    .small-articles-list {
      margin-bottom: 1.875em; } }
  .small-articles-list li {
    width: 49.0125%;
    display: inline-block; }
    .small-articles-list li:nth-child(n+3) {
      margin-top: 1em; }
    aside .small-articles-list li {
      width: 100%; }
      aside .small-articles-list li + li {
        margin-top: 1em; }
    @media (max-width: 500px) {
      .small-articles-list li {
        width: 100%; }
        .small-articles-list li + li {
          margin-top: 1em; } }
  .small-articles-list a {
    display: block;
    padding: .5em;
    position: relative;
    overflow: hidden; }
    .small-articles-list a:hover, .small-articles-list a:focus, .small-articles-list a:active {
      background-color: rgba(6, 6, 6, 0.05);
      text-decoration: none; }
  .small-articles-list .small-article-title, .small-articles-list .small-article-introduction, .small-articles-list .small-article-date {
    text-shadow: 0 1px 0 #F9F9F9; }
  .small-articles-list .small-article-title {
    margin-bottom: .3125em; }
  .small-articles-list .small-article-date {
    color: #737373;
    display: block;
    font-size: .8125em;
    font-weight: 600; }
    .small-articles-list .small-article-date:before {
      content: "\2013\0020"; }
  .small-articles-list .codepen-icon ~ .small-article-date {
    margin-top: .3125em; }
  .small-articles-list .small-article-introduction {
    color: #4F4F4F;
    margin-top: .3125em; }

/**
 * For Featured Pens, `svg` is a child of the `li`
 */
.small-articles-list svg {
  opacity: 0.05;
  width: 6.25em !important;
  height: 6.25em;
  display: block;
  position: absolute;
  top: 50%;
  right: .5em;
  stroke: #4F4F4F;
  z-index: -1;
  -webkit-transition: all 0.2s ease;
          transition: all 0.2s ease;
  -webkit-transform: translate3d(0, -50%, 0);
          transform: translate3d(0, -50%, 0); }
  @media (max-width: 500px) {
    .small-articles-list svg {
      width: 4em !important;
      height: 4em; } }
.small-articles-list a:hover svg, .small-articles-list a:focus svg, .small-articles-list a:active svg {
  opacity: 0.25; }

.pens-introduction {
  padding-bottom: 1.25rem;
  border-bottom: 0.125rem solid rgba(6, 6, 6, 0.1); }

.articles-navigation {
  width: 100%;
  padding: 2.068rem 0 2.25rem;
  border-top: 0.125rem solid rgba(6, 6, 6, 0.1);
  text-align: center; }
  .about-page .articles-navigation {
    border-top: 0;
    padding: 1.25rem 0; }
  .articles-navigation button, .articles-navigation .button {
    display: inline-block; }
    @media (min-width: 501px) {
      .articles-navigation button + button, .articles-navigation button + .button, .articles-navigation .button + button, .articles-navigation .button + .button {
        margin-left: 1.875em; } }

.comments {
  text-align: center; }
  @media (min-width: 769px) {
    .pagination + .comments {
      padding-top: 2.25rem; } }
  .comments .show-comments:before, .comments .show-comments:active:before {
    position: relative;
    top: 0; }
  .comments noscript {
    font-family: "proxima-nova", sans-serif;
    font-size: 1.25em;
    font-style: italic; }

/**
 * Style Guide
 */
.color-block-list {
  margin-bottom: .75em;
  text-align: center; }
  .color-block-list li {
    color: #F9F9F9;
    width: 6.5em;
    height: 6.5em;
    display: inline-block;
    border: 0.25rem solid rgba(6, 6, 6, 0.25);
    margin: 0 .25em .5em;
    font-family: Consolas, Monaco, "Courier New", monospace;
    font-weight: 700;
    line-height: 6em;
    text-align: center;
    white-space: nowrap; }
    .color-block-list li[data-color="#5F8AA6"] {
      background-color: #5F8AA6; }
    .color-block-list li[data-color="#F9F9F9"] {
      background-color: #F9F9F9;
      color: #4F4F4F; }
    .color-block-list li[data-color="#4F4F4F"] {
      background-color: #4F4F4F; }
    .color-block-list li[data-color="#737373"] {
      background-color: #737373; }
    .color-block-list li[data-color="#DDDDDD"] {
      background-color: #DDDDDD;
      color: #4F4F4F; }

.style-guide-page :not(.page-description) + h3[id] {
  margin-top: 3.375rem; }

/**
 * Contains embedded media properly and allows them to be dynamically resized.
 */
.media-container {
  height: 0;
  padding-top: 30px;
  padding-bottom: 56.65%;
  position: relative;
  overflow: hidden; }
  .media-container embed, .media-container iframe, .media-container object, .media-container video {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0; }

/**
 * Fix `iframe` and `video`
 */
iframe, video {
  width: 100%;
  margin-bottom: 1.25rem;
  border: none;
  overflow-x: hidden; }

/*------------------------------------*\
    $ASIDES
\*------------------------------------*/
/**
 * The width of the asides is static and and always floated within an article or
 * list of articles. The math is calculated as in the articles partial.
 */
aside {
  width: 15.875rem; }
  @media (min-width: 769px) {
    aside {
      float: left;
      margin-left: -18.125rem; } }
  @media (max-width: 768px) {
    aside {
      width: 100%; }
      aside:not(.author) {
        background: rgba(6, 6, 6, 0.05);
        padding: 1em;
        margin-bottom: 1.25rem; }
        aside:not(.author):last-child {
          margin-bottom: 0; } }
  aside p, aside figcaption {
    clear: both;
    font-size: .875em; }
    @media (max-width: 500px) {
      aside p, aside figcaption {
        font-size: 1em; } }

/*aside*/
.author {
  font-family: "proxima-nova", sans-serif; }
  @media (max-width: 768px) {
    .author {
      display: -webkit-box;
      display: -webkit-flex;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -webkit-flex-direction: column;
          -ms-flex-direction: column;
              flex-direction: column;
      -webkit-box-ordinal-group: 1000;
      -webkit-order: 999;
          -ms-flex-order: 999;
              order: 999; }
      .about-page .author {
        margin-top: 1.25rem; } }

.author-information {
  margin-bottom: .5em;
  font-family: "ff-meta-serif-web-pro", Georgia, serif;
  font-size: .875em;
  font-style: italic; }
  @media (max-width: 768px) {
    .author-information {
      -webkit-box-ordinal-group: 999;
      -webkit-order: 998;
          -ms-flex-order: 998;
              order: 998;
      padding-top: 2.25rem;
      border-top: 0.125rem solid rgba(6, 6, 6, 0.1); } }
  .author-information a, .author-information strong {
    color: inherit;
    font-family: "proxima-nova", sans-serif;
    font-weight: 600;
    font-style: normal;
    text-transform: uppercase;
    white-space: nowrap; }

@media (min-width: 769px) {
  .author-biography {
    margin-bottom: 1.25rem; } }
@media (max-width: 768px) {
  .author-biography {
    -webkit-box-ordinal-group: 1000;
    -webkit-order: 999;
        -ms-flex-order: 999;
            order: 999; } }

.author-name, .author-age, .author-employer, .article-date, .article-label {
  box-sizing: content-box;
  display: block;
  margin-bottom: .5em;
  line-height: 1.429em; }

.article-label a:after, .featured-pens-link:after {
  content: "\00a0\2192"; }

.author-image {
  background-size: 100%;
  width: 6.25em;
  height: 6.25em;
  display: inline-block;
  float: left;
  margin-right: .625em; }

.article-tags {
  display: table-cell;
  line-height: 1.429em; }

@media (min-width: 769px) {
  .featured-pens, .related-articles {
    margin-top: 1.25rem; } }

.featured-pens-title, .related-articles-title {
  margin-top: 0; }

.featured-pens-link {
  width: 100%;
  display: block;
  margin-top: 0.625rem;
  font-weight: bold;
  text-align: right; }
  @media (max-width: 768px) {
    .featured-pens-link {
      margin-bottom: 1.25rem;
      text-align: center; } }

/*------------------------------------*\
    $FOOTER
\*------------------------------------*/
footer {
  background-color: #4F4F4F;
  color: #DDDDDD;
  width: 100%;
  padding: 2.25rem 0;
  border-top: .286em solid #5F8AA6;
  font-family: "proxima-nova", sans-serif;
  font-weight: 600;
  text-transform: uppercase;
  background-image: -webkit-linear-gradient(top, transparent 0%, rgba(6, 6, 6, 0.1) 100%);
  background-image: linear-gradient(to bottom, transparent 0%, rgba(6, 6, 6, 0.1) 100%); }

.copyright, .social-icon-list {
  overflow: hidden; }
  @media (min-width: 769px) {
    .copyright, .social-icon-list {
      float: left; } }
  @media (max-width: 768px) {
    .copyright, .social-icon-list {
      width: 100%;
      text-align: center; } }

.social-icon-list {
  float: right;
  margin-top: .3125em; }
  @media (max-width: 768px) {
    .social-icon-list {
      margin-top: .625em; } }
  .social-icon-list li {
    display: inline-block; }
    .social-icon-list li + li {
      margin-left: 1em; }

.home-link, .copyright-link, .style-guide-link {
  display: inline-block;
  white-space: nowrap; }

.home-link {
  width: 50px;
  height: 50px;
  margin-right: 1em;
  overflow: hidden;
  vertical-align: middle;
  text-indent: 100%;
  white-space: nowrap;
  -webkit-transition: all 0.2s ease;
          transition: all 0.2s ease; }
  .home-link:hover, .home-link:focus, .home-link:active {
    text-decoration: none; }
  .home-link:active {
    -webkit-transform: translate3d(0, .143em, 0);
            transform: translate3d(0, .143em, 0); }
  @media (max-width: 500px) {
    .home-link {
      margin-right: .5em; } }
  .home-link svg {
    width: 100%;
    height: 100%;
    display: block; }

.copyright-link, .style-guide-link {
  color: #DDDDDD; }

@media (max-width: 500px) {
  .style-guide-link {
    display: block; } }

.footer-spacer {
  color: #737373; }
  @media (max-width: 500px) {
    .footer-spacer {
      display: none; } }

/*------------------------------------*\
    $CODE AND CODE BLOCKS
\*------------------------------------*/
code, kbd, samp, var, .monospace {
  font-family: Consolas, Monaco, "Courier New", monospace;
  font-size: .875em; }

p code, ol code, ul code, ins, kbd, mark, samp, var {
  background-color: rgba(95, 138, 166, 0.1);
  padding: .215em;
  word-wrap: break-word;
  border-radius: .25em; }

pre {
  margin-top: 0; }
  pre:not(:last-child) {
    margin-bottom: 1.25rem; }
  pre:not(.codepen) {
    background-color: rgba(6, 6, 6, 0.05);
    padding: 1.5em 1.5em 1em;
    overflow-x: auto;
    overflow-y: hidden;
    line-height: 1.5em; }
    pre:not(.codepen) code {
      min-width: 100%;
      display: block; }

.highlight {
  position: relative; }

/**
 * `data-lang` is always an attribute on a code element inside `div.highlight`
 */
[data-lang] {
  padding-top: 2.25rem; }
  [data-lang]:before {
    content: attr(data-lang);
    background-color: #737373;
    color: #F9F9F9;
    width: 100%;
    display: block;
    padding: 0 1.5em;
    position: absolute;
    top: 0;
    left: 0;
    font-family: "proxima-nova", sans-serif;
    font-size: 1.25em;
    font-weight: 600;
    line-height: 2.4em;
    text-transform: uppercase;
    border-radius: .3em .3em 0 0;
    -webkit-transition: all 0.2s ease;
            transition: all 0.2s ease; }
  [data-lang].language-css:before {
    background-color: #016FBA; }
  [data-lang].language-haml:before {
    background-color: #E54D26; }
  [data-lang].language-html:before {
    background-color: #E54D26; }
  [data-lang].language-javascript:before {
    background-color: #F1C54C; }
  [data-lang].language-sass:before {
    background-color: #C6538C; }
  [data-lang].language-scss:before {
    background-color: #C6538C; }

/**
 * Github-style Code Highlighting
 */
.highlight .err {
  background-color: lightcoral;
  color: firebrick;
  font-weight: 600; }
.highlight .c, .highlight .cm, .highlight .cp, .highlight .c1, .highlight .cs {
  color: #737373;
  font-style: italic; }
.highlight .gs, .highlight .k, .highlight .kc, .highlight .kd, .highlight .kp, .highlight .kr, .highlight .kt, .highlight .nc, .highlight .ne, .highlight .nf, .highlight .o, .highlight .ow {
  font-weight: 600; }
.highlight .gr, .highlight .gt, .highlight .ne, .highlight .nf, .highlight .s, .highlight .sb, .highlight .sc, .highlight .sd, .highlight .s1, .highlight .s2, .highlight .se, .highlight .sh, .highlight .si, .highlight .sx {
  color: firebrick; }
.highlight .gi, .highlight .gi .x {
  background-color: turquoise; }
.highlight .gd, .highlight .gd .x {
  background-color: lightcoral; }
.highlight .ge {
  font-style: italic; }
.highlight .m, .highlight .il, .highlight .mf, .highlight .mh, .highlight .mi, .highlight .mo, .highlight .nb, .highlight .no, .highlight .nv, .highlight .vc, .highlight .vg, .highlight .vi {
  color: cadetblue; }
.highlight .sr {
  color: forestgreen; }
.highlight .bp, .highlight .gh, .highlight .go, .highlight .gp, .highlight .nn {
  color: #737373; }
.highlight .gu, .highlight .w {
  color: #DDDDDD; }
.highlight .kt, .highlight .na, .highlight .nc, .highlight .nt {
  color: #5F8AA6; }
.highlight .ni, .highlight .ss {
  color: slateblue;
  color: rebeccapurple; }

/*------------------------------------*\
    $ICONS
\*------------------------------------*/
.svg-master {
  display: none; }

/*a*/
.icon {
  opacity: 0.7;
  height: 40px;
  display: block;
  overflow: hidden;
  text-indent: 100%;
  white-space: nowrap;
  -webkit-transition: all 0.2s ease;
          transition: all 0.2s ease; }
  .icon:hover, .icon:focus, .icon:active {
    opacity: 1;
    text-decoration: none; }
  .icon:active {
    -webkit-transform: translate3d(0, .14em, 0);
            transform: translate3d(0, .14em, 0); }
  .icon.codepen-icon, .icon.codepen-link {
    width: 41px; }
  .icon.github-icon, .icon.github-link {
    width: 38px; }
  .icon.lastfm-icon, .icon.lastfm-link {
    width: 40px; }
  .icon.rss-icon, .icon.rss-link {
    width: 31px; }
  .icon.twitter-icon, .icon.twitter-link {
    width: 37px; }
  .icon.article-icon, .icon.article-link {
    width: 36px; }
  .icon.feather-icon, .icon.feather-link {
    width: 29px; }
  .icon.heart-icon, .icon.heart-link {
    width: 40px; }
  .icon.tag-icon, .icon.tag-link {
    width: 40px; }
  .icon svg {
    width: 100%;
    height: 100%;
    display: block; }

/*------------------------------------*\
    $PRINT
\*------------------------------------*/
@media print {
  nav, .related-articles, .pagination, .comments, footer .home-link, .copyright-spacer, footer .style-guide-link, .social-icon-list {
    display: none; }
  button, .button {
    color: #4F4F4F;
    border: 1px solid #4F4F4F;
    box-shadow: none; } }

/*------------------------------------*\
    $SHAME
\*------------------------------------*/

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJhdmVub3VzLmNzcyIsIm5vcm1hbGl6ZS5zY3NzIiwidWkvX2xheW91dC5zY3NzIiwidWkvX3ZhcnMuc2NzcyIsInVpL190eXBvZ3JhcGh5LnNjc3MiLCJpbmNsdWRlLW1lZGlhLnNjc3MiLCJ1aS9fYnV0dG9ucy5zY3NzIiwidWkvX2xvZ28uc2NzcyIsInVpL19uYXZpZ2F0aW9uLnNjc3MiLCJ1aS9fY29udGVudC5zY3NzIiwidWkvX2FzaWRlcy5zY3NzIiwidWkvX2Zvb3Rlci5zY3NzIiwidWkvX2NvZGUuc2NzcyIsInVpL19pY29ucy5zY3NzIiwidWkvX3ByaW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWlCO0FBQ2pCLGdDQUErQjtBQUMvQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBcUJHO0FBQ0gsNkRBQTREO0FBQzVEOzs7O0lDakJBO0FEc0JBO0VBQ0UseUJBQXdCO0VDckJ4QixRQUFzQjtFRHVCdEIsNEJBQTJCO0VDdEIzQixRQUEwQjtFRHdCMUIsZ0NBQStCO0VBQy9CLFFBQU8sRUFBRTs7QUFFWDs7SUNwQkE7QUR1QkE7RUFDRSxXQUFVLEVBQUU7O0FBRWQ7aUZBQ2dGO0FBQ2hGOzs7OztJQ2QrRjtBRG9CL0Y7RUFDRSxnQkFBZSxFQUFFOztBQUVuQjs7O0lDRnlCO0FETXpCO0VBQ0UsdUJBQXNCO0VDRnRCLFFBQWdCO0VESWhCLDBCQUF5QjtFQUN6QixRQUFPLEVBQUU7O0FBRVg7OztJQ0NVO0FER1Y7RUNERSxlQUFRO0VER1IsV0FBVSxFQUFFOztBQUVkOzs7SUNHVTtBRENWO0VBQ0UsZUFBYyxFQUFFOztBQUVsQjtpRkFDZ0Y7QUFDaEY7O0lDTUE7QURIQTtFQUNFLCtCQUE4QixFQUFFOztBQUVsQzs7SUNRVztBRExYO0VBQ0UsWUFBVyxFQUFFOztBQUVmO2lGQUNnRjtBQUNoRjs7SUNZSTtBRFRKO0VBQ0UsMkJBQTBCLEVBQUU7O0FBRTlCOztJQ2NHO0FEWEg7RUFDRSxtQkFBa0IsRUFBRTs7QUFFdEI7O0lD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VCxnQkFBVTtFQUNWLGtCQUFhO0VBQ0EsbUJBQUE7RVY0RkQscUJBQUE7RVUxRkgsbUNBQWtCO1VBQWxCLDJCQUFrQixFQUFBO0VidTNDN0I7SWFuM0NNLFlBQWlCO0lBRXBCLHVCQUFBLEVBQUE7RWJvM0NIO0lhOTJDdUIsNkNBQUE7WUFBQSxxQ0FBQSxFQUFBO0ViZzNDdkI7SWFoM0NzQixhQUFBLEVBQUE7RWJrM0N0QjtJYWwzQ3NCLGFBQUEsRUFBQTtFYm8zQ3RCO0lhcDNDbUIsYUFBQSxFQUFBO0ViczNDbkI7SWF0M0N1QixhQUFBLEVBQUE7RWJ3M0N2QjtJYXgzQ3VCLGFBQUEsRUFBQTtFYjAzQ3ZCO0lhMTNDdUIsYUFBQSxFQUFBO0ViNDNDdkI7SWE1M0NxQixhQUFBLEVBQUE7RWI4M0NyQjtJYTkzQ21CLGFBQUEsRUFBQTtFYmc0Q25CO0lhNTNDSSxhQUFBLEVBQUE7RWI4M0NKO0lhNTNDYyxhQUFBO0lBQ0MsY0FBQTtJYjgzQ2IsZ0JBQWUsRUFBRTs7QUFFckI7O3lDS3R5Q0U7QUx5eUNGO0VBQ0U7SWN6NUNNLGVBQUEsRUFBQTtFZDI1Q047SWN4NUNjLGdCQUFBO0lBQ1IsMkJBQVk7SWQwNUNoQixrQkFBaUIsRUFBRSxFQUFFOztBQUV6Qjs7eUNBRXdDIiwiZmlsZSI6InJhdmVub3VzLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIkBjaGFyc2V0IFwiVVRGLThcIjtcbi8qISBSYXZlbm91cyAtIHZlcnNpb24gMi4yLjAgKi9cbi8qIGJ5IENocmlzIEJ1cm5lbGwgKEBpYW1jaHJpc2J1cm5lbGwpXG4gKiBUaGUgc2l4dGggaXRlcmF0aW9uIGRlc2lnbiBvZiBjaHJpc2J1cm5lbGwuY29tLlxuICogUGxlYXNlIGNvbnRhY3QgbWUgaWYgeW91IHdhbnQgdG8gbGVhcm4gYWJvdXQgYW55dGhpbmcgeW91IHNlZSBoZXJlLlxuICpcbiAqIFRhYmxlIG9mIENvbnRlbnRzOlxuICpcbiAqIE5PUk1BTElaRS4uLi4uLi4uLi4uLi4uLi4uIEltcG9ydCBub3JtYWxpemUgYXMgYSByZXNldC5cbiAqIElOQ0xVREUgTUVESUEuLi4uLi4uLi4uLi4uIEltcG9ydCBJbmNsdWRlIE1lZGlhIGZvciBkeW5hbWljIG1lZGlhIHF1ZXJpZXMuXG4gKiBMQVlPVVQuLi4uLi4uLi4uLi4uLi4uLi4uLiBTZXQgdGhlIGdlbmVyYWwgcGFnZSBsYXlvdXQuXG4gKiBUWVBPR1JBUEhZLi4uLi4uLi4uLi4uLi4uLiBTZXQgdGhlIGRlZmF1bHQgY29udGVudCBzdHlsZXMuXG4gKiBCVVRUT05TLi4uLi4uLi4uLi4uLi4uLi4uLiBTZXQgdGhlIGRlZmF1bHQgYnV0dG9uIHN0eWxlcy5cbiAqIEhFQURFUi4uLi4uLi4uLi4uLi4uLi4uLi4uIFNldCB0aGUgaGVhZGVyIHN0eWxlcy5cbiAqIExPR08uLi4uLi4uLi4uLi4uLi4uLi4uLi4uIFNldCB0aGUgbG9nbyBzdHlsZXMuXG4gKiBOQVZJR0FUSU9OLi4uLi4uLi4uLi4uLi4uLiBTZXQgdGhlIG5hdmlnYXRpb24gc3R5bGVzLlxuICogQ09OVEVOVC4uLi4uLi4uLi4uLi4uLi4uLi4gU2V0IHRoZSBjb250ZW50IHN0eWxlcy5cbiAqIEFTSURFUy4uLi4uLi4uLi4uLi4uLi4uLi4uIFNldCB0aGUgYXNpZGUgc3R5bGVzLlxuICogRk9PVEVSLi4uLi4uLi4uLi4uLi4uLi4uLi4gU2V0IHRoZSBmb290ZXIgc3R5bGVzLlxuICogQ09ERSBCTE9DS1MuLi4uLi4uLi4uLi4uLi4gU2V0IHRoZSBjb2RlIGJsb2NrIHN0eWxlcy5cbiAqIElDT05TLi4uLi4uLi4uLi4uLi4uLi4uLi4uIFNldCB0aGUgaWNvbiBzdHlsZXMuXG4gKiBQUklOVC4uLi4uLi4uLi4uLi4uLi4uLi4uLiBTZXQgdGhlIHByaW50IHN0eWxlcy5cbiAqIFNIQU1FLi4uLi4uLi4uLi4uLi4uLi4uLi4uIFNoYW1lZnVsIGhhY2tzLCBzaGltcywgYW5kIHRlbXBvcmFyeSBmaXhlcy5cbiAqL1xuLyohIG5vcm1hbGl6ZS5jc3MgdjMuMC4yIHwgTUlUIExpY2Vuc2UgfCBnaXQuaW8vbm9ybWFsaXplICovXG4vKipcbiAqIDEuIFNldCBkZWZhdWx0IGZvbnQgZmFtaWx5IHRvIHNhbnMtc2VyaWYuXG4gKiAyLiBQcmV2ZW50IGlPUyB0ZXh0IHNpemUgYWRqdXN0IGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZSwgd2l0aG91dCBkaXNhYmxpbmdcbiAqICAgIHVzZXIgem9vbS5cbiAqL1xuaHRtbCB7XG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xuICAvKiAxICovXG4gIC1tcy10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xuICAvKiAyICovXG4gIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICogUmVtb3ZlIGRlZmF1bHQgbWFyZ2luLlxuICovXG5ib2R5IHtcbiAgbWFyZ2luOiAwOyB9XG5cbi8qIEhUTUw1IGRpc3BsYXkgZGVmaW5pdGlvbnNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIENvcnJlY3QgYGJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGZvciBhbnkgSFRNTDUgZWxlbWVudCBpbiBJRSA4LzkuXG4gKiBDb3JyZWN0IGBibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBmb3IgYGRldGFpbHNgIG9yIGBzdW1tYXJ5YCBpbiBJRSAxMC8xMVxuICogYW5kIEZpcmVmb3guXG4gKiBDb3JyZWN0IGBibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBmb3IgYG1haW5gIGluIElFIDExLlxuICovXG5hcnRpY2xlLCBhc2lkZSwgZGV0YWlscywgZmlnY2FwdGlvbiwgZmlndXJlLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLCBtYWluLCBtZW51LCBuYXYsIHNlY3Rpb24sIHN1bW1hcnkge1xuICBkaXNwbGF5OiBibG9jazsgfVxuXG4vKipcbiAqIDEuIENvcnJlY3QgYGlubGluZS1ibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBpbiBJRSA4LzkuXG4gKiAyLiBOb3JtYWxpemUgdmVydGljYWwgYWxpZ25tZW50IG9mIGBwcm9ncmVzc2AgaW4gQ2hyb21lLCBGaXJlZm94LCBhbmQgT3BlcmEuXG4gKi9cbmF1ZGlvLCBjYW52YXMsIHByb2dyZXNzLCB2aWRlbyB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgLyogMSAqL1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAqIFByZXZlbnQgbW9kZXJuIGJyb3dzZXJzIGZyb20gZGlzcGxheWluZyBgYXVkaW9gIHdpdGhvdXQgY29udHJvbHMuXG4gKiBSZW1vdmUgZXhjZXNzIGhlaWdodCBpbiBpT1MgNSBkZXZpY2VzLlxuICovXG5hdWRpbzpub3QoW2NvbnRyb2xzXSkge1xuICBkaXNwbGF5OiBub25lO1xuICBoZWlnaHQ6IDA7IH1cblxuLyoqXG4gKiBBZGRyZXNzIGBbaGlkZGVuXWAgc3R5bGluZyBub3QgcHJlc2VudCBpbiBJRSA4LzkvMTAuXG4gKiBIaWRlIHRoZSBgdGVtcGxhdGVgIGVsZW1lbnQgaW4gSUUgOC85LzExLCBTYWZhcmksIGFuZCBGaXJlZm94IDwgMjIuXG4gKi9cbltoaWRkZW5dLCB0ZW1wbGF0ZSB7XG4gIGRpc3BsYXk6IG5vbmU7IH1cblxuLyogTGlua3NcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIFJlbW92ZSB0aGUgZ3JheSBiYWNrZ3JvdW5kIGNvbG9yIGZyb20gYWN0aXZlIGxpbmtzIGluIElFIDEwLlxuICovXG5hIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cblxuLyoqXG4gKiBJbXByb3ZlIHJlYWRhYmlsaXR5IHdoZW4gZm9jdXNlZCBhbmQgYWxzbyBtb3VzZSBob3ZlcmVkIGluIGFsbCBicm93c2Vycy5cbiAqL1xuYTphY3RpdmUsIGE6aG92ZXIge1xuICBvdXRsaW5lOiAwOyB9XG5cbi8qIFRleHQtbGV2ZWwgc2VtYW50aWNzXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBBZGRyZXNzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gSUUgOC85LzEwLzExLCBTYWZhcmksIGFuZCBDaHJvbWUuXG4gKi9cbmFiYnJbdGl0bGVdIHtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IGRvdHRlZDsgfVxuXG4vKipcbiAqIEFkZHJlc3Mgc3R5bGUgc2V0IHRvIGBib2xkZXJgIGluIEZpcmVmb3ggNCssIFNhZmFyaSwgYW5kIENocm9tZS5cbiAqL1xuYiwgc3Ryb25nIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7IH1cblxuLyoqXG4gKiBBZGRyZXNzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gU2FmYXJpIGFuZCBDaHJvbWUuXG4gKi9cbmRmbiB7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYzsgfVxuXG4vKipcbiAqIEFkZHJlc3MgdmFyaWFibGUgYGgxYCBmb250LXNpemUgYW5kIG1hcmdpbiB3aXRoaW4gYHNlY3Rpb25gIGFuZCBgYXJ0aWNsZWBcbiAqIGNvbnRleHRzIGluIEZpcmVmb3ggNCssIFNhZmFyaSwgYW5kIENocm9tZS5cbiAqL1xuaDEge1xuICBmb250LXNpemU6IDJlbTtcbiAgbWFyZ2luOiAwLjY3ZW0gMDsgfVxuXG4vKipcbiAqIEFkZHJlc3Mgc3R5bGluZyBub3QgcHJlc2VudCBpbiBJRSA4LzkuXG4gKi9cbm1hcmsge1xuICBiYWNrZ3JvdW5kOiAjZmYwO1xuICBjb2xvcjogIzAwMDsgfVxuXG4vKipcbiAqIEFkZHJlc3MgaW5jb25zaXN0ZW50IGFuZCB2YXJpYWJsZSBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5zbWFsbCB7XG4gIGZvbnQtc2l6ZTogODAlOyB9XG5cbi8qKlxuICogUHJldmVudCBgc3ViYCBhbmQgYHN1cGAgYWZmZWN0aW5nIGBsaW5lLWhlaWdodGAgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5zdWIsIHN1cCB7XG4gIGZvbnQtc2l6ZTogNzUlO1xuICBsaW5lLWhlaWdodDogMDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7IH1cblxuc3VwIHtcbiAgdG9wOiAtMC41ZW07IH1cblxuc3ViIHtcbiAgYm90dG9tOiAtMC4yNWVtOyB9XG5cbi8qIEVtYmVkZGVkIGNvbnRlbnRcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIFJlbW92ZSBib3JkZXIgd2hlbiBpbnNpZGUgYGFgIGVsZW1lbnQgaW4gSUUgOC85LzEwLlxuICovXG5pbWcge1xuICBib3JkZXI6IDA7IH1cblxuLyoqXG4gKiBDb3JyZWN0IG92ZXJmbG93IG5vdCBoaWRkZW4gaW4gSUUgOS8xMC8xMS5cbiAqL1xuc3ZnOm5vdCg6cm9vdCkge1xuICBvdmVyZmxvdzogaGlkZGVuOyB9XG5cbi8qIEdyb3VwaW5nIGNvbnRlbnRcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIEFkZHJlc3MgbWFyZ2luIG5vdCBwcmVzZW50IGluIElFIDgvOSBhbmQgU2FmYXJpLlxuICovXG5maWd1cmUge1xuICBtYXJnaW46IDFlbSA0MHB4OyB9XG5cbi8qKlxuICogQWRkcmVzcyBkaWZmZXJlbmNlcyBiZXR3ZWVuIEZpcmVmb3ggYW5kIG90aGVyIGJyb3dzZXJzLlxuICovXG5ociB7XG4gIC1tb3otYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICBoZWlnaHQ6IDA7IH1cblxuLyoqXG4gKiBDb250YWluIG92ZXJmbG93IGluIGFsbCBicm93c2Vycy5cbiAqL1xucHJlIHtcbiAgb3ZlcmZsb3c6IGF1dG87IH1cblxuLyoqXG4gKiBBZGRyZXNzIG9kZCBgZW1gLXVuaXQgZm9udCBzaXplIHJlbmRlcmluZyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cbmNvZGUsIGtiZCwgcHJlLCBzYW1wIHtcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlO1xuICBmb250LXNpemU6IDFlbTsgfVxuXG4vKiBGb3Jtc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogS25vd24gbGltaXRhdGlvbjogYnkgZGVmYXVsdCwgQ2hyb21lIGFuZCBTYWZhcmkgb24gT1MgWCBhbGxvdyB2ZXJ5IGxpbWl0ZWRcbiAqIHN0eWxpbmcgb2YgYHNlbGVjdGAsIHVubGVzcyBhIGBib3JkZXJgIHByb3BlcnR5IGlzIHNldC5cbiAqL1xuLyoqXG4gKiAxLiBDb3JyZWN0IGNvbG9yIG5vdCBiZWluZyBpbmhlcml0ZWQuXG4gKiAgICBLbm93biBpc3N1ZTogYWZmZWN0cyBjb2xvciBvZiBkaXNhYmxlZCBlbGVtZW50cy5cbiAqIDIuIENvcnJlY3QgZm9udCBwcm9wZXJ0aWVzIG5vdCBiZWluZyBpbmhlcml0ZWQuXG4gKiAzLiBBZGRyZXNzIG1hcmdpbnMgc2V0IGRpZmZlcmVudGx5IGluIEZpcmVmb3ggNCssIFNhZmFyaSwgYW5kIENocm9tZS5cbiAqL1xuYnV0dG9uLCBpbnB1dCwgb3B0Z3JvdXAsIHNlbGVjdCwgdGV4dGFyZWEge1xuICBjb2xvcjogaW5oZXJpdDtcbiAgLyogMSAqL1xuICBmb250OiBpbmhlcml0O1xuICAvKiAyICovXG4gIG1hcmdpbjogMDtcbiAgLyogMyAqLyB9XG5cbi8qKlxuICogQWRkcmVzcyBgb3ZlcmZsb3dgIHNldCB0byBgaGlkZGVuYCBpbiBJRSA4LzkvMTAvMTEuXG4gKi9cbmJ1dHRvbiB7XG4gIG92ZXJmbG93OiB2aXNpYmxlOyB9XG5cbi8qKlxuICogQWRkcmVzcyBpbmNvbnNpc3RlbnQgYHRleHQtdHJhbnNmb3JtYCBpbmhlcml0YW5jZSBmb3IgYGJ1dHRvbmAgYW5kIGBzZWxlY3RgLlxuICogQWxsIG90aGVyIGZvcm0gY29udHJvbCBlbGVtZW50cyBkbyBub3QgaW5oZXJpdCBgdGV4dC10cmFuc2Zvcm1gIHZhbHVlcy5cbiAqIENvcnJlY3QgYGJ1dHRvbmAgc3R5bGUgaW5oZXJpdGFuY2UgaW4gRmlyZWZveCwgSUUgOC85LzEwLzExLCBhbmQgT3BlcmEuXG4gKiBDb3JyZWN0IGBzZWxlY3RgIHN0eWxlIGluaGVyaXRhbmNlIGluIEZpcmVmb3guXG4gKi9cbmJ1dHRvbiwgc2VsZWN0IHtcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7IH1cblxuLyoqXG4gKiAxLiBBdm9pZCB0aGUgV2ViS2l0IGJ1ZyBpbiBBbmRyb2lkIDQuMC4qIHdoZXJlICgyKSBkZXN0cm95cyBuYXRpdmUgYGF1ZGlvYFxuICogICAgYW5kIGB2aWRlb2AgY29udHJvbHMuXG4gKiAyLiBDb3JyZWN0IGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgYGlucHV0YCB0eXBlcyBpbiBpT1MuXG4gKiAzLiBJbXByb3ZlIHVzYWJpbGl0eSBhbmQgY29uc2lzdGVuY3kgb2YgY3Vyc29yIHN0eWxlIGJldHdlZW4gaW1hZ2UtdHlwZVxuICogICAgYGlucHV0YCBhbmQgb3RoZXJzLlxuICovXG5idXR0b24sIGh0bWwgaW5wdXRbdHlwZT1cImJ1dHRvblwiXSwgaW5wdXRbdHlwZT1cInJlc2V0XCJdLCBpbnB1dFt0eXBlPVwic3VibWl0XCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247XG4gIC8qIDIgKi9cbiAgY3Vyc29yOiBwb2ludGVyO1xuICAvKiAzICovIH1cblxuLyoqXG4gKiBSZS1zZXQgZGVmYXVsdCBjdXJzb3IgZm9yIGRpc2FibGVkIGVsZW1lbnRzLlxuICovXG5idXR0b25bZGlzYWJsZWRdLCBodG1sIGlucHV0W2Rpc2FibGVkXSB7XG4gIGN1cnNvcjogZGVmYXVsdDsgfVxuXG4vKipcbiAqIFJlbW92ZSBpbm5lciBwYWRkaW5nIGFuZCBib3JkZXIgaW4gRmlyZWZveCA0Ky5cbiAqL1xuYnV0dG9uOjotbW96LWZvY3VzLWlubmVyLCBpbnB1dDo6LW1vei1mb2N1cy1pbm5lciB7XG4gIGJvcmRlcjogMDtcbiAgcGFkZGluZzogMDsgfVxuXG4vKipcbiAqIEFkZHJlc3MgRmlyZWZveCA0KyBzZXR0aW5nIGBsaW5lLWhlaWdodGAgb24gYGlucHV0YCB1c2luZyBgIWltcG9ydGFudGAgaW5cbiAqIHRoZSBVQSBzdHlsZXNoZWV0LlxuICovXG5pbnB1dCB7XG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7IH1cblxuLyoqXG4gKiBJdCdzIHJlY29tbWVuZGVkIHRoYXQgeW91IGRvbid0IGF0dGVtcHQgdG8gc3R5bGUgdGhlc2UgZWxlbWVudHMuXG4gKiBGaXJlZm94J3MgaW1wbGVtZW50YXRpb24gZG9lc24ndCByZXNwZWN0IGJveC1zaXppbmcsIHBhZGRpbmcsIG9yIHdpZHRoLlxuICpcbiAqIDEuIEFkZHJlc3MgYm94IHNpemluZyBzZXQgdG8gYGNvbnRlbnQtYm94YCBpbiBJRSA4LzkvMTAuXG4gKiAyLiBSZW1vdmUgZXhjZXNzIHBhZGRpbmcgaW4gSUUgOC85LzEwLlxuICovXG5pbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0sIGlucHV0W3R5cGU9XCJyYWRpb1wiXSB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIC8qIDEgKi9cbiAgcGFkZGluZzogMDtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICogRml4IHRoZSBjdXJzb3Igc3R5bGUgZm9yIENocm9tZSdzIGluY3JlbWVudC9kZWNyZW1lbnQgYnV0dG9ucy4gRm9yIGNlcnRhaW5cbiAqIGBmb250LXNpemVgIHZhbHVlcyBvZiB0aGUgYGlucHV0YCwgaXQgY2F1c2VzIHRoZSBjdXJzb3Igc3R5bGUgb2YgdGhlXG4gKiBkZWNyZW1lbnQgYnV0dG9uIHRvIGNoYW5nZSBmcm9tIGBkZWZhdWx0YCB0byBgdGV4dGAuXG4gKi9cbmlucHV0W3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sIGlucHV0W3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xuICBoZWlnaHQ6IGF1dG87IH1cblxuLyoqXG4gKiAxLiBBZGRyZXNzIGBhcHBlYXJhbmNlYCBzZXQgdG8gYHNlYXJjaGZpZWxkYCBpbiBTYWZhcmkgYW5kIENocm9tZS5cbiAqIDIuIEFkZHJlc3MgYGJveC1zaXppbmdgIHNldCB0byBgYm9yZGVyLWJveGAgaW4gU2FmYXJpIGFuZCBDaHJvbWVcbiAqICAgIChpbmNsdWRlIGAtbW96YCB0byBmdXR1cmUtcHJvb2YpLlxuICovXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7XG4gIC8qIDEgKi9cbiAgLW1vei1ib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgLyogMiAqL1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDsgfVxuXG4vKipcbiAqIFJlbW92ZSBpbm5lciBwYWRkaW5nIGFuZCBzZWFyY2ggY2FuY2VsIGJ1dHRvbiBpbiBTYWZhcmkgYW5kIENocm9tZSBvbiBPUyBYLlxuICogU2FmYXJpIChidXQgbm90IENocm9tZSkgY2xpcHMgdGhlIGNhbmNlbCBidXR0b24gd2hlbiB0aGUgc2VhcmNoIGlucHV0IGhhc1xuICogcGFkZGluZyAoYW5kIGB0ZXh0ZmllbGRgIGFwcGVhcmFuY2UpLlxuICovXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLCBpbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOyB9XG5cbi8qKlxuICogRGVmaW5lIGNvbnNpc3RlbnQgYm9yZGVyLCBtYXJnaW4sIGFuZCBwYWRkaW5nLlxuICovXG5maWVsZHNldCB7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNjMGMwYzA7XG4gIG1hcmdpbjogMCAycHg7XG4gIHBhZGRpbmc6IDAuMzVlbSAwLjYyNWVtIDAuNzVlbTsgfVxuXG4vKipcbiAqIDEuIENvcnJlY3QgYGNvbG9yYCBub3QgYmVpbmcgaW5oZXJpdGVkIGluIElFIDgvOS8xMC8xMS5cbiAqIDIuIFJlbW92ZSBwYWRkaW5nIHNvIHBlb3BsZSBhcmVuJ3QgY2F1Z2h0IG91dCBpZiB0aGV5IHplcm8gb3V0IGZpZWxkc2V0cy5cbiAqL1xubGVnZW5kIHtcbiAgYm9yZGVyOiAwO1xuICAvKiAxICovXG4gIHBhZGRpbmc6IDA7XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAqIFJlbW92ZSBkZWZhdWx0IHZlcnRpY2FsIHNjcm9sbGJhciBpbiBJRSA4LzkvMTAvMTEuXG4gKi9cbnRleHRhcmVhIHtcbiAgb3ZlcmZsb3c6IGF1dG87IH1cblxuLyoqXG4gKiBEb24ndCBpbmhlcml0IHRoZSBgZm9udC13ZWlnaHRgIChhcHBsaWVkIGJ5IGEgcnVsZSBhYm92ZSkuXG4gKiBOT1RFOiB0aGUgZGVmYXVsdCBjYW5ub3Qgc2FmZWx5IGJlIGNoYW5nZWQgaW4gQ2hyb21lIGFuZCBTYWZhcmkgb24gT1MgWC5cbiAqL1xub3B0Z3JvdXAge1xuICBmb250LXdlaWdodDogYm9sZDsgfVxuXG4vKiBUYWJsZXNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIFJlbW92ZSBtb3N0IHNwYWNpbmcgYmV0d2VlbiB0YWJsZSBjZWxscy5cbiAqL1xudGFibGUge1xuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICBib3JkZXItc3BhY2luZzogMDsgfVxuXG50ZCwgdGgge1xuICBwYWRkaW5nOiAwOyB9XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXHJcbiAgICAkTEFZT1VUXHJcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5odG1sIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgfVxuXG4qLCAqOmJlZm9yZSwgKjphZnRlciB7XG4gIGJveC1zaXppbmc6IGluaGVyaXQ7IH1cblxuYm9keSB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNGOUY5Rjk7XG4gIGNvbG9yOiAjNEY0RjRGO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGZvbnQ6IDQwMCBub3JtYWwgMTZweC8xLjg3NWVtIFwiZmYtbWV0YS1zZXJpZi13ZWItcHJvXCIsIEdlb3JnaWEsIHNlcmlmO1xuICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5O1xuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsgfVxuXG4ud3JhcCB7XG4gIHdpZHRoOiBhdXRvO1xuICBtYXgtd2lkdGg6IDExNDBweDtcbiAgcGFkZGluZy1yaWdodDogMS4yNXJlbTtcbiAgcGFkZGluZy1sZWZ0OiAxLjI1cmVtO1xuICBtYXJnaW4tcmlnaHQ6IGF1dG87XG4gIG1hcmdpbi1sZWZ0OiBhdXRvOyB9XG5cbi5jbGVhciB7XG4gIGNsZWFyOiBib3RoO1xuICB6b29tOiAxOyB9XG4gIC5jbGVhcjpiZWZvcmUsIC5jbGVhcjphZnRlciB7XG4gICAgY29udGVudDogXCJcIjtcbiAgICBkaXNwbGF5OiB0YWJsZTsgfVxuICAuY2xlYXI6YWZ0ZXIge1xuICAgIGNsZWFyOiBib3RoOyB9XG5cbi8qKlxyXG4gKiBBbGxvdyBmb3IgZml4ZWQtd2lkdGggY29udGVudFxyXG4gKi9cbi5maXhlZC13aWR0aCB7XG4gIHdpZHRoOiAxMTQwcHg7IH1cblxuLyoqXHJcbiAqIEhpZGUgdGhpbmdzLi4uIOKAmW51ZmYgc2FpZFxyXG4gKi9cbi5oaWRkZW4sIHA6ZW1wdHkge1xuICBkaXNwbGF5OiBub25lOyB9XG5cbmZpZ3VyZSBpbWcsIGZpZ3VyZSBzdmcsIGJsb2NrcXVvdGUsIC5hcnRpY2xlLWJhbm5lciwgLnNtYWxsLWFydGljbGVzLWxpc3QgYSwgLmNvbG9yLWJsb2NrLWxpc3QgbGksIGFzaWRlOm5vdCguYXV0aG9yKSwgLmF1dGhvci1pbWFnZSwgcHJlOm5vdCguY29kZXBlbiksIFtkYXRhLWxhbmddOmJlZm9yZSB7XG4gIGJhY2tncm91bmQtY2xpcDogcGFkZGluZy1ib3g7XG4gIGJvcmRlci1yYWRpdXM6IC4zNzVlbTsgfVxuXG5idXR0b24sIC5idXR0b24sIC5sb2dvIHtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIC13ZWJraXQtdG91Y2gtY2FsbG91dDogbm9uZTsgfVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRUWVBPR1JBUEhZXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiB7XG4gIG1pbi1oZWlnaHQ6IDEuMmVtO1xuICBwYWRkaW5nOiAwO1xuICBtYXJnaW46IDA7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIGxpbmUtaGVpZ2h0OiAxLjJlbTsgfVxuXG5oMSB7XG4gIGZvbnQtZmFtaWx5OiBcImxlYWd1ZS1nb3RoaWNcIiwgSW1wYWN0LCBzYW5zLXNlcmlmO1xuICBmb250LXNpemU6IDIuNjI1ZW07XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIHRleHQtc2hhZG93OiAuMDcxNGVtIC4wNzE0ZW0gMCByZ2JhKDYsIDYsIDYsIDAuMDUpOyB9XG5cbmgyIHtcbiAgZm9udC1mYW1pbHk6IFwiZmYtbWV0YS1zZXJpZi13ZWItcHJvXCIsIEdlb3JnaWEsIHNlcmlmO1xuICBmb250LXNpemU6IDEuNjI1ZW07IH1cblxuaDMsIGg0LCAuYXJ0aWNsZXMtbGlzdCAuYXJ0aWNsZS1kYXRlIHtcbiAgZm9udC1mYW1pbHk6IFwicHJveGltYS1ub3ZhXCIsIHNhbnMtc2VyaWY7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7IH1cblxuaDMsIC5hcnRpY2xlcy1saXN0IC5hcnRpY2xlLWRhdGUge1xuICBmb250LXNpemU6IDEuMTI1ZW07XG4gIGxpbmUtaGVpZ2h0OiAxLjg3NWVtO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlOyB9XG5cbmgzIHtcbiAgbWFyZ2luLXRvcDogLjVlbTtcbiAgYm9yZGVyLWJvdHRvbTogLjEyNWVtIHNvbGlkICNEREREREQ7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTsgfVxuICBoMzpub3QoOmxhc3QtY2hpbGQpIHtcbiAgICBtYXJnaW4tYm90dG9tOiAxLjI1cmVtOyB9XG5cbmg0IHtcbiAgbWFyZ2luLWJvdHRvbTogLjVlbTsgfVxuXG5hIHtcbiAgY29sb3I6ICM1RjhBQTY7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAwLjJzIGVhc2UsIGNvbG9yIDAuMnMgZWFzZTsgfVxuICBhOmhvdmVyLCBhOmZvY3VzLCBhOmFjdGl2ZSB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IH1cbiAgaDIgYSwgaDMgYSB7XG4gICAgY29sb3I6ICM0RjRGNEY7IH1cbiAgICBoMiBhOmhvdmVyLCBoMiBhOmZvY3VzLCBoMiBhOmFjdGl2ZSwgaDMgYTpob3ZlciwgaDMgYTpmb2N1cywgaDMgYTphY3RpdmUge1xuICAgICAgY29sb3I6ICM1RjhBQTY7IH1cbiAgYSBzcGFuOm5vdChbY2xhc3NdKSB7XG4gICAgd2lkdGg6IDFweDtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjsgfVxuXG4uaGVhZGluZy1hbmNob3Ige1xuICBjb2xvcjogIzczNzM3MztcbiAgZGlzcGxheTogbm9uZTtcbiAgcGFkZGluZy1sZWZ0OiAxZW07XG4gIGZvbnQtZmFtaWx5OiBDb25zb2xhcywgTW9uYWNvLCBcIkNvdXJpZXIgTmV3XCIsIG1vbm9zcGFjZTtcbiAgZm9udC1zaXplOiAuODEyNXJlbTtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgbGluZS1oZWlnaHQ6IDEuODc1ZW07XG4gIHRleHQtdHJhbnNmb3JtOiBsb3dlcmNhc2U7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7IH1cbiAgOmhvdmVyID4gLmhlYWRpbmctYW5jaG9yLCA6Zm9jdXMgPiAuaGVhZGluZy1hbmNob3IsIDphY3RpdmUgPiAuaGVhZGluZy1hbmNob3Ige1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgfVxuICBoMSAuaGVhZGluZy1hbmNob3Ige1xuICAgIHRleHQtc2hhZG93OiBub25lOyB9XG5cbi8qKlxuICAgICAqIEJyYW5kIExpbmsgQ29sb3Vyc1xuICAgICAqL1xuLmNvZGVwZW4tbGluayB7XG4gIGNvbG9yOiAjMjEyMTIxICFpbXBvcnRhbnQ7IH1cblxuLmdpdGh1Yi1saW5rIHtcbiAgY29sb3I6ICMzMzMzMzMgIWltcG9ydGFudDsgfVxuXG4ubGFzdGZtLWxpbmsge1xuICBjb2xvcjogI0UzMUIyMyAhaW1wb3J0YW50OyB9XG5cbi5yc3MtbGluayB7XG4gIGNvbG9yOiAjNUY4QUE2ICFpbXBvcnRhbnQ7IH1cblxuLnR3aXR0ZXItbGluayB7XG4gIGNvbG9yOiAjMjc5NWU5ICFpbXBvcnRhbnQ7IH1cblxuLmFydGljbGUtbGluayB7XG4gIGNvbG9yOiAjNUY4QUE2ICFpbXBvcnRhbnQ7IH1cblxuLmZlYXRoZXItbGluayB7XG4gIGNvbG9yOiAjNUY4QUE2ICFpbXBvcnRhbnQ7IH1cblxuLmhlYXJ0LWxpbmsge1xuICBjb2xvcjogIzVGOEFBNiAhaW1wb3J0YW50OyB9XG5cbi50YWctbGluayB7XG4gIGNvbG9yOiAjNUY4QUE2ICFpbXBvcnRhbnQ7IH1cblxucCB7XG4gIG1hcmdpbjogMDsgfVxuICBwOm5vdCg6bGFzdC1jaGlsZCkge1xuICAgIG1hcmdpbi1ib3R0b206IDEuMjVyZW07IH1cblxub2wsIHVsIHtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAwO1xuICBsaXN0LXN0eWxlOiBub25lOyB9XG5cbm9sOm5vdChbY2xhc3NdKSBsaSwgdWw6bm90KFtjbGFzc10pIGxpLCAuZGVmYXVsdC1saXN0IGxpIHtcbiAgcGFkZGluZy1sZWZ0OiAyZW07XG4gIG1hcmdpbi1ib3R0b206IDFlbTtcbiAgcG9zaXRpb246IHJlbGF0aXZlOyB9XG4gIG9sOm5vdChbY2xhc3NdKSBsaTpiZWZvcmUsIHVsOm5vdChbY2xhc3NdKSBsaTpiZWZvcmUsIC5kZWZhdWx0LWxpc3QgbGk6YmVmb3JlIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgZm9udC1mYW1pbHk6IFwicHJveGltYS1ub3ZhXCIsIHNhbnMtc2VyaWY7XG4gICAgZm9udC13ZWlnaHQ6IDYwMDsgfVxub2w6bm90KFtjbGFzc10pIG9sOm5vdChbY2xhc3NdKSwgb2w6bm90KFtjbGFzc10pIHVsOm5vdChbY2xhc3NdKSwgb2w6bm90KFtjbGFzc10pIC5kZWZhdWx0LWxpc3QsIHVsOm5vdChbY2xhc3NdKSBvbDpub3QoW2NsYXNzXSksIHVsOm5vdChbY2xhc3NdKSB1bDpub3QoW2NsYXNzXSksIHVsOm5vdChbY2xhc3NdKSAuZGVmYXVsdC1saXN0LCAuZGVmYXVsdC1saXN0IG9sOm5vdChbY2xhc3NdKSwgLmRlZmF1bHQtbGlzdCB1bDpub3QoW2NsYXNzXSksIC5kZWZhdWx0LWxpc3QgLmRlZmF1bHQtbGlzdCB7XG4gIG1hcmdpbi10b3A6IDFlbTsgfVxuXG5vbDpub3QoW2NsYXNzXSksIG9sLmRlZmF1bHQtbGlzdCB7XG4gIGNvdW50ZXItcmVzZXQ6IG9yZGVyZWQtbGlzdDsgfVxuICBvbDpub3QoW2NsYXNzXSkgbGksIG9sLmRlZmF1bHQtbGlzdCBsaSB7XG4gICAgY291bnRlci1pbmNyZW1lbnQ6IG9yZGVyZWQtbGlzdDsgfVxuICAgIG9sOm5vdChbY2xhc3NdKSBsaTpiZWZvcmUsIG9sLmRlZmF1bHQtbGlzdCBsaTpiZWZvcmUge1xuICAgICAgY29udGVudDogY291bnRlcihvcmRlcmVkLWxpc3QpIFwiLlwiOyB9XG5cbnVsOm5vdChbY2xhc3NdKSBsaTpiZWZvcmUsIHVsLmRlZmF1bHQtbGlzdCBsaTpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcMjAyMlwiO1xuICBmb250LXNpemU6IDEuNWVtO1xuICBsaW5lLWhlaWdodDogMWVtOyB9XG5cbmRsIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGRpc3BsYXk6IHRhYmxlOyB9XG4gIGRsOm5vdCg6bGFzdC1jaGlsZCkge1xuICAgIG1hcmdpbi1ib3R0b206IDEuMjVyZW07IH1cbiAgZGwgZHQge1xuICAgIHdpZHRoOiBhdXRvO1xuICAgIG1pbi13aWR0aDogMTBlbTtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgcGFkZGluZy1yaWdodDogMS4yNXJlbTtcbiAgICBmb250LWZhbWlseTogXCJwcm94aW1hLW5vdmFcIiwgc2Fucy1zZXJpZjtcbiAgICBmb250LXdlaWdodDogNjAwOyB9XG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDUwMXB4KSB7XG4gICAgICBkbCBkdCB7XG4gICAgICAgIG1pbi13aWR0aDogMTBlbTtcbiAgICAgICAgcGFkZGluZy1yaWdodDogMS4yNXJlbTsgfSB9XG4gIGRsIGRkIHtcbiAgICB3aWR0aDogMTE0MHB4O1xuICAgIGRpc3BsYXk6IHRhYmxlLWNlbGw7XG4gICAgbWFyZ2luOiAwO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgdmVydGljYWwtYWxpZ246IHRvcDsgfVxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA1MDBweCkge1xuICAgICAgZGwgZGQge1xuICAgICAgICB3aWR0aDogYXV0bztcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiAxLjI1cmVtOyB9IH1cblxuaW1nLCBhIGltZyB7XG4gIHdpZHRoOiBhdXRvO1xuICBtYXgtd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogYXV0bzsgfVxuXG5maWd1cmUge1xuICBtYXJnaW46IDAgMCAuNWVtO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cbiAgZmlndXJlOm5vdCg6bGFzdC1jaGlsZCkge1xuICAgIG1hcmdpbi1ib3R0b206IDEuMjVyZW07IH1cblxuZmlnY2FwdGlvbiB7XG4gIGNvbG9yOiAjNzM3MzczO1xuICBmb250LXN0eWxlOiBpdGFsaWM7IH1cblxuYWJiclt0aXRsZV0sIGJsb2NrcXVvdGUsIGNpdGUsIGRmblt0aXRsZV0ge1xuICBjb2xvcjogIzczNzM3MztcbiAgZm9udC1zdHlsZTogaXRhbGljOyB9XG5cbmFiYnJbdGl0bGVdLCBkZm5bdGl0bGVdIHtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IGRvdHRlZCAjNzM3MzczO1xuICBjdXJzb3I6IGhlbHA7IH1cblxuaW5zIHtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lOyB9XG5cbnEge1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG4gIHF1b3RlczogXCJcXDIwMUNcIiBcIlxcMjAxRFwiIFwiXFwyMDE4XCIgXCJcXDIwMTlcIjsgfVxuXG5ibG9ja3F1b3RlIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg5NSwgMTM4LCAxNjYsIDAuMSk7XG4gIHBhZGRpbmc6IDFlbTtcbiAgbWFyZ2luOiAwIDIuMjVyZW0gMWVtO1xuICBxdW90ZXM6IFwiXFwyMDFDXCIgXCJcXDIwMURcIiBcIlxcMjAxOFwiIFwiXFwyMDE5XCI7IH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDUwMHB4KSB7XG4gICAgYmxvY2txdW90ZSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDFlbTtcbiAgICAgIG1hcmdpbi1sZWZ0OiAxZW07IH0gfVxuICBibG9ja3F1b3RlIHAge1xuICAgIG1hcmdpbi1ib3R0b206IDAgIWltcG9ydGFudDsgfVxuICAgIGJsb2NrcXVvdGUgcDpiZWZvcmUge1xuICAgICAgY29udGVudDogb3Blbi1xdW90ZTtcbiAgICAgIHBhZGRpbmctcmlnaHQ6IC4xODc1ZW07IH1cbiAgICBibG9ja3F1b3RlIHA6YWZ0ZXIge1xuICAgICAgY29udGVudDogY2xvc2UtcXVvdGU7XG4gICAgICBwYWRkaW5nLWxlZnQ6IC4xODc1ZW07IH1cbiAgYmxvY2txdW90ZSBjaXRlIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBtYXJnaW4tbGVmdDogMmVtO1xuICAgIG1hcmdpbi10b3A6IDFlbTsgfVxuICAgIGJsb2NrcXVvdGUgY2l0ZTpiZWZvcmUge1xuICAgICAgY29udGVudDogXCJcXDIwMTNcXDAwYTBcIjsgfVxuXG5ociB7XG4gIGJhY2tncm91bmQ6IHJnYmEoNiwgNiwgNiwgMC4xKTtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogLjEyNWVtO1xuICBkaXNwbGF5OiBibG9jaztcbiAgYm9yZGVyOiAwO1xuICBtYXJnaW46IC41ZW0gMCAxLjI1cmVtOyB9XG5cbjo6c2VsZWN0aW9uIHtcbiAgYmFja2dyb3VuZDogIzVGOEFBNjtcbiAgY29sb3I6ICNGOUY5Rjk7IH1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcclxuICAgICRCVVRUT05TXHJcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5idXR0b24sIC5idXR0b24ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNUY4QUE2O1xuICBjb2xvcjogI0Y5RjlGOTtcbiAgbWluLXdpZHRoOiA4ZW07XG4gIGhlaWdodDogMi4xODJlbTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBwYWRkaW5nOiAwIC43MjdlbSAuMTgyZW07XG4gIGJvcmRlcjogMDtcbiAgbWFyZ2luLXRvcDogLjE4MmVtO1xuICBvdXRsaW5lLXN0eWxlOiBub25lO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGZvbnQtZmFtaWx5OiBcImxlYWd1ZS1nb3RoaWNcIiwgSW1wYWN0LCBzYW5zLXNlcmlmO1xuICBmb250LXNpemU6IDEuMzc1ZW07XG4gIGxpbmUtaGVpZ2h0OiAyZW07XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBib3JkZXItcmFkaXVzOiAuMTgyZW07XG4gIGJveC1zaGFkb3c6IGluc2V0IDAgLTAuMTgyZW0gMCAwICM0YjZmODc7XG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4ycyBlYXNlOyB9XG4gIGJ1dHRvbjpob3ZlciwgYnV0dG9uOmZvY3VzLCBidXR0b246YWN0aXZlLCAuYnV0dG9uOmhvdmVyLCAuYnV0dG9uOmZvY3VzLCAuYnV0dG9uOmFjdGl2ZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzZmOTZhZjtcbiAgICBvdXRsaW5lLXN0eWxlOiBhdXRvO1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxuICBidXR0b246YWN0aXZlLCAuYnV0dG9uOmFjdGl2ZSB7XG4gICAgaGVpZ2h0OiAyZW07XG4gICAgcGFkZGluZy1ib3R0b206IDA7XG4gICAgbWFyZ2luLWJvdHRvbTogLjE4MmVtO1xuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgLTAuMDQ2ZW0gMCAwICM0YjZmODc7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAuMTgyZW0sIDApOyB9XG4gIGJ1dHRvbjpiZWZvcmUsIGJ1dHRvbjphZnRlciwgLmJ1dHRvbjpiZWZvcmUsIC5idXR0b246YWZ0ZXIge1xuICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAuMTgyZW07XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwOyB9XG4gIGJ1dHRvbjphY3RpdmU6YmVmb3JlLCBidXR0b246YWN0aXZlOmFmdGVyLCAuYnV0dG9uOmFjdGl2ZTpiZWZvcmUsIC5idXR0b246YWN0aXZlOmFmdGVyIHtcbiAgICB0b3A6IC0wLjE4MmVtOyB9XG4gIGJ1dHRvbltkaXNhYmxlZF0sIC5idXR0b25bZGlzYWJsZWRdIHtcbiAgICBvcGFjaXR5OiAuNDsgfVxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAubm90LWZvdW5kLXBhZ2UgYnV0dG9uLCAubm90LWZvdW5kLXBhZ2UgLmJ1dHRvbiB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIG1hcmdpbjogMCBhdXRvIDEuMjVyZW07IH0gfVxuICBidXR0b24gc3ZnLCAuYnV0dG9uIHN2ZyB7XG4gICAgd2lkdGg6IC44ZW07XG4gICAgaGVpZ2h0OiAuOGVtO1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBtYXJnaW4tcmlnaHQ6IC4yNWVtOyB9XG4gIGJ1dHRvbiAuYXJ0aWNsZS1pY29uLCAuYnV0dG9uIC5hcnRpY2xlLWljb24ge1xuICAgIHdpZHRoOiAuNzJlbTsgfVxuICBidXR0b24gLmZlYXRoZXItaWNvbiwgLmJ1dHRvbiAuZmVhdGhlci1pY29uIHtcbiAgICB3aWR0aDogLjU4ZW07IH1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkSEVBREVSXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gIGhlYWRlciB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyOyB9IH1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkTE9HT1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi5sb2dvIHtcbiAgY29sb3I6ICM0RjRGNEY7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgcGFkZGluZy10b3A6IC41ZW07XG4gIHBhZGRpbmctbGVmdDogMS45MjNlbTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBmb250LWZhbWlseTogXCJsZWFndWUtZ290aGljXCIsIEltcGFjdCwgc2Fucy1zZXJpZjtcbiAgZm9udC1zaXplOiAzLjI1ZW07XG4gIGxpbmUtaGVpZ2h0OiAxZW07XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIHRleHQtc2hhZG93OiAuMDU4ZW0gLjA1OGVtIDAgcmdiYSg2LCA2LCA2LCAwLjA1KTtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgei1pbmRleDogMTtcbiAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZTsgfVxuICAubG9nbzpob3ZlciwgLmxvZ286Zm9jdXMsIC5sb2dvOmFjdGl2ZSB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOyB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiA3NjlweCkge1xuICAgIC5sb2dvIHtcbiAgICAgIGZsb2F0OiBsZWZ0OyB9IH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDUwMHB4KSB7XG4gICAgLmxvZ28ge1xuICAgICAgZm9udC1zaXplOiAyLjc1ZW07IH0gfVxuICAubG9nbzphY3RpdmUge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLjAzOWVtLCAwKTsgfVxuICAgIC5sb2dvOmFjdGl2ZSBzdmcge1xuICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJbiBvcmRlciB0byBnZXQgYC5sb2dvIHN2Z2AgdG8gdHJhdmVsIHVwIDJ4IHRoZSBkaXN0YW5jZSB0aGVcbiAgICAgICAgICAgICAqIGAubG9nb2AgdGV4dCBkb2VzLCBmaXJzdCB0aGUgYHRyYW5zbGF0ZWAgYXBwbGllZCBvbiB0aGUgcGFyZW50XG4gICAgICAgICAgICAgKiAob2YgdGhlIGBhc2lkZWApIGhhcyB0byBiZSBjb3VudGVyYWN0ZWQsIHRoZW4gKDIgKiAwLjAzOWVtKVxuICAgICAgICAgICAgICogaXMgYWRkZWQsIHRvdGFsbGluZyAwLjExN2VtLCBtYWRlIG5lZ2F0aXZlIG9uIHRoZSB5LWF4aXMgdG9cbiAgICAgICAgICAgICAqIGdvIHVwLiBXZSBjYW5ub3QgdXNlIGB0cmFuc2xhdGVgIGFzIGl0IGlzIHVzZWQgYmVsb3cgZm9yXG4gICAgICAgICAgICAgKiBmdXJ0aGVyIGFuaW1hdGluZy5cbiAgICAgICAgICAgICAqL1xuICAgICAgdG9wOiAtMC4xMTdlbTsgfVxuICAubG9nbyBzdmcge1xuICAgIHdpZHRoOiAyLjMwN2VtO1xuICAgIGhlaWdodDogMi4zMDdlbTtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgei1pbmRleDogLTE7XG4gICAgYW5pbWF0aW9uOiBzb2FyaW5nIDMwcyBsaW5lYXIgYWx0ZXJuYXRlIGluZmluaXRlO1xuICAgIGFuaW1hdGlvbi1wbGF5LXN0YXRlOiBwYXVzZWQ7XG4gICAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0wLjgxMjVlbSwgMCk7IH1cbiAgLmxvZ286aG92ZXIgc3ZnLCAubG9nbzpmb2N1cyBzdmcsIC5sb2dvOmFjdGl2ZSBzdmcge1xuICAgIC8qKlxuICAgICAgICAgKiBPbmx5IGFuaW1hdGUgdGhlIGltYWdlIHdoZW4gdGhlIHVzZXIgaG92ZXJzIGAubG9nb2AuXG4gICAgICAgICAqL1xuICAgIGFuaW1hdGlvbi1wbGF5LXN0YXRlOiBydW5uaW5nOyB9XG5cbkBrZXlmcmFtZXMgc29hcmluZyB7XG4gIDAlLCAxMDAlIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0wLjgxMjVlbSwgMCk7IH1cblxuICAxMi41JSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMC4wNjI1ZW0sIC0wLjY4NzVlbSwgMCk7IH1cblxuICAyNSUge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLjEyNWVtLCAtMC4zMTI1ZW0sIDApOyB9XG5cbiAgMzcuNSUge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLjMxMjVlbSwgLTAuMzc1ZW0sIDApOyB9XG5cbiAgNTAlIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC4xMjVlbSwgLTAuNDM3NWVtLCAwKTsgfVxuXG4gIDYyLjUlIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC4wNjI1ZW0sIC0wLjI1ZW0sIDApOyB9XG5cbiAgNzUlIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC4xODc1ZW0sIC0wLjQzNzVlbSwgMCk7IH1cblxuICA4Ny41JSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMC4wNjI1ZW0sIC0wLjU2MjVlbSwgMCk7IH0gfVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxyXG4gICAgJE5BVklHQVRJT05cclxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi5wcmltYXJ5LW5hdmlnYXRpb24ge1xuICBwYWRkaW5nLWJvdHRvbTogMS4yNWVtO1xuICB3aGl0ZS1zcGFjZTogbm93cmFwOyB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiA3NjlweCkge1xuICAgIC5wcmltYXJ5LW5hdmlnYXRpb24ge1xuICAgICAgZmxvYXQ6IHJpZ2h0O1xuICAgICAgcGFkZGluZy10b3A6IDEuNWVtOyB9IH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgLnByaW1hcnktbmF2aWdhdGlvbiB7XG4gICAgICB3aWR0aDogMTAwJTsgfSB9XG5cbi5wcmltYXJ5LW5hdmlnYXRpb24tbGlzdCB7XG4gIGhlaWdodDogMy43NWVtOyB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiA3NjlweCkge1xuICAgIC5wcmltYXJ5LW5hdmlnYXRpb24tbGlzdCB7XG4gICAgICBmbG9hdDogcmlnaHQ7IH0gfVxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAucHJpbWFyeS1uYXZpZ2F0aW9uLWxpc3Qge1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyOyB9IH1cbiAgLnByaW1hcnktbmF2aWdhdGlvbi1saXN0IGxpIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH1cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogNzY5cHgpIHtcbiAgICAgIC5wcmltYXJ5LW5hdmlnYXRpb24tbGlzdCBsaSB7XG4gICAgICAgIGZsb2F0OiBsZWZ0OyB9IH1cbiAgICAucHJpbWFyeS1uYXZpZ2F0aW9uLWxpc3QgbGkgKyBsaSB7XG4gICAgICBtYXJnaW4tbGVmdDogMWVtOyB9XG4gICAgICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAgICAgLnByaW1hcnktbmF2aWdhdGlvbi1saXN0IGxpICsgbGkge1xuICAgICAgICAgIG1hcmdpbi1sZWZ0OiAuNWVtOyB9IH1cbiAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiA1MDBweCkge1xuICAgICAgICAucHJpbWFyeS1uYXZpZ2F0aW9uLWxpc3QgbGkgKyBsaSB7XG4gICAgICAgICAgbWFyZ2luLWxlZnQ6IC4yNWVtOyB9IH1cbiAgLnByaW1hcnktbmF2aWdhdGlvbi1saXN0IGEge1xuICAgIGNvbG9yOiAjNzM3MzczO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHBhZGRpbmc6IC43NWVtO1xuICAgIGJvcmRlci1ib3R0b206IDAgc29saWQgIzVGOEFBNjtcbiAgICBtYXJnaW4tYm90dG9tOiAuM2VtO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBmb250LWZhbWlseTogXCJsZWFndWUtZ290aGljXCIsIEltcGFjdCwgc2Fucy1zZXJpZjtcbiAgICBmb250LXNpemU6IDEuMjVlbTtcbiAgICBsaW5lLWhlaWdodDogMS4yNWVtO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgdHJhbnNpdGlvbjogY29sb3IgMC4ycyBlYXNlLCBwYWRkaW5nLWJvdHRvbSAwLjJzIGVhc2UsIGJvcmRlci1ib3R0b20td2lkdGggMC4ycyBlYXNlLCB0cmFuc2Zvcm0gMC4ycyBlYXNlOyB9XG4gICAgLnByaW1hcnktbmF2aWdhdGlvbi1saXN0IGE6aG92ZXIsIC5wcmltYXJ5LW5hdmlnYXRpb24tbGlzdCBhOmZvY3VzLCAucHJpbWFyeS1uYXZpZ2F0aW9uLWxpc3QgYTphY3RpdmUge1xuICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOyB9XG4gICAgLnByaW1hcnktbmF2aWdhdGlvbi1saXN0IGE6YWN0aXZlIHtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLjJlbSwgMCk7IH1cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNTAwcHgpIHtcbiAgICAgIC5wcmltYXJ5LW5hdmlnYXRpb24tbGlzdCBhIHtcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAuNWVtO1xuICAgICAgICBwYWRkaW5nLXJpZ2h0OiAuNWVtOyB9IH1cblxuLnByaW1hcnktbmF2aWdhdGlvbi1saXN0IGE6aG92ZXIsIC5wcmltYXJ5LW5hdmlnYXRpb24tbGlzdCBhOmZvY3VzLCAucHJpbWFyeS1uYXZpZ2F0aW9uLWxpc3QgYTphY3RpdmUsIC5ob21lLXBhZ2UgLnByaW1hcnktbmF2aWdhdGlvbi1ob21lIGEsIC5hYm91dC1wYWdlIC5wcmltYXJ5LW5hdmlnYXRpb24tYWJvdXQgYSwgLmFyY2hpdmUtcGFnZSAucHJpbWFyeS1uYXZpZ2F0aW9uLWFyY2hpdmUgYSwgLnBlbnMtcGFnZSAucHJpbWFyeS1uYXZpZ2F0aW9uLXBlbnMgYSB7XG4gIGNvbG9yOiAjNEY0RjRGO1xuICBwYWRkaW5nLWJvdHRvbTogLjU1ZW07XG4gIGJvcmRlci1ib3R0b20td2lkdGg6IC4yZW07IH1cblxuLmhvbWUtcGFnZSAucHJpbWFyeS1uYXZpZ2F0aW9uLWhvbWUgYTphZnRlciwgLmFib3V0LXBhZ2UgLnByaW1hcnktbmF2aWdhdGlvbi1hYm91dCBhOmFmdGVyLCAuYXJjaGl2ZS1wYWdlIC5wcmltYXJ5LW5hdmlnYXRpb24tYXJjaGl2ZSBhOmFmdGVyLCAucGVucy1wYWdlIC5wcmltYXJ5LW5hdmlnYXRpb24tcGVucyBhOmFmdGVyIHtcbiAgY29udGVudDogXCJcIjtcbiAgYm9yZGVyLXRvcDogLjVlbSBzb2xpZCAjNUY4QUE2O1xuICBib3JkZXItcmlnaHQ6IC41ZW0gc29saWQgdHJhbnNwYXJlbnQ7XG4gIGJvcmRlci1sZWZ0OiAuNWVtIHNvbGlkIHRyYW5zcGFyZW50O1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMTAwJTtcbiAgbGVmdDogNTAlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC01MCUsIDAsIDApOyB9XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXHJcbiAgICAkQ09OVEVOVFxyXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLmNvbnRlbnQge1xuICBwYWRkaW5nLWJvdHRvbTogMi4yNXJlbTsgfVxuXG4vKipcclxuICogVGhlIHdpZHRoIG9mIHRoZSBhcnRpY2xlcyBpcyBmbHVpZCwgYW5kIGFsd2F5cyBoYXMgcGFkZGluZyBvbiB0aGUgbGVmdC1oYW5kXHJcbiAqIHNpZGUgdG8gbWFrZSByb29tIGZvciBhbnkgYGFzaWRlYCwgd2hpY2ggY2FuIGFwcGVhciBhbnl3aGVyZSBpbnNpZGVcclxuICogYGFydGljbGVgIG9yIGAuYXJ0aWNsZXMtbGlzdGAuXHJcbiAqIE1heGltdW0gdG90YWwgd2lkdGggb2YgY29udGFpbmVyXHJcbiAqICAgPSAxMDgwcHhcclxuICogTGVmdC1oYW5kIHBhZGRpbmdcclxuICogICA9IDI1JSBvZiAxMDgwcHggPSAyNzBweCAgPSAxNi44NzVlbVxyXG4gKi9cbmFydGljbGUge1xuICBwYWRkaW5nLXRvcDogMi4yNXJlbTtcbiAgYm9yZGVyLXRvcDogMC4yNXJlbSBzb2xpZCAjNUY4QUE2OyB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiA3NjlweCkge1xuICAgIGFydGljbGUge1xuICAgICAgcGFkZGluZy1sZWZ0OiAxOC4xMjVyZW07IH0gfVxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICBhcnRpY2xlIHtcbiAgICAgIC8qKlxyXG4gICAgICAgICAqIFdoZW4geW91IGhpdCB0aGUgYG1lZGl1bWAgbWVkaWEgcXVlcnksIGBhcnRpY2xlYCwgYGFydGljbGUtbGlzdGAsIGFuZFxyXG4gICAgICAgICAqIGBhc2lkZWAgYmVjb21lcyBmdWxsIHdpZHRoIGFuZCBgYXNpZGUuYXV0aG9yLWluZm9ybWF0aW9uYCBwdXNoZXMgdG9cclxuICAgICAgICAgKiB0aGUgYm90dG9tIG9mIHRoZSBwYWdlLlxyXG4gICAgICAgICAqL1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47IH0gfVxuXG4uYXJ0aWNsZXMtbGlzdCBsaSB7XG4gIHdpZHRoOiAxMDAlO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGNsZWFyOiBib3RoO1xuICBwYWRkaW5nOiAxLjVlbSAxZW07XG4gIGJvcmRlci10b3A6IDAuMTI1cmVtIHNvbGlkIHJnYmEoNiwgNiwgNiwgMC4xKTtcbiAgcG9zaXRpb246IHJlbGF0aXZlOyB9XG4gIC5hcnRpY2xlcy1saXN0IGxpOm50aC1jaGlsZChvZGQpIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDYsIDYsIDYsIDAuMDUpOyB9XG4gIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgIC5hcnRpY2xlcy1saXN0IGxpIHtcbiAgICAgIHBhZGRpbmctdG9wOiAxLjg3NWVtO1xuICAgICAgcGFkZGluZy1ib3R0b206IDEuODc1ZW07XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7IH0gfVxuLmFydGljbGVzLWxpc3QgLmFydGljbGUtdGl0bGUsIC5hcnRpY2xlcy1saXN0IC5hcnRpY2xlLWRhdGUsIC5hcnRpY2xlcy1saXN0IC5jb21tZW50cy1saW5rIHtcbiAgdGV4dC1zaGFkb3c6IDAgMXB4IDAgI0Y5RjlGOTsgfVxuXG4uYXJ0aWNsZS1iYW5uZXIge1xuICB3aWR0aDogODEwcHg7XG4gIG1hcmdpbi1ib3R0b206IDFlbTsgfVxuICBAbWVkaWEgKG1heC13aWR0aDogNTAwcHgpIHtcbiAgICAuYXJ0aWNsZS1iYW5uZXIge1xuICAgICAgd2lkdGg6IDUwMHB4OyB9IH1cblxuLmFydGljbGUtdGl0bGUsIC5wYWdlLXRpdGxlLCAuc2l0ZS10YWdsaW5lIHtcbiAgbWFyZ2luLWJvdHRvbTogLjc1ZW07IH1cblxuLnNpdGUtZGVzY3JpcHRpb24ge1xuICBtYXgtd2lkdGg6IDI0ZW07XG4gIG1hcmdpbi10b3A6IC0wLjJlbTtcbiAgbWFyZ2luLWJvdHRvbTogMWVtO1xuICBsaW5lLWhlaWdodDogMS40ZW07IH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgLnNpdGUtZGVzY3JpcHRpb24ge1xuICAgICAgbWFyZ2luLWJvdHRvbTogMS4zODVlbTsgfSB9XG5cbi5hcnRpY2xlLWludHJvZHVjdGlvbiwgLnBhZ2UtZGVzY3JpcHRpb24ge1xuICBtYXJnaW4tYm90dG9tOiAxZW07XG4gIGZvbnQtc2l6ZTogMS4yNWVtO1xuICBsaW5lLWhlaWdodDogMS41ZW07IH1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gIC5hcnRpY2xlLXRpdGxlLCAuYXJ0aWNsZS1kYXRlLCAuYXJ0aWNsZS1pbnRyb2R1Y3Rpb24ge1xuICAgIHRleHQtYWxpZ246IGxlZnQ7IH0gfVxuXG4uYXJ0aWNsZS1pbnRyb2R1Y3Rpb24ge1xuICBtYXJnaW4tdG9wOiAtNXB4OyB9XG4gIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgIC5hcnRpY2xlLWludHJvZHVjdGlvbiB7XG4gICAgICBtYXJnaW4tdG9wOiAwOyB9IH1cbiAgLmFydGljbGUtYmFubmVyICsgLmFydGljbGUtaW50cm9kdWN0aW9uIHtcbiAgICBtYXJnaW4tdG9wOiAwOyB9XG5cbi5hcnRpY2xlLXRpdGxlIHtcbiAgd2lkdGg6IDEwMCU7IH1cbiAgLmFydGljbGUtdGl0bGUgLmFydGljbGUtdGl0bGUtbGluayB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHBhZGRpbmc6IDAgLjI3ZW07XG4gICAgYm9yZGVyLWJvdHRvbTogLjA3N2VtIHNvbGlkIHRyYW5zcGFyZW50O1xuICAgIG1hcmdpbi1sZWZ0OiAtMC4yN2VtO1xuICAgIHRyYW5zaXRpb246IGJvcmRlci1jb2xvciAwLjJzIGVhc2U7IH1cbiAgICAuYXJ0aWNsZS10aXRsZSAuYXJ0aWNsZS10aXRsZS1saW5rOmhvdmVyLCAuYXJ0aWNsZS10aXRsZSAuYXJ0aWNsZS10aXRsZS1saW5rOmZvY3VzLCAuYXJ0aWNsZS10aXRsZSAuYXJ0aWNsZS10aXRsZS1saW5rOmFjdGl2ZSB7XG4gICAgICBjb2xvcjogIzRGNEY0RjtcbiAgICAgIGJvcmRlci1ib3R0b20tY29sb3I6ICM1RjhBQTY7XG4gICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cblxuLmFydGljbGVzLWxpc3QgLmFydGljbGUtZGF0ZTpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcMjAxM1xcMDAyMFwiO1xuICBjb2xvcjogIzczNzM3MzsgfVxuXG4uY29tbWVudHMtbGluayB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgbWFyZ2luLXRvcDogMS42MjVlbTtcbiAgZm9udC1mYW1pbHk6IFwicHJveGltYS1ub3ZhXCIsIHNhbnMtc2VyaWY7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGxpbmUtaGVpZ2h0OiAxZW07IH1cbiAgLmNvbW1lbnRzLWxpbms6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6IFwiXFwwMGEwXFwyMTkyXCI7IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDc2OXB4KSB7XG4gICAgLmNvbW1lbnRzLWxpbmsge1xuICAgICAgZmxvYXQ6IHJpZ2h0OyB9IH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgLmNvbW1lbnRzLWxpbmsge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBtYXJnaW4tdG9wOiAxLjI1cmVtOyB9IH1cblxuLnNtYWxsLWFydGljbGVzLWxpc3Qge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIGZsZXgtd3JhcDogd3JhcDtcbiAgbWFyZ2luOiAwIC0wLjVlbSAxLjVlbTtcbiAgZm9udC1mYW1pbHk6IFwicHJveGltYS1ub3ZhXCIsIHNhbnMtc2VyaWY7XG4gIGxpbmUtaGVpZ2h0OiAxLjI1ZW07IH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgLnNtYWxsLWFydGljbGVzLWxpc3Qge1xuICAgICAgbWFyZ2luLWJvdHRvbTogMS44NzVlbTsgfSB9XG4gIC5zbWFsbC1hcnRpY2xlcy1saXN0IGxpIHtcbiAgICB3aWR0aDogNDkuMDEyNSU7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XG4gICAgLnNtYWxsLWFydGljbGVzLWxpc3QgbGk6bnRoLWNoaWxkKG4rMykge1xuICAgICAgbWFyZ2luLXRvcDogMWVtOyB9XG4gICAgYXNpZGUgLnNtYWxsLWFydGljbGVzLWxpc3QgbGkge1xuICAgICAgd2lkdGg6IDEwMCU7IH1cbiAgICAgIGFzaWRlIC5zbWFsbC1hcnRpY2xlcy1saXN0IGxpICsgbGkge1xuICAgICAgICBtYXJnaW4tdG9wOiAxZW07IH1cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNTAwcHgpIHtcbiAgICAgIC5zbWFsbC1hcnRpY2xlcy1saXN0IGxpIHtcbiAgICAgICAgd2lkdGg6IDEwMCU7IH1cbiAgICAgICAgLnNtYWxsLWFydGljbGVzLWxpc3QgbGkgKyBsaSB7XG4gICAgICAgICAgbWFyZ2luLXRvcDogMWVtOyB9IH1cbiAgLnNtYWxsLWFydGljbGVzLWxpc3QgYSB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgcGFkZGluZzogLjVlbTtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjsgfVxuICAgIC5zbWFsbC1hcnRpY2xlcy1saXN0IGE6aG92ZXIsIC5zbWFsbC1hcnRpY2xlcy1saXN0IGE6Zm9jdXMsIC5zbWFsbC1hcnRpY2xlcy1saXN0IGE6YWN0aXZlIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNiwgNiwgNiwgMC4wNSk7XG4gICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cbiAgLnNtYWxsLWFydGljbGVzLWxpc3QgLnNtYWxsLWFydGljbGUtdGl0bGUsIC5zbWFsbC1hcnRpY2xlcy1saXN0IC5zbWFsbC1hcnRpY2xlLWludHJvZHVjdGlvbiwgLnNtYWxsLWFydGljbGVzLWxpc3QgLnNtYWxsLWFydGljbGUtZGF0ZSB7XG4gICAgdGV4dC1zaGFkb3c6IDAgMXB4IDAgI0Y5RjlGOTsgfVxuICAuc21hbGwtYXJ0aWNsZXMtbGlzdCAuc21hbGwtYXJ0aWNsZS10aXRsZSB7XG4gICAgbWFyZ2luLWJvdHRvbTogLjMxMjVlbTsgfVxuICAuc21hbGwtYXJ0aWNsZXMtbGlzdCAuc21hbGwtYXJ0aWNsZS1kYXRlIHtcbiAgICBjb2xvcjogIzczNzM3MztcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBmb250LXNpemU6IC44MTI1ZW07XG4gICAgZm9udC13ZWlnaHQ6IDYwMDsgfVxuICAgIC5zbWFsbC1hcnRpY2xlcy1saXN0IC5zbWFsbC1hcnRpY2xlLWRhdGU6YmVmb3JlIHtcbiAgICAgIGNvbnRlbnQ6IFwiXFwyMDEzXFwwMDIwXCI7IH1cbiAgLnNtYWxsLWFydGljbGVzLWxpc3QgLmNvZGVwZW4taWNvbiB+IC5zbWFsbC1hcnRpY2xlLWRhdGUge1xuICAgIG1hcmdpbi10b3A6IC4zMTI1ZW07IH1cbiAgLnNtYWxsLWFydGljbGVzLWxpc3QgLnNtYWxsLWFydGljbGUtaW50cm9kdWN0aW9uIHtcbiAgICBjb2xvcjogIzRGNEY0RjtcbiAgICBtYXJnaW4tdG9wOiAuMzEyNWVtOyB9XG5cbi8qKlxyXG4gKiBGb3IgRmVhdHVyZWQgUGVucywgYHN2Z2AgaXMgYSBjaGlsZCBvZiB0aGUgYGxpYFxyXG4gKi9cbi5zbWFsbC1hcnRpY2xlcy1saXN0IHN2ZyB7XG4gIG9wYWNpdHk6IDAuMDU7XG4gIHdpZHRoOiA2LjI1ZW0gIWltcG9ydGFudDtcbiAgaGVpZ2h0OiA2LjI1ZW07XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogNTAlO1xuICByaWdodDogLjVlbTtcbiAgc3Ryb2tlOiAjNEY0RjRGO1xuICB6LWluZGV4OiAtMTtcbiAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtNTAlLCAwKTsgfVxuICBAbWVkaWEgKG1heC13aWR0aDogNTAwcHgpIHtcbiAgICAuc21hbGwtYXJ0aWNsZXMtbGlzdCBzdmcge1xuICAgICAgd2lkdGg6IDRlbSAhaW1wb3J0YW50O1xuICAgICAgaGVpZ2h0OiA0ZW07IH0gfVxuLnNtYWxsLWFydGljbGVzLWxpc3QgYTpob3ZlciBzdmcsIC5zbWFsbC1hcnRpY2xlcy1saXN0IGE6Zm9jdXMgc3ZnLCAuc21hbGwtYXJ0aWNsZXMtbGlzdCBhOmFjdGl2ZSBzdmcge1xuICBvcGFjaXR5OiAwLjI1OyB9XG5cbi5wZW5zLWludHJvZHVjdGlvbiB7XG4gIHBhZGRpbmctYm90dG9tOiAxLjI1cmVtO1xuICBib3JkZXItYm90dG9tOiAwLjEyNXJlbSBzb2xpZCByZ2JhKDYsIDYsIDYsIDAuMSk7IH1cblxuLmFydGljbGVzLW5hdmlnYXRpb24ge1xuICB3aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMi4wNjhyZW0gMCAyLjI1cmVtO1xuICBib3JkZXItdG9wOiAwLjEyNXJlbSBzb2xpZCByZ2JhKDYsIDYsIDYsIDAuMSk7XG4gIHRleHQtYWxpZ246IGNlbnRlcjsgfVxuICAuYWJvdXQtcGFnZSAuYXJ0aWNsZXMtbmF2aWdhdGlvbiB7XG4gICAgYm9yZGVyLXRvcDogMDtcbiAgICBwYWRkaW5nOiAxLjI1cmVtIDA7IH1cbiAgLmFydGljbGVzLW5hdmlnYXRpb24gYnV0dG9uLCAuYXJ0aWNsZXMtbmF2aWdhdGlvbiAuYnV0dG9uIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH1cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogNTAxcHgpIHtcbiAgICAgIC5hcnRpY2xlcy1uYXZpZ2F0aW9uIGJ1dHRvbiArIGJ1dHRvbiwgLmFydGljbGVzLW5hdmlnYXRpb24gYnV0dG9uICsgLmJ1dHRvbiwgLmFydGljbGVzLW5hdmlnYXRpb24gLmJ1dHRvbiArIGJ1dHRvbiwgLmFydGljbGVzLW5hdmlnYXRpb24gLmJ1dHRvbiArIC5idXR0b24ge1xuICAgICAgICBtYXJnaW4tbGVmdDogMS44NzVlbTsgfSB9XG5cbi5jb21tZW50cyB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjsgfVxuICBAbWVkaWEgKG1pbi13aWR0aDogNzY5cHgpIHtcbiAgICAucGFnaW5hdGlvbiArIC5jb21tZW50cyB7XG4gICAgICBwYWRkaW5nLXRvcDogMi4yNXJlbTsgfSB9XG4gIC5jb21tZW50cyAuc2hvdy1jb21tZW50czpiZWZvcmUsIC5jb21tZW50cyAuc2hvdy1jb21tZW50czphY3RpdmU6YmVmb3JlIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgdG9wOiAwOyB9XG4gIC5jb21tZW50cyBub3NjcmlwdCB7XG4gICAgZm9udC1mYW1pbHk6IFwicHJveGltYS1ub3ZhXCIsIHNhbnMtc2VyaWY7XG4gICAgZm9udC1zaXplOiAxLjI1ZW07XG4gICAgZm9udC1zdHlsZTogaXRhbGljOyB9XG5cbi8qKlxyXG4gKiBTdHlsZSBHdWlkZVxyXG4gKi9cbi5jb2xvci1ibG9jay1saXN0IHtcbiAgbWFyZ2luLWJvdHRvbTogLjc1ZW07XG4gIHRleHQtYWxpZ246IGNlbnRlcjsgfVxuICAuY29sb3ItYmxvY2stbGlzdCBsaSB7XG4gICAgY29sb3I6ICNGOUY5Rjk7XG4gICAgd2lkdGg6IDYuNWVtO1xuICAgIGhlaWdodDogNi41ZW07XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIGJvcmRlcjogMC4yNXJlbSBzb2xpZCByZ2JhKDYsIDYsIDYsIDAuMjUpO1xuICAgIG1hcmdpbjogMCAuMjVlbSAuNWVtO1xuICAgIGZvbnQtZmFtaWx5OiBDb25zb2xhcywgTW9uYWNvLCBcIkNvdXJpZXIgTmV3XCIsIG1vbm9zcGFjZTtcbiAgICBmb250LXdlaWdodDogNzAwO1xuICAgIGxpbmUtaGVpZ2h0OiA2ZW07XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7IH1cbiAgICAuY29sb3ItYmxvY2stbGlzdCBsaVtkYXRhLWNvbG9yPVwiIzVGOEFBNlwiXSB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNUY4QUE2OyB9XG4gICAgLmNvbG9yLWJsb2NrLWxpc3QgbGlbZGF0YS1jb2xvcj1cIiNGOUY5RjlcIl0ge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0Y5RjlGOTtcbiAgICAgIGNvbG9yOiAjNEY0RjRGOyB9XG4gICAgLmNvbG9yLWJsb2NrLWxpc3QgbGlbZGF0YS1jb2xvcj1cIiM0RjRGNEZcIl0ge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzRGNEY0RjsgfVxuICAgIC5jb2xvci1ibG9jay1saXN0IGxpW2RhdGEtY29sb3I9XCIjNzM3MzczXCJdIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICM3MzczNzM7IH1cbiAgICAuY29sb3ItYmxvY2stbGlzdCBsaVtkYXRhLWNvbG9yPVwiI0RERERERFwiXSB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjREREREREO1xuICAgICAgY29sb3I6ICM0RjRGNEY7IH1cblxuLnN0eWxlLWd1aWRlLXBhZ2UgOm5vdCgucGFnZS1kZXNjcmlwdGlvbikgKyBoM1tpZF0ge1xuICBtYXJnaW4tdG9wOiAzLjM3NXJlbTsgfVxuXG4vKipcclxuICogQ29udGFpbnMgZW1iZWRkZWQgbWVkaWEgcHJvcGVybHkgYW5kIGFsbG93cyB0aGVtIHRvIGJlIGR5bmFtaWNhbGx5IHJlc2l6ZWQuXHJcbiAqL1xuLm1lZGlhLWNvbnRhaW5lciB7XG4gIGhlaWdodDogMDtcbiAgcGFkZGluZy10b3A6IDMwcHg7XG4gIHBhZGRpbmctYm90dG9tOiA1Ni42NSU7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjsgfVxuICAubWVkaWEtY29udGFpbmVyIGVtYmVkLCAubWVkaWEtY29udGFpbmVyIGlmcmFtZSwgLm1lZGlhLWNvbnRhaW5lciBvYmplY3QsIC5tZWRpYS1jb250YWluZXIgdmlkZW8ge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7IH1cblxuLyoqXHJcbiAqIEZpeCBgaWZyYW1lYCBhbmQgYHZpZGVvYFxyXG4gKi9cbmlmcmFtZSwgdmlkZW8ge1xuICB3aWR0aDogMTAwJTtcbiAgbWFyZ2luLWJvdHRvbTogMS4yNXJlbTtcbiAgYm9yZGVyOiBub25lO1xuICBvdmVyZmxvdy14OiBoaWRkZW47IH1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcclxuICAgICRBU0lERVNcclxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxyXG4gKiBUaGUgd2lkdGggb2YgdGhlIGFzaWRlcyBpcyBzdGF0aWMgYW5kIGFuZCBhbHdheXMgZmxvYXRlZCB3aXRoaW4gYW4gYXJ0aWNsZSBvclxyXG4gKiBsaXN0IG9mIGFydGljbGVzLiBUaGUgbWF0aCBpcyBjYWxjdWxhdGVkIGFzIGluIHRoZSBhcnRpY2xlcyBwYXJ0aWFsLlxyXG4gKi9cbmFzaWRlIHtcbiAgd2lkdGg6IDE1Ljg3NXJlbTsgfVxuICBAbWVkaWEgKG1pbi13aWR0aDogNzY5cHgpIHtcbiAgICBhc2lkZSB7XG4gICAgICBmbG9hdDogbGVmdDtcbiAgICAgIG1hcmdpbi1sZWZ0OiAtMTguMTI1cmVtOyB9IH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgYXNpZGUge1xuICAgICAgd2lkdGg6IDEwMCU7IH1cbiAgICAgIGFzaWRlOm5vdCguYXV0aG9yKSB7XG4gICAgICAgIGJhY2tncm91bmQ6IHJnYmEoNiwgNiwgNiwgMC4wNSk7XG4gICAgICAgIHBhZGRpbmc6IDFlbTtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMS4yNXJlbTsgfVxuICAgICAgICBhc2lkZTpub3QoLmF1dGhvcik6bGFzdC1jaGlsZCB7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMDsgfSB9XG4gIGFzaWRlIHAsIGFzaWRlIGZpZ2NhcHRpb24ge1xuICAgIGNsZWFyOiBib3RoO1xuICAgIGZvbnQtc2l6ZTogLjg3NWVtOyB9XG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDUwMHB4KSB7XG4gICAgICBhc2lkZSBwLCBhc2lkZSBmaWdjYXB0aW9uIHtcbiAgICAgICAgZm9udC1zaXplOiAxZW07IH0gfVxuXG4vKmFzaWRlKi9cbi5hdXRob3Ige1xuICBmb250LWZhbWlseTogXCJwcm94aW1hLW5vdmFcIiwgc2Fucy1zZXJpZjsgfVxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAuYXV0aG9yIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgb3JkZXI6IDk5OTsgfVxuICAgICAgLmFib3V0LXBhZ2UgLmF1dGhvciB7XG4gICAgICAgIG1hcmdpbi10b3A6IDEuMjVyZW07IH0gfVxuXG4uYXV0aG9yLWluZm9ybWF0aW9uIHtcbiAgbWFyZ2luLWJvdHRvbTogLjVlbTtcbiAgZm9udC1mYW1pbHk6IFwiZmYtbWV0YS1zZXJpZi13ZWItcHJvXCIsIEdlb3JnaWEsIHNlcmlmO1xuICBmb250LXNpemU6IC44NzVlbTtcbiAgZm9udC1zdHlsZTogaXRhbGljOyB9XG4gIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgIC5hdXRob3ItaW5mb3JtYXRpb24ge1xuICAgICAgb3JkZXI6IDk5ODtcbiAgICAgIHBhZGRpbmctdG9wOiAyLjI1cmVtO1xuICAgICAgYm9yZGVyLXRvcDogMC4xMjVyZW0gc29saWQgcmdiYSg2LCA2LCA2LCAwLjEpOyB9IH1cbiAgLmF1dGhvci1pbmZvcm1hdGlvbiBhLCAuYXV0aG9yLWluZm9ybWF0aW9uIHN0cm9uZyB7XG4gICAgY29sb3I6IGluaGVyaXQ7XG4gICAgZm9udC1mYW1pbHk6IFwicHJveGltYS1ub3ZhXCIsIHNhbnMtc2VyaWY7XG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwOyB9XG5cbkBtZWRpYSAobWluLXdpZHRoOiA3NjlweCkge1xuICAuYXV0aG9yLWJpb2dyYXBoeSB7XG4gICAgbWFyZ2luLWJvdHRvbTogMS4yNXJlbTsgfSB9XG5AbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgLmF1dGhvci1iaW9ncmFwaHkge1xuICAgIG9yZGVyOiA5OTk7IH0gfVxuXG4uYXV0aG9yLW5hbWUsIC5hdXRob3ItYWdlLCAuYXV0aG9yLWVtcGxveWVyLCAuYXJ0aWNsZS1kYXRlLCAuYXJ0aWNsZS1sYWJlbCB7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luLWJvdHRvbTogLjVlbTtcbiAgbGluZS1oZWlnaHQ6IDEuNDI5ZW07IH1cblxuLmFydGljbGUtbGFiZWwgYTphZnRlciwgLmZlYXR1cmVkLXBlbnMtbGluazphZnRlciB7XG4gIGNvbnRlbnQ6IFwiXFwwMGEwXFwyMTkyXCI7IH1cblxuLmF1dGhvci1pbWFnZSB7XG4gIGJhY2tncm91bmQtc2l6ZTogMTAwJTtcbiAgd2lkdGg6IDYuMjVlbTtcbiAgaGVpZ2h0OiA2LjI1ZW07XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgZmxvYXQ6IGxlZnQ7XG4gIG1hcmdpbi1yaWdodDogLjYyNWVtOyB9XG5cbi5hcnRpY2xlLXRhZ3Mge1xuICBkaXNwbGF5OiB0YWJsZS1jZWxsO1xuICBsaW5lLWhlaWdodDogMS40MjllbTsgfVxuXG5AbWVkaWEgKG1pbi13aWR0aDogNzY5cHgpIHtcbiAgLmZlYXR1cmVkLXBlbnMsIC5yZWxhdGVkLWFydGljbGVzIHtcbiAgICBtYXJnaW4tdG9wOiAxLjI1cmVtOyB9IH1cblxuLmZlYXR1cmVkLXBlbnMtdGl0bGUsIC5yZWxhdGVkLWFydGljbGVzLXRpdGxlIHtcbiAgbWFyZ2luLXRvcDogMDsgfVxuXG4uZmVhdHVyZWQtcGVucy1saW5rIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXJnaW4tdG9wOiAwLjYyNXJlbTtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIHRleHQtYWxpZ246IHJpZ2h0OyB9XG4gIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgIC5mZWF0dXJlZC1wZW5zLWxpbmsge1xuICAgICAgbWFyZ2luLWJvdHRvbTogMS4yNXJlbTtcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsgfSB9XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXHJcbiAgICAkRk9PVEVSXHJcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5mb290ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNEY0RjRGO1xuICBjb2xvcjogI0RERERERDtcbiAgd2lkdGg6IDEwMCU7XG4gIHBhZGRpbmc6IDIuMjVyZW0gMDtcbiAgYm9yZGVyLXRvcDogLjI4NmVtIHNvbGlkICM1RjhBQTY7XG4gIGZvbnQtZmFtaWx5OiBcInByb3hpbWEtbm92YVwiLCBzYW5zLXNlcmlmO1xuICBmb250LXdlaWdodDogNjAwO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gYm90dG9tLCB0cmFuc3BhcmVudCAwJSwgcmdiYSg2LCA2LCA2LCAwLjEpIDEwMCUpOyB9XG5cbi5jb3B5cmlnaHQsIC5zb2NpYWwtaWNvbi1saXN0IHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjsgfVxuICBAbWVkaWEgKG1pbi13aWR0aDogNzY5cHgpIHtcbiAgICAuY29weXJpZ2h0LCAuc29jaWFsLWljb24tbGlzdCB7XG4gICAgICBmbG9hdDogbGVmdDsgfSB9XG4gIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgIC5jb3B5cmlnaHQsIC5zb2NpYWwtaWNvbi1saXN0IHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyOyB9IH1cblxuLnNvY2lhbC1pY29uLWxpc3Qge1xuICBmbG9hdDogcmlnaHQ7XG4gIG1hcmdpbi10b3A6IC4zMTI1ZW07IH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgLnNvY2lhbC1pY29uLWxpc3Qge1xuICAgICAgbWFyZ2luLXRvcDogLjYyNWVtOyB9IH1cbiAgLnNvY2lhbC1pY29uLWxpc3QgbGkge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgfVxuICAgIC5zb2NpYWwtaWNvbi1saXN0IGxpICsgbGkge1xuICAgICAgbWFyZ2luLWxlZnQ6IDFlbTsgfVxuXG4uaG9tZS1saW5rLCAuY29weXJpZ2h0LWxpbmssIC5zdHlsZS1ndWlkZS1saW5rIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB3aGl0ZS1zcGFjZTogbm93cmFwOyB9XG5cbi5ob21lLWxpbmsge1xuICB3aWR0aDogNTBweDtcbiAgaGVpZ2h0OiA1MHB4O1xuICBtYXJnaW4tcmlnaHQ6IDFlbTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgdGV4dC1pbmRlbnQ6IDEwMCU7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2U7IH1cbiAgLmhvbWUtbGluazpob3ZlciwgLmhvbWUtbGluazpmb2N1cywgLmhvbWUtbGluazphY3RpdmUge1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxuICAuaG9tZS1saW5rOmFjdGl2ZSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAuMTQzZW0sIDApOyB9XG4gIEBtZWRpYSAobWF4LXdpZHRoOiA1MDBweCkge1xuICAgIC5ob21lLWxpbmsge1xuICAgICAgbWFyZ2luLXJpZ2h0OiAuNWVtOyB9IH1cbiAgLmhvbWUtbGluayBzdmcge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBkaXNwbGF5OiBibG9jazsgfVxuXG4uY29weXJpZ2h0LWxpbmssIC5zdHlsZS1ndWlkZS1saW5rIHtcbiAgY29sb3I6ICNEREREREQ7IH1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDUwMHB4KSB7XG4gIC5zdHlsZS1ndWlkZS1saW5rIHtcbiAgICBkaXNwbGF5OiBibG9jazsgfSB9XG5cbi5mb290ZXItc3BhY2VyIHtcbiAgY29sb3I6ICM3MzczNzM7IH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDUwMHB4KSB7XG4gICAgLmZvb3Rlci1zcGFjZXIge1xuICAgICAgZGlzcGxheTogbm9uZTsgfSB9XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJENPREUgQU5EIENPREUgQkxPQ0tTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuY29kZSwga2JkLCBzYW1wLCB2YXIsIC5tb25vc3BhY2Uge1xuICBmb250LWZhbWlseTogQ29uc29sYXMsIE1vbmFjbywgXCJDb3VyaWVyIE5ld1wiLCBtb25vc3BhY2U7XG4gIGZvbnQtc2l6ZTogLjg3NWVtOyB9XG5cbnAgY29kZSwgb2wgY29kZSwgdWwgY29kZSwgaW5zLCBrYmQsIG1hcmssIHNhbXAsIHZhciB7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoOTUsIDEzOCwgMTY2LCAwLjEpO1xuICBwYWRkaW5nOiAuMjE1ZW07XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgYm9yZGVyLXJhZGl1czogLjI1ZW07IH1cblxucHJlIHtcbiAgbWFyZ2luLXRvcDogMDsgfVxuICBwcmU6bm90KDpsYXN0LWNoaWxkKSB7XG4gICAgbWFyZ2luLWJvdHRvbTogMS4yNXJlbTsgfVxuICBwcmU6bm90KC5jb2RlcGVuKSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg2LCA2LCA2LCAwLjA1KTtcbiAgICBwYWRkaW5nOiAxLjVlbSAxLjVlbSAxZW07XG4gICAgb3ZlcmZsb3cteDogYXV0bztcbiAgICBvdmVyZmxvdy15OiBoaWRkZW47XG4gICAgbGluZS1oZWlnaHQ6IDEuNWVtOyB9XG4gICAgcHJlOm5vdCguY29kZXBlbikgY29kZSB7XG4gICAgICBtaW4td2lkdGg6IDEwMCU7XG4gICAgICBkaXNwbGF5OiBibG9jazsgfVxuXG4uaGlnaGxpZ2h0IHtcbiAgcG9zaXRpb246IHJlbGF0aXZlOyB9XG5cbi8qKlxuICogYGRhdGEtbGFuZ2AgaXMgYWx3YXlzIGFuIGF0dHJpYnV0ZSBvbiBhIGNvZGUgZWxlbWVudCBpbnNpZGUgYGRpdi5oaWdobGlnaHRgXG4gKi9cbltkYXRhLWxhbmddIHtcbiAgcGFkZGluZy10b3A6IDIuMjVyZW07IH1cbiAgW2RhdGEtbGFuZ106YmVmb3JlIHtcbiAgICBjb250ZW50OiBhdHRyKGRhdGEtbGFuZyk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzczNzM3MztcbiAgICBjb2xvcjogI0Y5RjlGOTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBwYWRkaW5nOiAwIDEuNWVtO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICBmb250LWZhbWlseTogXCJwcm94aW1hLW5vdmFcIiwgc2Fucy1zZXJpZjtcbiAgICBmb250LXNpemU6IDEuMjVlbTtcbiAgICBmb250LXdlaWdodDogNjAwO1xuICAgIGxpbmUtaGVpZ2h0OiAyLjRlbTtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIGJvcmRlci1yYWRpdXM6IC4zZW0gLjNlbSAwIDA7XG4gICAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZTsgfVxuICBbZGF0YS1sYW5nXS5sYW5ndWFnZS1jc3M6YmVmb3JlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDE2RkJBOyB9XG4gIFtkYXRhLWxhbmddLmxhbmd1YWdlLWhhbWw6YmVmb3JlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRTU0RDI2OyB9XG4gIFtkYXRhLWxhbmddLmxhbmd1YWdlLWh0bWw6YmVmb3JlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRTU0RDI2OyB9XG4gIFtkYXRhLWxhbmddLmxhbmd1YWdlLWphdmFzY3JpcHQ6YmVmb3JlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjFDNTRDOyB9XG4gIFtkYXRhLWxhbmddLmxhbmd1YWdlLXNhc3M6YmVmb3JlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQzY1MzhDOyB9XG4gIFtkYXRhLWxhbmddLmxhbmd1YWdlLXNjc3M6YmVmb3JlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQzY1MzhDOyB9XG5cbi8qKlxuICogR2l0aHViLXN0eWxlIENvZGUgSGlnaGxpZ2h0aW5nXG4gKi9cbi5oaWdobGlnaHQgLmVyciB7XG4gIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Y29yYWw7XG4gIGNvbG9yOiBmaXJlYnJpY2s7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7IH1cbi5oaWdobGlnaHQgLmMsIC5oaWdobGlnaHQgLmNtLCAuaGlnaGxpZ2h0IC5jcCwgLmhpZ2hsaWdodCAuYzEsIC5oaWdobGlnaHQgLmNzIHtcbiAgY29sb3I6ICM3MzczNzM7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYzsgfVxuLmhpZ2hsaWdodCAuZ3MsIC5oaWdobGlnaHQgLmssIC5oaWdobGlnaHQgLmtjLCAuaGlnaGxpZ2h0IC5rZCwgLmhpZ2hsaWdodCAua3AsIC5oaWdobGlnaHQgLmtyLCAuaGlnaGxpZ2h0IC5rdCwgLmhpZ2hsaWdodCAubmMsIC5oaWdobGlnaHQgLm5lLCAuaGlnaGxpZ2h0IC5uZiwgLmhpZ2hsaWdodCAubywgLmhpZ2hsaWdodCAub3cge1xuICBmb250LXdlaWdodDogNjAwOyB9XG4uaGlnaGxpZ2h0IC5nciwgLmhpZ2hsaWdodCAuZ3QsIC5oaWdobGlnaHQgLm5lLCAuaGlnaGxpZ2h0IC5uZiwgLmhpZ2hsaWdodCAucywgLmhpZ2hsaWdodCAuc2IsIC5oaWdobGlnaHQgLnNjLCAuaGlnaGxpZ2h0IC5zZCwgLmhpZ2hsaWdodCAuczEsIC5oaWdobGlnaHQgLnMyLCAuaGlnaGxpZ2h0IC5zZSwgLmhpZ2hsaWdodCAuc2gsIC5oaWdobGlnaHQgLnNpLCAuaGlnaGxpZ2h0IC5zeCB7XG4gIGNvbG9yOiBmaXJlYnJpY2s7IH1cbi5oaWdobGlnaHQgLmdpLCAuaGlnaGxpZ2h0IC5naSAueCB7XG4gIGJhY2tncm91bmQtY29sb3I6IHR1cnF1b2lzZTsgfVxuLmhpZ2hsaWdodCAuZ2QsIC5oaWdobGlnaHQgLmdkIC54IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHRjb3JhbDsgfVxuLmhpZ2hsaWdodCAuZ2Uge1xuICBmb250LXN0eWxlOiBpdGFsaWM7IH1cbi5oaWdobGlnaHQgLm0sIC5oaWdobGlnaHQgLmlsLCAuaGlnaGxpZ2h0IC5tZiwgLmhpZ2hsaWdodCAubWgsIC5oaWdobGlnaHQgLm1pLCAuaGlnaGxpZ2h0IC5tbywgLmhpZ2hsaWdodCAubmIsIC5oaWdobGlnaHQgLm5vLCAuaGlnaGxpZ2h0IC5udiwgLmhpZ2hsaWdodCAudmMsIC5oaWdobGlnaHQgLnZnLCAuaGlnaGxpZ2h0IC52aSB7XG4gIGNvbG9yOiBjYWRldGJsdWU7IH1cbi5oaWdobGlnaHQgLnNyIHtcbiAgY29sb3I6IGZvcmVzdGdyZWVuOyB9XG4uaGlnaGxpZ2h0IC5icCwgLmhpZ2hsaWdodCAuZ2gsIC5oaWdobGlnaHQgLmdvLCAuaGlnaGxpZ2h0IC5ncCwgLmhpZ2hsaWdodCAubm4ge1xuICBjb2xvcjogIzczNzM3MzsgfVxuLmhpZ2hsaWdodCAuZ3UsIC5oaWdobGlnaHQgLncge1xuICBjb2xvcjogI0RERERERDsgfVxuLmhpZ2hsaWdodCAua3QsIC5oaWdobGlnaHQgLm5hLCAuaGlnaGxpZ2h0IC5uYywgLmhpZ2hsaWdodCAubnQge1xuICBjb2xvcjogIzVGOEFBNjsgfVxuLmhpZ2hsaWdodCAubmksIC5oaWdobGlnaHQgLnNzIHtcbiAgY29sb3I6IHNsYXRlYmx1ZTtcbiAgY29sb3I6IHJlYmVjY2FwdXJwbGU7IH1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkSUNPTlNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4uc3ZnLW1hc3RlciB7XG4gIGRpc3BsYXk6IG5vbmU7IH1cblxuLyphKi9cbi5pY29uIHtcbiAgb3BhY2l0eTogMC43O1xuICBoZWlnaHQ6IDQwcHg7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB0ZXh0LWluZGVudDogMTAwJTtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZTsgfVxuICAuaWNvbjpob3ZlciwgLmljb246Zm9jdXMsIC5pY29uOmFjdGl2ZSB7XG4gICAgb3BhY2l0eTogMTtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cbiAgLmljb246YWN0aXZlIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC4xNGVtLCAwKTsgfVxuICAuaWNvbi5jb2RlcGVuLWljb24sIC5pY29uLmNvZGVwZW4tbGluayB7XG4gICAgd2lkdGg6IDQxcHg7IH1cbiAgLmljb24uZ2l0aHViLWljb24sIC5pY29uLmdpdGh1Yi1saW5rIHtcbiAgICB3aWR0aDogMzhweDsgfVxuICAuaWNvbi5sYXN0Zm0taWNvbiwgLmljb24ubGFzdGZtLWxpbmsge1xuICAgIHdpZHRoOiA0MHB4OyB9XG4gIC5pY29uLnJzcy1pY29uLCAuaWNvbi5yc3MtbGluayB7XG4gICAgd2lkdGg6IDMxcHg7IH1cbiAgLmljb24udHdpdHRlci1pY29uLCAuaWNvbi50d2l0dGVyLWxpbmsge1xuICAgIHdpZHRoOiAzN3B4OyB9XG4gIC5pY29uLmFydGljbGUtaWNvbiwgLmljb24uYXJ0aWNsZS1saW5rIHtcbiAgICB3aWR0aDogMzZweDsgfVxuICAuaWNvbi5mZWF0aGVyLWljb24sIC5pY29uLmZlYXRoZXItbGluayB7XG4gICAgd2lkdGg6IDI5cHg7IH1cbiAgLmljb24uaGVhcnQtaWNvbiwgLmljb24uaGVhcnQtbGluayB7XG4gICAgd2lkdGg6IDQwcHg7IH1cbiAgLmljb24udGFnLWljb24sIC5pY29uLnRhZy1saW5rIHtcbiAgICB3aWR0aDogNDBweDsgfVxuICAuaWNvbiBzdmcge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBkaXNwbGF5OiBibG9jazsgfVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRQUklOVFxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbkBtZWRpYSBwcmludCB7XG4gIG5hdiwgLnJlbGF0ZWQtYXJ0aWNsZXMsIC5wYWdpbmF0aW9uLCAuY29tbWVudHMsIGZvb3RlciAuaG9tZS1saW5rLCAuY29weXJpZ2h0LXNwYWNlciwgZm9vdGVyIC5zdHlsZS1ndWlkZS1saW5rLCAuc29jaWFsLWljb24tbGlzdCB7XG4gICAgZGlzcGxheTogbm9uZTsgfVxuICBidXR0b24sIC5idXR0b24ge1xuICAgIGNvbG9yOiAjNEY0RjRGO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICM0RjRGNEY7XG4gICAgYm94LXNoYWRvdzogbm9uZTsgfSB9XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXHJcbiAgICAkU0hBTUVcclxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiIsIi8qISBub3JtYWxpemUuY3NzIHYzLjAuMiB8IE1JVCBMaWNlbnNlIHwgZ2l0LmlvL25vcm1hbGl6ZSAqL1xuXG4vKipcbiAqIDEuIFNldCBkZWZhdWx0IGZvbnQgZmFtaWx5IHRvIHNhbnMtc2VyaWYuXG4gKiAyLiBQcmV2ZW50IGlPUyB0ZXh0IHNpemUgYWRqdXN0IGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZSwgd2l0aG91dCBkaXNhYmxpbmdcbiAqICAgIHVzZXIgem9vbS5cbiAqL1xuXG5odG1sIHtcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7IC8qIDEgKi9cbiAgLW1zLXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDIgKi9cbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOyAvKiAyICovXG59XG5cbi8qKlxuICogUmVtb3ZlIGRlZmF1bHQgbWFyZ2luLlxuICovXG5cbmJvZHkge1xuICBtYXJnaW46IDA7XG59XG5cbi8qIEhUTUw1IGRpc3BsYXkgZGVmaW5pdGlvbnNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogQ29ycmVjdCBgYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgZm9yIGFueSBIVE1MNSBlbGVtZW50IGluIElFIDgvOS5cbiAqIENvcnJlY3QgYGJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGZvciBgZGV0YWlsc2Agb3IgYHN1bW1hcnlgIGluIElFIDEwLzExXG4gKiBhbmQgRmlyZWZveC5cbiAqIENvcnJlY3QgYGJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGZvciBgbWFpbmAgaW4gSUUgMTEuXG4gKi9cblxuYXJ0aWNsZSxcbmFzaWRlLFxuZGV0YWlscyxcbmZpZ2NhcHRpb24sXG5maWd1cmUsXG5mb290ZXIsXG5oZWFkZXIsXG5oZ3JvdXAsXG5tYWluLFxubWVudSxcbm5hdixcbnNlY3Rpb24sXG5zdW1tYXJ5IHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbi8qKlxuICogMS4gQ29ycmVjdCBgaW5saW5lLWJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGluIElFIDgvOS5cbiAqIDIuIE5vcm1hbGl6ZSB2ZXJ0aWNhbCBhbGlnbm1lbnQgb2YgYHByb2dyZXNzYCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS5cbiAqL1xuXG5hdWRpbyxcbmNhbnZhcyxcbnByb2dyZXNzLFxudmlkZW8ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IC8qIDEgKi9cbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyAvKiAyICovXG59XG5cbi8qKlxuICogUHJldmVudCBtb2Rlcm4gYnJvd3NlcnMgZnJvbSBkaXNwbGF5aW5nIGBhdWRpb2Agd2l0aG91dCBjb250cm9scy5cbiAqIFJlbW92ZSBleGNlc3MgaGVpZ2h0IGluIGlPUyA1IGRldmljZXMuXG4gKi9cblxuYXVkaW86bm90KFtjb250cm9sc10pIHtcbiAgZGlzcGxheTogbm9uZTtcbiAgaGVpZ2h0OiAwO1xufVxuXG4vKipcbiAqIEFkZHJlc3MgYFtoaWRkZW5dYCBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOS8xMC5cbiAqIEhpZGUgdGhlIGB0ZW1wbGF0ZWAgZWxlbWVudCBpbiBJRSA4LzkvMTEsIFNhZmFyaSwgYW5kIEZpcmVmb3ggPCAyMi5cbiAqL1xuXG5baGlkZGVuXSxcbnRlbXBsYXRlIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLyogTGlua3NcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogUmVtb3ZlIHRoZSBncmF5IGJhY2tncm91bmQgY29sb3IgZnJvbSBhY3RpdmUgbGlua3MgaW4gSUUgMTAuXG4gKi9cblxuYSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xufVxuXG4vKipcbiAqIEltcHJvdmUgcmVhZGFiaWxpdHkgd2hlbiBmb2N1c2VkIGFuZCBhbHNvIG1vdXNlIGhvdmVyZWQgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbmE6YWN0aXZlLFxuYTpob3ZlciB7XG4gIG91dGxpbmU6IDA7XG59XG5cbi8qIFRleHQtbGV2ZWwgc2VtYW50aWNzXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIEFkZHJlc3Mgc3R5bGluZyBub3QgcHJlc2VudCBpbiBJRSA4LzkvMTAvMTEsIFNhZmFyaSwgYW5kIENocm9tZS5cbiAqL1xuXG5hYmJyW3RpdGxlXSB7XG4gIGJvcmRlci1ib3R0b206IDFweCBkb3R0ZWQ7XG59XG5cbi8qKlxuICogQWRkcmVzcyBzdHlsZSBzZXQgdG8gYGJvbGRlcmAgaW4gRmlyZWZveCA0KywgU2FmYXJpLCBhbmQgQ2hyb21lLlxuICovXG5cbmIsXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gU2FmYXJpIGFuZCBDaHJvbWUuXG4gKi9cblxuZGZuIHtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xufVxuXG4vKipcbiAqIEFkZHJlc3MgdmFyaWFibGUgYGgxYCBmb250LXNpemUgYW5kIG1hcmdpbiB3aXRoaW4gYHNlY3Rpb25gIGFuZCBgYXJ0aWNsZWBcbiAqIGNvbnRleHRzIGluIEZpcmVmb3ggNCssIFNhZmFyaSwgYW5kIENocm9tZS5cbiAqL1xuXG5oMSB7XG4gIGZvbnQtc2l6ZTogMmVtO1xuICBtYXJnaW46IDAuNjdlbSAwO1xufVxuXG4vKipcbiAqIEFkZHJlc3Mgc3R5bGluZyBub3QgcHJlc2VudCBpbiBJRSA4LzkuXG4gKi9cblxubWFyayB7XG4gIGJhY2tncm91bmQ6ICNmZjA7XG4gIGNvbG9yOiAjMDAwO1xufVxuXG4vKipcbiAqIEFkZHJlc3MgaW5jb25zaXN0ZW50IGFuZCB2YXJpYWJsZSBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbnNtYWxsIHtcbiAgZm9udC1zaXplOiA4MCU7XG59XG5cbi8qKlxuICogUHJldmVudCBgc3ViYCBhbmQgYHN1cGAgYWZmZWN0aW5nIGBsaW5lLWhlaWdodGAgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbnN1YixcbnN1cCB7XG4gIGZvbnQtc2l6ZTogNzUlO1xuICBsaW5lLWhlaWdodDogMDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5cbnN1cCB7XG4gIHRvcDogLTAuNWVtO1xufVxuXG5zdWIge1xuICBib3R0b206IC0wLjI1ZW07XG59XG5cbi8qIEVtYmVkZGVkIGNvbnRlbnRcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogUmVtb3ZlIGJvcmRlciB3aGVuIGluc2lkZSBgYWAgZWxlbWVudCBpbiBJRSA4LzkvMTAuXG4gKi9cblxuaW1nIHtcbiAgYm9yZGVyOiAwO1xufVxuXG4vKipcbiAqIENvcnJlY3Qgb3ZlcmZsb3cgbm90IGhpZGRlbiBpbiBJRSA5LzEwLzExLlxuICovXG5cbnN2Zzpub3QoOnJvb3QpIHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuLyogR3JvdXBpbmcgY29udGVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBBZGRyZXNzIG1hcmdpbiBub3QgcHJlc2VudCBpbiBJRSA4LzkgYW5kIFNhZmFyaS5cbiAqL1xuXG5maWd1cmUge1xuICBtYXJnaW46IDFlbSA0MHB4O1xufVxuXG4vKipcbiAqIEFkZHJlc3MgZGlmZmVyZW5jZXMgYmV0d2VlbiBGaXJlZm94IGFuZCBvdGhlciBicm93c2Vycy5cbiAqL1xuXG5ociB7XG4gIC1tb3otYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICBoZWlnaHQ6IDA7XG59XG5cbi8qKlxuICogQ29udGFpbiBvdmVyZmxvdyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxucHJlIHtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG5cbi8qKlxuICogQWRkcmVzcyBvZGQgYGVtYC11bml0IGZvbnQgc2l6ZSByZW5kZXJpbmcgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbmNvZGUsXG5rYmQsXG5wcmUsXG5zYW1wIHtcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlO1xuICBmb250LXNpemU6IDFlbTtcbn1cblxuLyogRm9ybXNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogS25vd24gbGltaXRhdGlvbjogYnkgZGVmYXVsdCwgQ2hyb21lIGFuZCBTYWZhcmkgb24gT1MgWCBhbGxvdyB2ZXJ5IGxpbWl0ZWRcbiAqIHN0eWxpbmcgb2YgYHNlbGVjdGAsIHVubGVzcyBhIGBib3JkZXJgIHByb3BlcnR5IGlzIHNldC5cbiAqL1xuXG4vKipcbiAqIDEuIENvcnJlY3QgY29sb3Igbm90IGJlaW5nIGluaGVyaXRlZC5cbiAqICAgIEtub3duIGlzc3VlOiBhZmZlY3RzIGNvbG9yIG9mIGRpc2FibGVkIGVsZW1lbnRzLlxuICogMi4gQ29ycmVjdCBmb250IHByb3BlcnRpZXMgbm90IGJlaW5nIGluaGVyaXRlZC5cbiAqIDMuIEFkZHJlc3MgbWFyZ2lucyBzZXQgZGlmZmVyZW50bHkgaW4gRmlyZWZveCA0KywgU2FmYXJpLCBhbmQgQ2hyb21lLlxuICovXG5cbmJ1dHRvbixcbmlucHV0LFxub3B0Z3JvdXAsXG5zZWxlY3QsXG50ZXh0YXJlYSB7XG4gIGNvbG9yOiBpbmhlcml0OyAvKiAxICovXG4gIGZvbnQ6IGluaGVyaXQ7IC8qIDIgKi9cbiAgbWFyZ2luOiAwOyAvKiAzICovXG59XG5cbi8qKlxuICogQWRkcmVzcyBgb3ZlcmZsb3dgIHNldCB0byBgaGlkZGVuYCBpbiBJRSA4LzkvMTAvMTEuXG4gKi9cblxuYnV0dG9uIHtcbiAgb3ZlcmZsb3c6IHZpc2libGU7XG59XG5cbi8qKlxuICogQWRkcmVzcyBpbmNvbnNpc3RlbnQgYHRleHQtdHJhbnNmb3JtYCBpbmhlcml0YW5jZSBmb3IgYGJ1dHRvbmAgYW5kIGBzZWxlY3RgLlxuICogQWxsIG90aGVyIGZvcm0gY29udHJvbCBlbGVtZW50cyBkbyBub3QgaW5oZXJpdCBgdGV4dC10cmFuc2Zvcm1gIHZhbHVlcy5cbiAqIENvcnJlY3QgYGJ1dHRvbmAgc3R5bGUgaW5oZXJpdGFuY2UgaW4gRmlyZWZveCwgSUUgOC85LzEwLzExLCBhbmQgT3BlcmEuXG4gKiBDb3JyZWN0IGBzZWxlY3RgIHN0eWxlIGluaGVyaXRhbmNlIGluIEZpcmVmb3guXG4gKi9cblxuYnV0dG9uLFxuc2VsZWN0IHtcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG59XG5cbi8qKlxuICogMS4gQXZvaWQgdGhlIFdlYktpdCBidWcgaW4gQW5kcm9pZCA0LjAuKiB3aGVyZSAoMikgZGVzdHJveXMgbmF0aXZlIGBhdWRpb2BcbiAqICAgIGFuZCBgdmlkZW9gIGNvbnRyb2xzLlxuICogMi4gQ29ycmVjdCBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIGBpbnB1dGAgdHlwZXMgaW4gaU9TLlxuICogMy4gSW1wcm92ZSB1c2FiaWxpdHkgYW5kIGNvbnNpc3RlbmN5IG9mIGN1cnNvciBzdHlsZSBiZXR3ZWVuIGltYWdlLXR5cGVcbiAqICAgIGBpbnB1dGAgYW5kIG90aGVycy5cbiAqL1xuXG5idXR0b24sXG5odG1sIGlucHV0W3R5cGU9XCJidXR0b25cIl0sIC8qIDEgKi9cbmlucHV0W3R5cGU9XCJyZXNldFwiXSxcbmlucHV0W3R5cGU9XCJzdWJtaXRcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgLyogMiAqL1xuICBjdXJzb3I6IHBvaW50ZXI7IC8qIDMgKi9cbn1cblxuLyoqXG4gKiBSZS1zZXQgZGVmYXVsdCBjdXJzb3IgZm9yIGRpc2FibGVkIGVsZW1lbnRzLlxuICovXG5cbmJ1dHRvbltkaXNhYmxlZF0sXG5odG1sIGlucHV0W2Rpc2FibGVkXSB7XG4gIGN1cnNvcjogZGVmYXVsdDtcbn1cblxuLyoqXG4gKiBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgYm9yZGVyIGluIEZpcmVmb3ggNCsuXG4gKi9cblxuYnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFxuaW5wdXQ6Oi1tb3otZm9jdXMtaW5uZXIge1xuICBib3JkZXI6IDA7XG4gIHBhZGRpbmc6IDA7XG59XG5cbi8qKlxuICogQWRkcmVzcyBGaXJlZm94IDQrIHNldHRpbmcgYGxpbmUtaGVpZ2h0YCBvbiBgaW5wdXRgIHVzaW5nIGAhaW1wb3J0YW50YCBpblxuICogdGhlIFVBIHN0eWxlc2hlZXQuXG4gKi9cblxuaW5wdXQge1xuICBsaW5lLWhlaWdodDogbm9ybWFsO1xufVxuXG4vKipcbiAqIEl0J3MgcmVjb21tZW5kZWQgdGhhdCB5b3UgZG9uJ3QgYXR0ZW1wdCB0byBzdHlsZSB0aGVzZSBlbGVtZW50cy5cbiAqIEZpcmVmb3gncyBpbXBsZW1lbnRhdGlvbiBkb2Vzbid0IHJlc3BlY3QgYm94LXNpemluZywgcGFkZGluZywgb3Igd2lkdGguXG4gKlxuICogMS4gQWRkcmVzcyBib3ggc2l6aW5nIHNldCB0byBgY29udGVudC1ib3hgIGluIElFIDgvOS8xMC5cbiAqIDIuIFJlbW92ZSBleGNlc3MgcGFkZGluZyBpbiBJRSA4LzkvMTAuXG4gKi9cblxuaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdLFxuaW5wdXRbdHlwZT1cInJhZGlvXCJdIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogMSAqL1xuICBwYWRkaW5nOiAwOyAvKiAyICovXG59XG5cbi8qKlxuICogRml4IHRoZSBjdXJzb3Igc3R5bGUgZm9yIENocm9tZSdzIGluY3JlbWVudC9kZWNyZW1lbnQgYnV0dG9ucy4gRm9yIGNlcnRhaW5cbiAqIGBmb250LXNpemVgIHZhbHVlcyBvZiB0aGUgYGlucHV0YCwgaXQgY2F1c2VzIHRoZSBjdXJzb3Igc3R5bGUgb2YgdGhlXG4gKiBkZWNyZW1lbnQgYnV0dG9uIHRvIGNoYW5nZSBmcm9tIGBkZWZhdWx0YCB0byBgdGV4dGAuXG4gKi9cblxuaW5wdXRbdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixcbmlucHV0W3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xuICBoZWlnaHQ6IGF1dG87XG59XG5cbi8qKlxuICogMS4gQWRkcmVzcyBgYXBwZWFyYW5jZWAgc2V0IHRvIGBzZWFyY2hmaWVsZGAgaW4gU2FmYXJpIGFuZCBDaHJvbWUuXG4gKiAyLiBBZGRyZXNzIGBib3gtc2l6aW5nYCBzZXQgdG8gYGJvcmRlci1ib3hgIGluIFNhZmFyaSBhbmQgQ2hyb21lXG4gKiAgICAoaW5jbHVkZSBgLW1vemAgdG8gZnV0dXJlLXByb29mKS5cbiAqL1xuXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7IC8qIDEgKi9cbiAgLW1vei1ib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBjb250ZW50LWJveDsgLyogMiAqL1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbn1cblxuLyoqXG4gKiBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgc2VhcmNoIGNhbmNlbCBidXR0b24gaW4gU2FmYXJpIGFuZCBDaHJvbWUgb24gT1MgWC5cbiAqIFNhZmFyaSAoYnV0IG5vdCBDaHJvbWUpIGNsaXBzIHRoZSBjYW5jZWwgYnV0dG9uIHdoZW4gdGhlIHNlYXJjaCBpbnB1dCBoYXNcbiAqIHBhZGRpbmcgKGFuZCBgdGV4dGZpZWxkYCBhcHBlYXJhbmNlKS5cbiAqL1xuXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLFxuaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbn1cblxuLyoqXG4gKiBEZWZpbmUgY29uc2lzdGVudCBib3JkZXIsIG1hcmdpbiwgYW5kIHBhZGRpbmcuXG4gKi9cblxuZmllbGRzZXQge1xuICBib3JkZXI6IDFweCBzb2xpZCAjYzBjMGMwO1xuICBtYXJnaW46IDAgMnB4O1xuICBwYWRkaW5nOiAwLjM1ZW0gMC42MjVlbSAwLjc1ZW07XG59XG5cbi8qKlxuICogMS4gQ29ycmVjdCBgY29sb3JgIG5vdCBiZWluZyBpbmhlcml0ZWQgaW4gSUUgOC85LzEwLzExLlxuICogMi4gUmVtb3ZlIHBhZGRpbmcgc28gcGVvcGxlIGFyZW4ndCBjYXVnaHQgb3V0IGlmIHRoZXkgemVybyBvdXQgZmllbGRzZXRzLlxuICovXG5cbmxlZ2VuZCB7XG4gIGJvcmRlcjogMDsgLyogMSAqL1xuICBwYWRkaW5nOiAwOyAvKiAyICovXG59XG5cbi8qKlxuICogUmVtb3ZlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFIDgvOS8xMC8xMS5cbiAqL1xuXG50ZXh0YXJlYSB7XG4gIG92ZXJmbG93OiBhdXRvO1xufVxuXG4vKipcbiAqIERvbid0IGluaGVyaXQgdGhlIGBmb250LXdlaWdodGAgKGFwcGxpZWQgYnkgYSBydWxlIGFib3ZlKS5cbiAqIE5PVEU6IHRoZSBkZWZhdWx0IGNhbm5vdCBzYWZlbHkgYmUgY2hhbmdlZCBpbiBDaHJvbWUgYW5kIFNhZmFyaSBvbiBPUyBYLlxuICovXG5cbm9wdGdyb3VwIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi8qIFRhYmxlc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBSZW1vdmUgbW9zdCBzcGFjaW5nIGJldHdlZW4gdGFibGUgY2VsbHMuXG4gKi9cblxudGFibGUge1xuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICBib3JkZXItc3BhY2luZzogMDtcbn1cblxudGQsXG50aCB7XG4gIHBhZGRpbmc6IDA7XG59XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxyXG4gICAgJExBWU9VVFxyXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5cclxuaHRtbCB7XHJcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG59XHJcbiosXHJcbio6YmVmb3JlLFxyXG4qOmFmdGVyIHtcclxuICAgIGJveC1zaXppbmc6IGluaGVyaXQ7XHJcbn1cclxuXHJcbmJvZHkge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHdoaXRlO1xyXG4gICAgY29sb3I6ICR0ZXh0LWNvbG9yO1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgZm9udDogNDAwIG5vcm1hbCAjeyRiYXNlLWZvbnQtc2l6ZX0vMS44NzVlbSAkcHJpbWFyeS1mb250LXN0YWNrO1xyXG4gICAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTtcclxuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xyXG59XHJcblxyXG4ud3JhcCB7XHJcbiAgICB3aWR0aDogYXV0bztcclxuICAgIG1heC13aWR0aDogJG1heC13cmFwcGVyLXdpZHRoO1xyXG4gICAgcGFkZGluZy1yaWdodDogJHdyYXBwZXItcGFkZGluZztcclxuICAgIHBhZGRpbmctbGVmdDogICR3cmFwcGVyLXBhZGRpbmc7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XHJcbiAgICBtYXJnaW4tbGVmdDogIGF1dG87XHJcbn1cclxuLmNsZWFyIHtcclxuICAgIGNsZWFyOiBib3RoO1xyXG4gICAgem9vbTogMTtcclxuICAgICY6YmVmb3JlLFxyXG4gICAgJjphZnRlciB7XHJcbiAgICAgICAgY29udGVudDogXCJcIjtcclxuICAgICAgICBkaXNwbGF5OiB0YWJsZTtcclxuICAgIH1cclxuICAgICY6YWZ0ZXIge1xyXG4gICAgICAgIGNsZWFyOiBib3RoO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQWxsb3cgZm9yIGZpeGVkLXdpZHRoIGNvbnRlbnRcclxuICovXHJcbi5maXhlZC13aWR0aCB7XHJcbiAgICB3aWR0aDogJG1heC13cmFwcGVyLXdpZHRoO1xyXG59XHJcblxyXG4vKipcclxuICogSGlkZSB0aGluZ3MuLi4g4oCZbnVmZiBzYWlkXHJcbiAqL1xyXG4uaGlkZGVuIHtcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbn1cclxuXHJcbi8vIFdl4oCZcmUgZ29pbuKAmSB1cCBhcm91bmQgdGhlIGJlbmRcclxuJXJvdW5kZWQge1xyXG4gICAgYmFja2dyb3VuZC1jbGlwOiBwYWRkaW5nLWJveDtcclxuICAgIGJvcmRlci1yYWRpdXM6IC4zNzVlbTtcclxufVxyXG5cclxuLy8gTm9uLXNlbGVjdGFibGUgc3R1ZmZcclxuJW5vbi1zZWxlY3RhYmxlIHtcclxuICAgIHVzZXItc2VsZWN0OiBub25lO1xyXG4gICAgLXdlYmtpdC10b3VjaC1jYWxsb3V0OiBub25lO1xyXG59XHJcbiIsIi8vXHJcbi8vIFNDU1MgJHZhcmlhYmxlc1xyXG4vL1xyXG5cclxuLy8vIFdyYXBwZXIgYW5kIEBtZWRpYSAkdmFyaWFibGVzXHJcbiR3cmFwcGVyLXBhZGRpbmc6ICAgICAgMS4yNXJlbSAgIWRlZmF1bHQ7XHJcbiRtYXgtd3JhcHBlci13aWR0aDogICAgMTE0MHB4ICAgIWRlZmF1bHQ7XHJcbiRtZWRpdW0td3JhcHBlci13aWR0aDogIDc2OHB4ICAgIWRlZmF1bHQ7XHJcbiRzbWFsbC13cmFwcGVyLXdpZHRoOiAgIDUwMHB4ICAgIWRlZmF1bHQ7XHJcbiRicmVha3BvaW50czogIChcclxuICAgIFwibGFyZ2VcIjogICAkbWF4LXdyYXBwZXItd2lkdGgsXHJcbiAgICBcIm1lZGl1bVwiOiAgJG1lZGl1bS13cmFwcGVyLXdpZHRoLFxyXG4gICAgXCJzbWFsbFwiOiAgICRzbWFsbC13cmFwcGVyLXdpZHRoXHJcbikgICFkZWZhdWx0OyAvLyBvdmVyd3JpdGUgaW5jbHVkZS1tZWRpYS5zY3NzXHJcblxyXG4vLy8gTGF5b3V0ICR2YXJpYWJsZXNcclxuJGRlZmF1bHQtbWFyZ2luOiAgICR3cmFwcGVyLXBhZGRpbmcgICFkZWZhdWx0O1xyXG4kZGVmYXVsdC1wYWRkaW5nOiAgMi4yNXJlbSAgICAgICAgICAgIWRlZmF1bHQ7XHJcbiRkZWZhdWx0LWJvcmRlcjogICAwLjI1cmVtICAgICAgICAgICAhZGVmYXVsdDtcclxuJGFzaWRlLXdpZHRoOiAgICAxNS44NzVyZW0gICAgICAgICAgICFkZWZhdWx0O1xyXG5cclxuLy8vIEZvbnQgU3RhY2tzXHJcbiRiYXNlLWZvbnQtc2l6ZTogICAgICAgIDE2cHggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIWRlZmF1bHQ7XHJcbiRwcmltYXJ5LWZvbnQtc3RhY2s6ICAgIFwiZmYtbWV0YS1zZXJpZi13ZWItcHJvXCIsIEdlb3JnaWEsIHNlcmlmICAgICAhZGVmYXVsdDtcclxuJHNlY29uZGFyeS1mb250LXN0YWNrOiAgXCJwcm94aW1hLW5vdmFcIiwgc2Fucy1zZXJpZiAgICAgICAgICAgICAgICAgICFkZWZhdWx0O1xyXG4kaGVhZGluZy1mb250LXN0YWNrOiAgICBcImxlYWd1ZS1nb3RoaWNcIiwgSW1wYWN0LCBzYW5zLXNlcmlmICAgICAgICAgIWRlZmF1bHQ7XHJcbiRjb2RlLWZvbnQtc3RhY2s6ICAgICAgIENvbnNvbGFzLCBNb25hY28sIFwiQ291cmllciBOZXdcIiwgbW9ub3NwYWNlICAhZGVmYXVsdDtcclxuXHJcbi8vLyBPcGFjaXR5ICR2YXJpYWJsZXNcclxuJG9wYWNpdHktbG93OiAgICAgIDAuMTAgICFkZWZhdWx0O1xyXG4kb3BhY2l0eS1tZWRpdW06ICAgMC4yNSAgIWRlZmF1bHQ7XHJcbiRvcGFjaXR5LWhpZ2g6ICAgICAwLjcwICAhZGVmYXVsdDtcclxuXHJcbi8vLyBDb2xvciAkdmFyaWFibGVzXHJcbiRibHVlOiAgICAgICAgICAgICAgIzVGOEFBNiAgICAgICAgICAgICAgICAgICAgICAgICAgICFkZWZhdWx0O1xyXG4kdGV4dC1jb2xvcjogICAgICAgICM0RjRGNEYgICAgICAgICAgICAgICAgICAgICAgICAgICAhZGVmYXVsdDtcclxuJHRleHQtY29sb3ItYWx0OiAgICAjNzM3MzczICAgICAgICAgICAgICAgICAgICAgICAgICAgIWRlZmF1bHQ7XHJcbiR0ZXh0LWNvbG9yLWxpZ2h0OiAgI0RERERERCAgICAgICAgICAgICAgICAgICAgICAgICAgICFkZWZhdWx0O1xyXG4kd2hpdGU6ICAgICAgICAgICAgICNGOUY5RjkgICAgICAgICAgICAgICAgICAgICAgICAgICAhZGVmYXVsdDtcclxuJGJsYWNrOiAgICAgICAgICAgICAjMDYwNjA2ICAgICAgICAgICAgICAgICAgICAgICAgICAgIWRlZmF1bHQ7XHJcbiRibGFjay1saWdodDogICAgICAgcmdiYSgkYmxhY2ssICgkb3BhY2l0eS1sb3cgLyAyKSkgICFkZWZhdWx0O1xyXG4kYmxhY2stbWVkaXVtOiAgICAgIHJnYmEoJGJsYWNrLCAkb3BhY2l0eS1sb3cpICAgICAgICAhZGVmYXVsdDtcclxuJGJsYWNrLWRhcms6ICAgICAgICByZ2JhKCRibGFjaywgJG9wYWNpdHktbWVkaXVtKSAgICAgIWRlZmF1bHQ7XHJcblxyXG4vLy8gSWNvbiAkdmFyaWFibGVzXHJcbiRpY29uLXNpemU6ICA0MHB4ICAhZGVmYXVsdDtcclxuXHJcbi8vLyBCcmFuZHMgJHZhcmlhYmxlc1xyXG4kY29kZXBlbi1jb2xvcjogICMyMTIxMjEgICAgICAgICAgICAgICAhZGVmYXVsdDtcclxuJGdpdGh1Yi1jb2xvcjogICAjMzMzMzMzICAgICAgICAgICAgICAgIWRlZmF1bHQ7XHJcbiRsYXN0Zm0tY29sb3I6ICAgI0UzMUIyMyAgICAgICAgICAgICAgICFkZWZhdWx0O1xyXG4kdHdpdHRlci1jb2xvcjogIGRhcmtlbigjNTVBQ0VFLCAxMCUpICAhZGVmYXVsdDtcclxuLy8vIENyZWF0ZSBCcmFuZHMgQXJyYXkgKG5hbWUsICBjb2xvdXIsICBpY29uIHdpZHRoOmhlaWdodCByYXRpbylcclxuJGJyYW5kczogIGNvZGVwZW4gICRjb2RlcGVuLWNvbG9yICAxLjAyNSxcclxuICAgICAgICAgIGdpdGh1YiAgICRnaXRodWItY29sb3IgICAwLjk1MCxcclxuICAgICAgICAgIGxhc3RmbSAgICRsYXN0Zm0tY29sb3IgICAxLjAwMCxcclxuICAgICAgICAgIHJzcyAgICAgICRibHVlICAgICAgICAgICAwLjc3NSxcclxuICAgICAgICAgIHR3aXR0ZXIgICR0d2l0dGVyLWNvbG9yICAwLjkyNSxcclxuICAgICAgICAgIGFydGljbGUgICRibHVlICAgICAgICAgICAwLjkwMCxcclxuICAgICAgICAgIGZlYXRoZXIgICRibHVlICAgICAgICAgICAwLjcyNSxcclxuICAgICAgICAgIGhlYXJ0ICAgICRibHVlICAgICAgICAgICAxLjAwMCxcclxuICAgICAgICAgIHRhZyAgICAgICRibHVlICAgICAgICAgICAxLjAwMDtcclxuXHJcbi8vLyBDb2RpbmcgTGFuZ3VhZ2UgJHZhcmlhYmxlc1xyXG4kY3NzLWNvbG9yOiAgICAgICAgICMwMTZGQkEgICAgICAhZGVmYXVsdDtcclxuJGh0bWwtY29sb3I6ICAgICAgICAjRTU0RDI2ICAgICAgIWRlZmF1bHQ7XHJcbiRoYW1sLWNvbG9yOiAgICAgICAgJGh0bWwtY29sb3IgICFkZWZhdWx0O1xyXG4kamF2YXNjcmlwdC1jb2xvcjogICNGMUM1NEMgICAgICAhZGVmYXVsdDtcclxuJHNhc3MtY29sb3I6ICAgICAgICAjQzY1MzhDICAgICAgIWRlZmF1bHQ7XHJcbiRzY3NzLWNvbG9yOiAgICAgICAgJHNhc3MtY29sb3IgICFkZWZhdWx0O1xyXG4vLy8gQ3JlYXRlIENvZGluZyBMYW5ndWFnZXMgQXJyYXkgKG5hbWUsICBjb2xvdXIpXHJcbiRjb2RpbmctbGFuZ3VhZ2VzOiAgY3NzICAgICAgICAgJGNzcy1jb2xvcixcclxuICAgICAgICAgICAgICAgICAgICBoYW1sICAgICAgICAkaGFtbC1jb2xvcixcclxuICAgICAgICAgICAgICAgICAgICBodG1sICAgICAgICAkaHRtbC1jb2xvcixcclxuICAgICAgICAgICAgICAgICAgICBqYXZhc2NyaXB0ICAkamF2YXNjcmlwdC1jb2xvcixcclxuICAgICAgICAgICAgICAgICAgICBzYXNzICAgICAgICAkc2Fzcy1jb2xvcixcclxuICAgICAgICAgICAgICAgICAgICBzY3NzICAgICAgICAkc2Nzcy1jb2xvcjtcclxuXHJcbi8vLyBGb250IFN0YWNrc1xyXG4kYmFzZS1mb250LXNpemU6ICAgICAgICAxNnB4ICFkZWZhdWx0O1xyXG4kcHJpbWFyeS1mb250LXN0YWNrOiAgICBcImZmLW1ldGEtc2VyaWYtd2ViLXByb1wiLCBHZW9yZ2lhLCBzZXJpZiAgICAgIWRlZmF1bHQ7XHJcbiRzZWNvbmRhcnktZm9udC1zdGFjazogIFwicHJveGltYS1ub3ZhXCIsIHNhbnMtc2VyaWYgICAgICAgICAgICAgICAgICAhZGVmYXVsdDtcclxuJGhlYWRpbmctZm9udC1zdGFjazogICAgXCJsZWFndWUtZ290aGljXCIsIEltcGFjdCwgc2Fucy1zZXJpZiAgICAgICAgICFkZWZhdWx0O1xyXG4kY29kZS1mb250LXN0YWNrOiAgICAgICBDb25zb2xhcywgTW9uYWNvLCBcIkNvdXJpZXIgTmV3XCIsIG1vbm9zcGFjZSAgIWRlZmF1bHQ7XHJcblxyXG4vLy8gVHJhbnNpdGlvbiAkdmFyaWFibGVzXHJcbiR0cmFuc2l0aW9uLXRpbWU6ICAgICAgMC4ycyAgIWRlZmF1bHQ7XHJcbiR0cmFuc2l0aW9uLWZ1bmN0aW9uOiAgZWFzZSAgIWRlZmF1bHQ7XHJcblxyXG5cclxuLy9cclxuLy8gU0NTUyBAbWl4aW5zXHJcbi8vXHJcblxyXG4vLy8gTGluZWFyIEdyYWRpZW50XHJcbkBtaXhpbiBncmFkaWVudCgkdG9wLCAkYm90dG9tKSB7XHJcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gYm90dG9tLCAjeyR0b3B9IDAlLCAjeyRib3R0b219IDEwMCUpO1xyXG59XHJcblxyXG4vLy8gVHJhbnNpdGlvblxyXG5AbWl4aW4gdHJhbnNpdGlvbigkdmFsdWVzLi4uKSB7XHJcbiAgICBAaWYoIGxlbmd0aCgkdmFsdWVzKSA9PSAwICkge1xyXG4gICAgICAgICR2YWx1ZXM6IGFsbCAjeyR0cmFuc2l0aW9uLXRpbWV9ICN7JHRyYW5zaXRpb24tZnVuY3Rpb259O1xyXG4gICAgfVxyXG4gICAgQGVsc2UgaWYoIHN0ci1pbmRleChcIlwiKyR2YWx1ZXMrXCJcIiwgXCIgXCIpID09IG51bGwgYW5kICR2YWx1ZXMgIT0gXCJub25lXCIgKSB7XHJcbiAgICAgICAgJHZhbHVlczogI3skdmFsdWVzfSAjeyR0cmFuc2l0aW9uLXRpbWV9ICN7JHRyYW5zaXRpb24tZnVuY3Rpb259O1xyXG4gICAgfVxyXG4gICAgdHJhbnNpdGlvbjogI3skdmFsdWVzfTtcclxufVxyXG5cclxuLy8vIFRyYW5zbGF0ZTNEXHJcbkBtaXhpbiB0cmFuc2xhdGUzZCgkdmFsdWVzLi4uKSB7XHJcbiAgICBAaWYoIGxlbmd0aCgkdmFsdWVzKSA9PSAwICkge1xyXG4gICAgICAgICR2YWx1ZXM6IDAsIDAsIDA7XHJcbiAgICB9XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKCN7JHZhbHVlc30pO1xyXG59XHJcblxyXG4vLy8gQW5pbWF0aW9uXHJcbkBtaXhpbiBhbmltYXRpb24oJHZhbHVlcy4uLikge1xyXG4gICAgYW5pbWF0aW9uOiAjeyR2YWx1ZXN9O1xyXG59XHJcblxyXG4vLy8gQW5pbWF0aW9uIFBsYXkgU3RhdGVcclxuQG1peGluIGFuaW1hdGlvbi1wbGF5LXN0YXRlKCR2YWx1ZXMuLi4pIHtcclxuICAgIGFuaW1hdGlvbi1wbGF5LXN0YXRlOiAjeyR2YWx1ZXN9O1xyXG59XHJcblxyXG4vLy8gWi1pbmRleCBNYW5hZ2VtZW50XHJcbkBtaXhpbiB6LWluZGV4KCR2YWx1ZXMuLi4pIHtcclxuICAgIEBpZiggI3skdmFsdWVzfSA9PSBcImJlbG93XCIgKSB7XHJcbiAgICAgICAgJHZhbHVlczogLTE7XHJcbiAgICB9XHJcbiAgICBAZWxzZSBpZiggI3skdmFsdWVzfSA9PSBcImFib3ZlXCIgKSB7XHJcbiAgICAgICAgJHZhbHVlczogMTtcclxuICAgIH1cclxuICAgIHotaW5kZXg6ICN7JHZhbHVlc307XHJcbn1cclxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkVFlQT0dSQVBIWVxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiB7XG4gICAgbWluLWhlaWdodDogMS4yZW07IC8vIHNvIHRoYXQgZWxlbWVudHMgY2FuIGJlIGZsb2F0ZWQgaW5zaWRlIGhlYWRpbmdzXG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICBsaW5lLWhlaWdodDogMS4yZW07XG59XG5oMSB7XG4gICAgZm9udC1mYW1pbHk6ICRoZWFkaW5nLWZvbnQtc3RhY2s7XG4gICAgZm9udC1zaXplOiAyLjYyNWVtO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgdGV4dC1zaGFkb3c6IC4wNzE0ZW0gLjA3MTRlbSAwICRibGFjay1saWdodDtcbn1cbmgyIHtcbiAgICBmb250LWZhbWlseTogJHByaW1hcnktZm9udC1zdGFjaztcbiAgICBmb250LXNpemU6IDEuNjI1ZW07XG59XG5oMyxcbmg0LFxuLmFydGljbGVzLWxpc3QgLmFydGljbGUtZGF0ZSB7XG4gICAgZm9udC1mYW1pbHk6ICRzZWNvbmRhcnktZm9udC1zdGFjaztcbiAgICBmb250LXdlaWdodDogNjAwO1xufVxuaDMsXG4uYXJ0aWNsZXMtbGlzdCAuYXJ0aWNsZS1kYXRlIHtcbiAgICBmb250LXNpemU6IDEuMTI1ZW07XG4gICAgbGluZS1oZWlnaHQ6IDEuODc1ZW07XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbn1cbmgzIHtcbiAgICBtYXJnaW4tdG9wOiAuNWVtO1xuICAgIGJvcmRlci1ib3R0b206IC4xMjVlbSBzb2xpZCAkdGV4dC1jb2xvci1saWdodDtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgJjpub3QoOmxhc3QtY2hpbGQpIHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogJGRlZmF1bHQtbWFyZ2luO1xuICAgIH1cbn1cbmg0IHtcbiAgICBtYXJnaW4tYm90dG9tOiAuNWVtO1xufVxuXG5hIHtcbiAgICBjb2xvcjogJGJsdWU7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgIEBpbmNsdWRlIHRyYW5zaXRpb24oYmFja2dyb3VuZCAkdHJhbnNpdGlvbi10aW1lICR0cmFuc2l0aW9uLWZ1bmN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3IgICAgICAkdHJhbnNpdGlvbi10aW1lICR0cmFuc2l0aW9uLWZ1bmN0aW9uKTtcbiAgICAmOmhvdmVyLFxuICAgICY6Zm9jdXMsXG4gICAgJjphY3RpdmUge1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgICB9XG4gICAgaDIgJixcbiAgICBoMyAmIHtcbiAgICAgICAgY29sb3I6ICR0ZXh0LWNvbG9yO1xuICAgICAgICAmOmhvdmVyLFxuICAgICAgICAmOmZvY3VzLFxuICAgICAgICAmOmFjdGl2ZSB7XG4gICAgICAgICAgICBjb2xvcjogJGJsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3Bhbjpub3QoW2NsYXNzXSkge1xuICAgICAgICB3aWR0aDogIDFweDtcbiAgICAgICAgaGVpZ2h0OiAxcHg7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB9XG59XG4gICAgLmhlYWRpbmctYW5jaG9yIHtcbiAgICAgICAgY29sb3I6ICR0ZXh0LWNvbG9yLWFsdDtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAxZW07XG4gICAgICAgIGZvbnQtZmFtaWx5OiAkY29kZS1mb250LXN0YWNrO1xuICAgICAgICBmb250LXNpemU6IC44MTI1cmVtO1xuICAgICAgICBmb250LXdlaWdodDogNjAwO1xuICAgICAgICBsaW5lLWhlaWdodDogMS44NzVlbTtcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IGxvd2VyY2FzZTtcbiAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICAgICAgOmhvdmVyID4gJixcbiAgICAgICAgOmZvY3VzID4gJixcbiAgICAgICAgOmFjdGl2ZSA+ICYge1xuICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICB9XG4gICAgICAgIGgxICYge1xuICAgICAgICAgICAgdGV4dC1zaGFkb3c6IG5vbmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQnJhbmQgTGluayBDb2xvdXJzXG4gICAgICovXG4gICAgQGVhY2ggJGJyYW5kIGluICRicmFuZHMge1xuICAgICAgICAkbmFtZTogIG50aCgkYnJhbmQsIDEpO1xuICAgICAgICAkY29sb3I6IG50aCgkYnJhbmQsIDIpO1xuICAgICAgICAuI3skbmFtZX0tbGluayB7XG4gICAgICAgICAgICBjb2xvcjogI3skY29sb3J9ICFpbXBvcnRhbnQ7XG4gICAgICAgIH1cbiAgICB9XG5cbnAge1xuICAgIG1hcmdpbjogMDtcbiAgICAmOm5vdCg6bGFzdC1jaGlsZCkge1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAkZGVmYXVsdC1tYXJnaW47XG4gICAgfVxuICAgICY6ZW1wdHkge1xuICAgICAgICBAZXh0ZW5kIC5oaWRkZW47XG4gICAgfVxufVxuXG5vbCxcbnVsIHtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogMDtcbiAgICBsaXN0LXN0eWxlOiBub25lO1xufVxub2w6bm90KFtjbGFzc10pLFxudWw6bm90KFtjbGFzc10pLFxuLmRlZmF1bHQtbGlzdCB7XG4gICAgbGkge1xuICAgICAgICBwYWRkaW5nLWxlZnQ6IDJlbTtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMWVtO1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICY6YmVmb3JlIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgIHRvcDogMDtcbiAgICAgICAgICAgIGxlZnQ6IDA7XG4gICAgICAgICAgICBmb250LWZhbWlseTogJHNlY29uZGFyeS1mb250LXN0YWNrO1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvbDpub3QoW2NsYXNzXSksXG4gICAgdWw6bm90KFtjbGFzc10pLFxuICAgIC5kZWZhdWx0LWxpc3Qge1xuICAgICAgICBtYXJnaW4tdG9wOiAxZW07XG4gICAgfVxufVxub2w6bm90KFtjbGFzc10pLFxub2wuZGVmYXVsdC1saXN0IHtcbiAgICBjb3VudGVyLXJlc2V0OiBvcmRlcmVkLWxpc3Q7XG4gICAgbGkge1xuICAgICAgICBjb3VudGVyLWluY3JlbWVudDogb3JkZXJlZC1saXN0O1xuICAgICAgICAmOmJlZm9yZSB7XG4gICAgICAgICAgICBjb250ZW50OiBjb3VudGVyKG9yZGVyZWQtbGlzdCkgXCIuXCI7XG4gICAgICAgIH1cbiAgICB9XG59XG51bDpub3QoW2NsYXNzXSkgbGk6YmVmb3JlLFxudWwuZGVmYXVsdC1saXN0IGxpOmJlZm9yZSB7XG4gICAgY29udGVudDogXCJcXDIwMjJcIjtcbiAgICBmb250LXNpemU6IDEuNWVtO1xuICAgIGxpbmUtaGVpZ2h0OiAxZW07XG59XG5kbCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgZGlzcGxheTogdGFibGU7XG4gICAgJjpub3QoOmxhc3QtY2hpbGQpIHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogJGRlZmF1bHQtbWFyZ2luO1xuICAgIH1cbiAgICBkdCB7XG4gICAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgICBtaW4td2lkdGg6IDEwZW07XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgcGFkZGluZy1yaWdodDogJGRlZmF1bHQtbWFyZ2luO1xuICAgICAgICBmb250LWZhbWlseTogJHNlY29uZGFyeS1mb250LXN0YWNrO1xuICAgICAgICBmb250LXdlaWdodDogNjAwO1xuICAgICAgICBAaW5jbHVkZSBtZWRpYShcIj5zbWFsbFwiKSB7XG4gICAgICAgICAgICBtaW4td2lkdGg6IDEwZW07XG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAkZGVmYXVsdC1tYXJnaW47XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGQge1xuICAgICAgICB3aWR0aDogJG1heC13cmFwcGVyLXdpZHRoO1xuICAgICAgICBkaXNwbGF5OiB0YWJsZS1jZWxsO1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7XG4gICAgICAgIEBpbmNsdWRlIG1lZGlhKFwiPD1zbWFsbFwiKSB7XG4gICAgICAgICAgICB3aWR0aDogYXV0bztcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6ICRkZWZhdWx0LW1hcmdpbjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuaW1nLFxuYSBpbWcge1xuICAgIHdpZHRoOiBhdXRvO1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IGF1dG87XG59XG5maWd1cmUge1xuICAgIG1hcmdpbjogMCAwIC41ZW07XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICY6bm90KDpsYXN0LWNoaWxkKSB7XG4gICAgICAgIG1hcmdpbi1ib3R0b206ICRkZWZhdWx0LW1hcmdpbjtcbiAgICB9XG4gICAgaW1nLFxuICAgIHN2ZyB7XG4gICAgICAgIEBleHRlbmQgJXJvdW5kZWQ7XG4gICAgfVxufVxuICAgIGZpZ2NhcHRpb24ge1xuICAgICAgICBjb2xvcjogJHRleHQtY29sb3ItYWx0O1xuICAgICAgICBmb250LXN0eWxlOiBpdGFsaWM7XG4gICAgfVxuXG5hYmJyW3RpdGxlXSxcbmJsb2NrcXVvdGUsXG5jaXRlLFxuZGZuW3RpdGxlXSB7XG4gICAgY29sb3I6ICR0ZXh0LWNvbG9yLWFsdDtcbiAgICBmb250LXN0eWxlOiBpdGFsaWM7XG59XG5hYmJyW3RpdGxlXSxcbmRmblt0aXRsZV0ge1xuICAgIGJvcmRlci1ib3R0b206IDFweCBkb3R0ZWQgJHRleHQtY29sb3ItYWx0O1xuICAgIGN1cnNvcjogaGVscDtcbn1cbmlucyB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xufVxuXG5xIHtcbiAgICBmb250LXN0eWxlOiBpdGFsaWM7XG4gICAgcXVvdGVzOiBcIlxcMjAxQ1wiIFwiXFwyMDFEXCIgXCJcXDIwMThcIiBcIlxcMjAxOVwiO1xufVxuYmxvY2txdW90ZSB7XG4gICAgQGV4dGVuZCAlcm91bmRlZDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKCRibHVlLCAkb3BhY2l0eS1sb3cpO1xuICAgIHBhZGRpbmc6IDFlbTtcbiAgICBtYXJnaW46IDAgJGRlZmF1bHQtcGFkZGluZyAxZW07XG4gICAgcXVvdGVzOiBcIlxcMjAxQ1wiIFwiXFwyMDFEXCIgXCJcXDIwMThcIiBcIlxcMjAxOVwiO1xuICAgIEBpbmNsdWRlIG1lZGlhKFwiPD1zbWFsbFwiKSB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMWVtO1xuICAgICAgICBtYXJnaW4tbGVmdDogMWVtO1xuICAgIH1cbiAgICBwIHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMCAhaW1wb3J0YW50O1xuICAgICAgICAmOmJlZm9yZSB7XG4gICAgICAgICAgICBjb250ZW50OiBvcGVuLXF1b3RlO1xuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogLjE4NzVlbTtcbiAgICAgICAgfVxuICAgICAgICAmOmFmdGVyIHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNsb3NlLXF1b3RlO1xuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAuMTg3NWVtO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNpdGUge1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDJlbTtcbiAgICAgICAgbWFyZ2luLXRvcDogMWVtO1xuICAgICAgICAmOmJlZm9yZSB7XG4gICAgICAgICAgICBjb250ZW50OiBcIlxcMjAxM1xcMDBhMFwiO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5ociB7XG4gICAgYmFja2dyb3VuZDogJGJsYWNrLW1lZGl1bTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IC4xMjVlbTtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBib3JkZXI6IDA7XG4gICAgbWFyZ2luOiAuNWVtIDAgJGRlZmF1bHQtbWFyZ2luO1xufVxuXG46OnNlbGVjdGlvbiB7XG4gICAgYmFja2dyb3VuZDogJGJsdWU7XG4gICAgY29sb3I6ICR3aGl0ZTtcbn1cbiIsIi8vICAgICAgIF8gICAgICAgICAgICBfICAgICAgICAgICBfICAgICAgICAgICAgICAgICAgICAgICAgICAgXyBfXG4vLyAgICAgIChfKSAgICAgICAgICB8IHwgICAgICAgICB8IHwgICAgICAgICAgICAgICAgICAgICAgICAgfCAoXylcbi8vICAgICAgIF8gXyBfXyAgIF9fX3wgfF8gICBfICBfX3wgfCBfX18gICBfIF9fIF9fXyAgIF9fXyAgX198IHxfICBfXyBfXG4vLyAgICAgIHwgfCAnXyBcXCAvIF9ffCB8IHwgfCB8LyBfYCB8LyBfIFxcIHwgJ18gYCBfIFxcIC8gXyBcXC8gX2AgfCB8LyBfYCB8XG4vLyAgICAgIHwgfCB8IHwgfCAoX198IHwgfF98IHwgKF98IHwgIF9fLyB8IHwgfCB8IHwgfCAgX18vIChffCB8IHwgKF98IHxcbi8vICAgICAgfF98X3wgfF98XFxfX198X3xcXF9fLF98XFxfXyxffFxcX19ffCB8X3wgfF98IHxffFxcX19ffFxcX18sX3xffFxcX18sX3xcbi8vXG4vLyAgICAgICAgICBTaW1wbGUsIGVsZWdhbnQgYW5kIG1haW50YWluYWJsZSBtZWRpYSBxdWVyaWVzIGluIFNhc3Ncbi8vXG4vLyAgICAgICAgICAgICAgICAgICAgICBodHRwOi8vaW5jbHVkZS1tZWRpYS5jb21cbi8vXG4vLyAgICAgICAgICAgQXV0aG9yOiBFZHVhcmRvIEJvdWNhcyA8bWFpbEBlZHVhcmRvYm91Y2FzLmNvbT5cbi8vXG4vLy9cbi8vLyBDcmVhdGVzIGEgbGlzdCBvZiBnbG9iYWwgYnJlYWtwb2ludHNcbi8vL1xuLy8vIEBhdXRob3IgRWR1YXJkbyBCb3VjYXNcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBDcmVhdGVzIGEgc2luZ2xlIGJyZWFrcG9pbnQgd2l0aCB0aGUgbGFiZWwgYHBob25lYFxuLy8vICAkYnJlYWtwb2ludHM6ICgncGhvbmUnOiAzMjBweCk7XG4vLy9cbi8vLyAkYnJlYWtwb2ludHM6IChcbi8vLyAgICAgJ3Bob25lJzogMzIwcHgsXG4vLy8gICAgICd0YWJsZXQnOiA3NjhweCxcbi8vLyAgICAgJ2Rlc2t0b3AnOiAxMDI0cHhcbi8vLyApICFkZWZhdWx0O1xuXG4vLy9cbi8vLyBDcmVhdGVzIGEgbGlzdCBvZiBzdGF0aWMgZXhwcmVzc2lvbnMgb3IgbWVkaWEgdHlwZXNcbi8vL1xuLy8vIEBhdXRob3IgRWR1YXJkbyBCb3VjYXNcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBDcmVhdGVzIGEgc2luZ2xlIG1lZGlhIHR5cGUgKHNjcmVlbilcbi8vLyAgJG1lZGlhLWV4cHJlc3Npb25zOiAoJ3NjcmVlbic6ICdzY3JlZW4nKTtcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBDcmVhdGVzIGEgc3RhdGljIGV4cHJlc3Npb24gd2l0aCBsb2dpY2FsIGRpc2p1bmN0aW9uIChPUiBvcGVyYXRvcilcbi8vLyAgJG1lZGlhLWV4cHJlc3Npb25zOiAoXG4vLy8gICAgICdyZXRpbmEyeCc6IChcbi8vLyAgICAgICAgICcoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKScsXG4vLy8gICAgICAgICAnKG1pbi1yZXNvbHV0aW9uOiAxOTJkcGkpJ1xuLy8vICAgICApXG4vLy8gKTtcbi8vL1xuJG1lZGlhLWV4cHJlc3Npb25zOiAoXG4gICAgJ3NjcmVlbic6ICdzY3JlZW4nLFxuICAgICdwcmludCc6ICdwcmludCcsXG4gICAgJ2hhbmRoZWxkJzogJ2hhbmRoZWxkJyxcbiAgICAncmV0aW5hMngnOiAoXG4gICAgICAgICcoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKScsXG4gICAgICAgICcobWluLXJlc29sdXRpb246IDE5MmRwaSknXG4gICAgKSxcbiAgICAncmV0aW5hM3gnOiAoXG4gICAgICAgICcoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAzKScsXG4gICAgICAgICcobWluLXJlc29sdXRpb246IDM1MGRwaSknXG4gICAgKVxuKSAhZGVmYXVsdDtcblxuLy8vXG4vLy8gRGVmaW5lcyBhIG51bWJlciB0byBiZSBhZGRlZCBvciBzdWJ0cmFjdGVkIGZyb20gZWFjaCB1bml0IHdoZW4gZGVjbGFyaW5nIGJyZWFrcG9pbnRzIHdpdGggZXhjbHVzaXZlIGludGVydmFsc1xuLy8vXG4vLy8gQGF1dGhvciBFZHVhcmRvIEJvdWNhc1xuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIEludGVydmFsIGZvciBwaXhlbHMgaXMgZGVmaW5lZCBhcyBgMWAgYnkgZGVmYXVsdFxuLy8vICBAaW5jbHVkZSBtZWRpYShcIj4xMjhweFwiKSB7fVxuLy8vXG4vLy8gIC8qIEdlbmVyYXRlczogKi9cbi8vLyAgQG1lZGlhIChtaW4td2lkdGg6IDEyOXB4KSB7fVxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIEludGVydmFsIGZvciBlbXMgaXMgZGVmaW5lZCBhcyBgMC4wMWAgYnkgZGVmYXVsdFxuLy8vICBAaW5jbHVkZSBtZWRpYShcIj4yMGVtXCIpIHt9XG4vLy9cbi8vLyAgLyogR2VuZXJhdGVzOiAqL1xuLy8vICBAbWVkaWEgKG1pbi13aWR0aDogMjAuMDFlbSkge31cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBJbnRlcnZhbCBmb3IgcmVtcyBpcyBkZWZpbmVkIGFzIGAwLjFgIGJ5IGRlZmF1bHQsIHRvIGJlIHVzZWQgd2l0aCBgZm9udC1zaXplOiA2Mi41JTtgXG4vLy8gIEBpbmNsdWRlIG1lZGlhKFwiPjIuMHJlbVwiKSB7fVxuLy8vXG4vLy8gIC8qIEdlbmVyYXRlczogKi9cbi8vLyAgQG1lZGlhIChtaW4td2lkdGg6IDIuMXJlbSkge31cbi8vL1xuJHVuaXQtaW50ZXJ2YWxzOiAoXG4gICAgJ3B4JzogMSxcbiAgICAnZW0nOiAwLjAxLFxuICAgICdyZW0nOiAwLjFcbikgIWRlZmF1bHQ7XG4vLy9cbi8vLyBHZW5lcmF0ZXMgYSBtZWRpYSBxdWVyeSBiYXNlZCBvbiBhIGxpc3Qgb2YgY29uZGl0aW9uc1xuLy8vXG4vLy8gQGF1dGhvciBFZHVhcmRvIEJvdWNhc1xuLy8vXG4vLy8gQHBhcmFtIHtMaXN0fSAgICRjb25kaXRpb25zICAtIE1lZGlhIHF1ZXJ5IGNvbmRpdGlvbnNcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBXaXRoIGEgc2luZ2xlIHNldCBicmVha3BvaW50XG4vLy8gIEBpbmNsdWRlIG1lZGlhKFwiPnBob25lXCIpIHsgfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFdpdGggdHdvIHNldCBicmVha3BvaW50c1xuLy8vICBAaW5jbHVkZSBtZWRpYShcIj5waG9uZVwiLCBcIjw9dGFibGV0XCIpIHsgfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFdpdGggY3VzdG9tIHZhbHVlc1xuLy8vICBAaW5jbHVkZSBtZWRpYShcIj49MzU4cHhcIiwgXCI8ODUwcHhcIikgeyB9XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gV2l0aCBzZXQgYnJlYWtwb2ludHMgd2l0aCBjdXN0b20gdmFsdWVzXG4vLy8gIEBpbmNsdWRlIG1lZGlhKFwiPmRlc2t0b3BcIiwgXCI8PTEzNTBweFwiKSB7IH1cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBXaXRoIGEgc3RhdGljIGV4cHJlc3Npb25cbi8vLyAgQGluY2x1ZGUgbWVkaWEoXCJyZXRpbmEyeFwiKSB7IH1cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBNaXhpbmcgZXZlcnl0aGluZ1xuLy8vICBAaW5jbHVkZSBtZWRpYShcIj49MzUwcHhcIiwgXCI8dGFibGV0XCIsIFwicmV0aW5hM3hcIikgeyB9XG4vLy9cbkBtaXhpbiBtZWRpYSgkY29uZGl0aW9ucy4uLikge1xuICBAZm9yICRpIGZyb20gMSB0aHJvdWdoIGxlbmd0aCgkY29uZGl0aW9ucykge1xuICAgICRjb25kaXRpb25zOiBzZXQtbnRoKCRjb25kaXRpb25zLCAkaSwgcGFyc2UtZXhwcmVzc2lvbihudGgoJGNvbmRpdGlvbnMsICRpKSkpO1xuICB9XG5cbiAgJGJyYW5jaGVzOiBnZXQtcXVlcnktYnJhbmNoZXMoJGNvbmRpdGlvbnMpO1xuICAkcXVlcnk6ICcnO1xuXG4gIEBlYWNoICRicmFuY2ggaW4gJGJyYW5jaGVzIHtcbiAgICBAaWYgKHN0ci1sZW5ndGgoJHF1ZXJ5KSAhPSAwKSB7XG4gICAgICAkcXVlcnk6ICRxdWVyeSArICcsICc7XG4gICAgfVxuXG4gICAgJHF1ZXJ5OiAkcXVlcnkgKyAkYnJhbmNoO1xuICB9XG5cbiAgQG1lZGlhICN7JHF1ZXJ5fSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuLy8vXG4vLy8gUmVhZHMgYSBsaXN0IG9mIG1lZGlhIHF1ZXJ5IGV4cHJlc3Npb25zIGFuZCBzZXBhcmF0ZXMgbG9naWNhbCBkaXNqdW5jdGlvbnMgaW50byBkaWZmZXJlbnQgYnJhbmNoZXNcbi8vL1xuLy8vIEBhdXRob3IgRWR1YXJkbyBCb3VjYXNcbi8vL1xuLy8vIEBwYXJhbSB7TGlzdH0gICAkZXhwcmVzc2lvbnMgIC0gbGlzdCBvZiBleHByZXNzaW9uc1xuLy8vXG4vLy8gQHRocm93cyBgJGV4cHJlc3Npb25gIGlzIG5vdCBhIHZhbGlkIGV4cHJlc3Npb25cbi8vL1xuLy8vIEByZXR1cm4ge0xpc3QgfCBOdWxsfVxuLy8vXG5AZnVuY3Rpb24gZ2V0LXF1ZXJ5LWJyYW5jaGVzKCRleHByZXNzaW9ucykge1xuICAkcmVzdWx0OiAnJztcbiAgJGhhcy1ncm91cHM6IGZhbHNlO1xuXG4gIC8vIEdldHRpbmcgaW5pdGlhbCBzbmFwc2hvdCBhbmQgbG9va2luZyBmb3IgZ3JvdXBzXG4gIEBlYWNoICRleHByZXNzaW9uIGluICRleHByZXNzaW9ucyB7XG4gICAgQGlmIChzdHItbGVuZ3RoKCRyZXN1bHQpICE9IDApIHtcbiAgICAgICRyZXN1bHQ6ICRyZXN1bHQgKyAnIGFuZCAnO1xuICAgIH1cblxuICAgIEBpZiAodHlwZS1vZigkZXhwcmVzc2lvbikgPT0gJ3N0cmluZycpIHtcbiAgICAgICRyZXN1bHQ6ICRyZXN1bHQgKyAkZXhwcmVzc2lvbjtcbiAgICB9IEBlbHNlIGlmICh0eXBlLW9mKCRleHByZXNzaW9uKSA9PSAnbGlzdCcpIHtcbiAgICAgICRyZXN1bHQ6ICRyZXN1bHQgKyBudGgoJGV4cHJlc3Npb24sIDEpO1xuICAgICAgJGhhcy1ncm91cHM6IHRydWU7XG4gICAgfSBAZWxzZSB7XG4gICAgICBAd2FybiAnI3skZXhwcmVzc2lvbn0gaXMgbm90IGEgdmFsaWQgZXhwcmVzc2lvbi4nO1xuICAgIH1cbiAgfVxuXG4gIC8vIElmIHdlIGhhdmUgZ3JvdXBzLCB3ZSBoYXZlIHRvIGNyZWF0ZSBhbGwgcG9zc2libGUgY29tYmluYXRpb25zXG4gIEBpZiAkaGFzLWdyb3VwcyB7XG4gICAgQGVhY2ggJGV4cHJlc3Npb24gaW4gJGV4cHJlc3Npb25zIHtcbiAgICAgIEBpZiAodHlwZS1vZigkZXhwcmVzc2lvbikgPT0gJ2xpc3QnKSB7XG4gICAgICAgICRmaXJzdDogbnRoKCRleHByZXNzaW9uLCAxKTtcblxuICAgICAgICBAZWFjaCAkbWVtYmVyIGluICRleHByZXNzaW9uIHtcbiAgICAgICAgICBAaWYgKCRtZW1iZXIgIT0gJGZpcnN0KSB7XG4gICAgICAgICAgICBAZWFjaCAkcGFydGlhbCBpbiAkcmVzdWx0IHtcbiAgICAgICAgICAgICAgJHJlc3VsdDogam9pbigkcmVzdWx0LCBzdHItcmVwbGFjZS1maXJzdCgkZmlyc3QsICRtZW1iZXIsICRwYXJ0aWFsKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiAkcmVzdWx0O1xufVxuXG4vLy9cbi8vLyBQYXJzZXMgYSBzdHJpbmcgdG8gZm9ybSBhIG1lZGlhIHF1ZXJ5IGV4cHJlc3Npb25cbi8vL1xuLy8vIEBhdXRob3IgRWR1YXJkbyBCb3VjYXNcbi8vL1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAgICRleHByZXNzaW9uICAtIGV4cHJlc3Npb24gKGluIHN0cmluZylcbi8vL1xuLy8vIEB0aHJvd3MgRXhwcmVzc2lvbiB3aXRoIHR5cGUgYHR5cGUtb2YoJGV4cHJlc3Npb24pYCBkZXRlY3RlZCwgc3RyaW5nIGV4cGVjdGVkXG4vLy8gQHRocm93cyBgJGV4cHJlc3Npb25gIGlzIG1pc3NpbmcgYW4gb3BlcmF0b3Jcbi8vLyBAdGhyb3dzIFVua25vd24gdW5pdDogYCR1bml0YFxuLy8vXG4vLy8gQHJldHVybiB7U3RyaW5nIHwgTnVsbH1cbi8vL1xuQGZ1bmN0aW9uIHBhcnNlLWV4cHJlc3Npb24oJGV4cHJlc3Npb24pIHtcbiAgJG9wZXJhdG9yOiAnJztcbiAgJHZhbHVlOiAnJztcbiAgJGVsZW1lbnQ6ICcnO1xuICAkcmVzdWx0OiAnJztcbiAgJGlzLXdpZHRoOiB0cnVlO1xuXG4gIEBpZiAodHlwZS1vZigkZXhwcmVzc2lvbikgIT0gJ3N0cmluZycpIHtcbiAgICBAd2FybiAnRXhwcmVzc2lvbiB3aXRoIHR5cGUgYCN7dHlwZS1vZigkZXhwcmVzc2lvbil9YCBkZXRlY3RlZCwgc3RyaW5nIGV4cGVjdGVkLic7XG4gIH1cblxuICAvLyBTZXBhcmF0aW5nIHRoZSBvcGVyYXRvciBmcm9tIHRoZSByZXN0IG9mIHRoZSBleHByZXNzaW9uXG4gIEBpZiAoc3RyLXNsaWNlKCRleHByZXNzaW9uLCAyLCAyKSA9PSAnPScpIHtcbiAgICAkb3BlcmF0b3I6IHN0ci1zbGljZSgkZXhwcmVzc2lvbiwgMSwgMik7XG4gICAgJHZhbHVlOiBzdHItc2xpY2UoJGV4cHJlc3Npb24sIDMpO1xuICB9IEBlbHNlIHtcbiAgICAkb3BlcmF0b3I6IHN0ci1zbGljZSgkZXhwcmVzc2lvbiwgMSwgMSk7XG4gICAgJHZhbHVlOiBzdHItc2xpY2UoJGV4cHJlc3Npb24sIDIpO1xuICB9XG5cbiAgLy8gQ2hlY2tpbmcgd2hhdCB0eXBlIG9mIGV4cHJlc3Npb24gd2UncmUgZGVhbGluZyB3aXRoXG4gIEBpZiBtYXAtaGFzLWtleSgkYnJlYWtwb2ludHMsICR2YWx1ZSkge1xuICAgICRyZXN1bHQ6IG1hcC1nZXQoJGJyZWFrcG9pbnRzLCAkdmFsdWUpO1xuICB9IEBlbHNlIGlmIG1hcC1oYXMta2V5KCRtZWRpYS1leHByZXNzaW9ucywgJGV4cHJlc3Npb24pIHtcbiAgICAkcmVzdWx0OiBtYXAtZ2V0KCRtZWRpYS1leHByZXNzaW9ucywgJGV4cHJlc3Npb24pO1xuICAgICRpcy13aWR0aDogZmFsc2U7XG4gIH0gQGVsc2Uge1xuICAgICRyZXN1bHQ6IHRvLW51bWJlcigkdmFsdWUpO1xuICB9XG5cbiAgQGlmICgkaXMtd2lkdGgpIHtcbiAgICAkdW5pdDogdW5pdCgkcmVzdWx0KTtcbiAgICAkaW50ZXJ2YWw6IDA7XG5cbiAgICBAaWYgKG1hcC1oYXMta2V5KCR1bml0LWludGVydmFscywgJHVuaXQpKSB7XG4gICAgICAkaW50ZXJ2YWw6IG1hcC1nZXQoJHVuaXQtaW50ZXJ2YWxzLCAkdW5pdCk7XG4gICAgfSBAZWxzZSB7XG4gICAgICBAd2FybiAnVW5rbm93biB1bml0OiAjeyR1bml0fSc7XG4gICAgfVxuXG4gICAgQGlmICgkb3BlcmF0b3IgPT0gJz4nKSB7XG4gICAgICAkZWxlbWVudDogJyhtaW4td2lkdGg6ICN7JHJlc3VsdCArICRpbnRlcnZhbH0pJztcbiAgICB9IEBlbHNlIGlmICgkb3BlcmF0b3IgPT0gJzwnKSB7XG4gICAgICAkZWxlbWVudDogJyhtYXgtd2lkdGg6ICN7JHJlc3VsdCAtICRpbnRlcnZhbH0pJztcbiAgICB9IEBlbHNlIGlmICgkb3BlcmF0b3IgPT0gJz49Jykge1xuICAgICAgJGVsZW1lbnQ6ICcobWluLXdpZHRoOiAjeyRyZXN1bHR9KSc7XG4gICAgfSBAZWxzZSBpZiAoJG9wZXJhdG9yID09ICc8PScpIHtcbiAgICAgICRlbGVtZW50OiAnKG1heC13aWR0aDogI3skcmVzdWx0fSknO1xuICAgIH0gQGVsc2Uge1xuICAgICAgQHdhcm4gJyN7JGV4cHJlc3Npb259IGlzIG1pc3NpbmcgYW4gb3BlcmF0b3IuJztcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgICRlbGVtZW50OiAkcmVzdWx0O1xuICB9XG5cbiAgQHJldHVybiAkZWxlbWVudDtcbn1cblxuLy8vXG4vLy8gUmVwbGFjZXMgdGhlIGZpcnN0IG9jY3VyZW5jZSBvZiB0aGUgc3RyaW5nIHdpdGggdGhlIHJlcGxhY2VtZW50IHN0cmluZ1xuLy8vXG4vLy8gQGF1dGhvciBFZHVhcmRvIEJvdWNhc1xuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICAgJHNlYXJjaCAgLSBUaGUgdmFsdWUgYmVpbmcgc2VhcmNoZWQgZm9yXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICAgJHJlcGxhY2UgIC0gVGhlIHJlcGxhY2VtZW50IHN0cmluZ1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAgICRzdWJqZWN0ICAtIFRoZSBzdHJpbmcgYmVpbmcgcmVwbGFjZWQgb25cbi8vL1xuLy8vIEByZXR1cm4ge1N0cmluZyB8IE51bGx9XG4vLy9cbkBmdW5jdGlvbiBzdHItcmVwbGFjZS1maXJzdCgkc2VhcmNoLCAkcmVwbGFjZSwgJHN1YmplY3QpIHtcbiAgJHNlYXJjaC1zdGFydDogc3RyLWluZGV4KCRzdWJqZWN0LCAkc2VhcmNoKTtcblxuICBAaWYgJHNlYXJjaC1zdGFydCA9PSBudWxsIHtcbiAgICBAcmV0dXJuICRzdWJqZWN0O1xuICB9XG5cbiAgJHJlc3VsdDogc3RyLXNsaWNlKCRzdWJqZWN0LCAwLCAkc2VhcmNoLXN0YXJ0IC0gMSk7XG4gICRyZXN1bHQ6ICRyZXN1bHQgKyAkcmVwbGFjZTtcbiAgJHJlc3VsdDogJHJlc3VsdCArIHN0ci1zbGljZSgkc3ViamVjdCwgJHNlYXJjaC1zdGFydCArIHN0ci1sZW5ndGgoJHNlYXJjaCkpO1xuXG4gIEByZXR1cm4gJHJlc3VsdDtcbn1cblxuLy8vXG4vLy8gQ2FzdHMgYSBudW1iZXIgdG8gYSBzdHJpbmdcbi8vL1xuLy8vIEBhdXRob3IgSHVnbyBHaXJhdWRlbFxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICAgJHN0cmluZyAgLSBOdW1iZXIgdG8gYmUgcGFyc2VkXG4vLy9cbi8vLyBAcmV0dXJuIHtMaXN0IHwgTnVsbH1cbi8vL1xuQGZ1bmN0aW9uIHRvLW51bWJlcigkc3RyaW5nKSB7XG4gIC8vIE1hdHJpY2VzXG4gICRzdHJpbmdzOiAnMCcgJzEnICcyJyAnMycgJzQnICc1JyAnNicgJzcnICc4JyAnOSc7XG4gICRudW1iZXJzOiAgMCAgIDEgICAyICAgMyAgIDQgICA1ICAgNiAgIDcgICA4ICAgOTtcblxuICAvLyBSZXN1bHRcbiAgJHJlc3VsdDogMDtcbiAgJGRpdmlkZXI6IDA7XG4gICRtaW51czogZmFsc2U7XG5cbiAgLy8gTG9vcGluZyB0aHJvdWdoIGFsbCBjaGFyYWN0ZXJzXG4gIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggc3RyLWxlbmd0aCgkc3RyaW5nKSB7XG4gICAgJGNoYXJhY3Rlcjogc3RyLXNsaWNlKCRzdHJpbmcsICRpLCAkaSk7XG4gICAgJGluZGV4OiBpbmRleCgkc3RyaW5ncywgJGNoYXJhY3Rlcik7XG5cblxuICAgIEBpZiAkY2hhcmFjdGVyID09ICctJyB7XG4gICAgICAkbWludXM6IHRydWU7XG4gICAgfVxuXG4gICAgQGVsc2UgaWYgJGNoYXJhY3RlciA9PSAnLicge1xuICAgICAgJGRpdmlkZXI6IDE7XG4gICAgfVxuXG4gICAgQGVsc2Uge1xuICAgICAgQGlmIHR5cGUtb2YoJGluZGV4KSAhPSAnbnVtYmVyJyB7XG4gICAgICAgICRyZXN1bHQ6IGlmKCRtaW51cywgJHJlc3VsdCAqIC0xLCAkcmVzdWx0KTtcbiAgICAgICAgQHJldHVybiBfbGVuZ3RoKCRyZXN1bHQsIHN0ci1zbGljZSgkc3RyaW5nLCAkaSkpO1xuICAgICAgfVxuXG4gICAgICAkbnVtYmVyOiBudGgoJG51bWJlcnMsICRpbmRleCk7XG5cbiAgICAgIEBpZiAkZGl2aWRlciA9PSAwIHtcbiAgICAgICAgJHJlc3VsdDogJHJlc3VsdCAqIDEwO1xuICAgICAgfVxuXG4gICAgICBAZWxzZSB7XG4gICAgICAgIC8vIE1vdmUgdGhlIGRlY2ltYWwgZG90IHRvIHRoZSBsZWZ0XG4gICAgICAgICRkaXZpZGVyOiAkZGl2aWRlciAqIDEwO1xuICAgICAgICAkbnVtYmVyOiAkbnVtYmVyIC8gJGRpdmlkZXI7XG4gICAgICB9XG5cbiAgICAgICRyZXN1bHQ6ICRyZXN1bHQgKyAkbnVtYmVyO1xuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gaWYoJG1pbnVzLCAkcmVzdWx0ICogLTEsICRyZXN1bHQpO1xufVxuXG5AZnVuY3Rpb24gX2xlbmd0aCgkbnVtYmVyLCAkdW5pdCkge1xuICAkc3RyaW5nczogJ3B4JyAnY20nICdtbScgJyUnICdjaCcgJ3BpY2EnICdpbicgJ2VtJyAncmVtJyAncHQnICdwYycgJ2V4JyAndncnICd2aCcgJ3ZtaW4nICd2bWF4JztcbiAgJHVuaXRzOiAgIDFweCAgMWNtICAxbW0gIDElICAxY2ggIDFwaWNhICAxaW4gIDFlbSAgMXJlbSAgMXB0ICAxcGMgIDFleCAgMXZ3ICAxdmggIDF2bWluICAxdm1heDtcbiAgJGluZGV4OiBpbmRleCgkc3RyaW5ncywgJHVuaXQpO1xuXG4gIEBpZiB0eXBlLW9mKCRpbmRleCkgIT0gJ251bWJlcicge1xuICAgIEB3YXJuICdVbmtub3duIHVuaXQgYCN7JHVuaXR9YC4nO1xuICAgIEByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBAcmV0dXJuICRudW1iZXIgKiBudGgoJHVuaXRzLCAkaW5kZXgpO1xufSIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXHJcbiAgICAkQlVUVE9OU1xyXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5cclxuYnV0dG9uLFxyXG4uYnV0dG9uIHtcclxuICAgIEBleHRlbmQgJW5vbi1zZWxlY3RhYmxlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGJsdWU7XHJcbiAgICBjb2xvcjogJHdoaXRlO1xyXG4gICAgbWluLXdpZHRoOiA4ZW07XHJcbiAgICBoZWlnaHQ6IDIuMTgyZW07XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICBwYWRkaW5nOiAwIC43MjdlbSAuMTgyZW07XHJcbiAgICBib3JkZXI6IDA7XHJcbiAgICBtYXJnaW4tdG9wOiAuMTgyZW07XHJcbiAgICBvdXRsaW5lLXN0eWxlOiBub25lO1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgZm9udC1mYW1pbHk6ICRoZWFkaW5nLWZvbnQtc3RhY2s7XHJcbiAgICBmb250LXNpemU6IDEuMzc1ZW07XHJcbiAgICBsaW5lLWhlaWdodDogMmVtO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICBib3JkZXItcmFkaXVzOiAuMTgyZW07XHJcbiAgICBib3gtc2hhZG93OiBpbnNldCAwIC0wLjE4MmVtIDAgMCBkYXJrZW4oJGJsdWUsIDEwJSk7XHJcbiAgICBAaW5jbHVkZSB0cmFuc2l0aW9uKGJhY2tncm91bmQtY29sb3IpO1xyXG4gICAgJjpob3ZlcixcclxuICAgICY6Zm9jdXMsXHJcbiAgICAmOmFjdGl2ZSB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHRlbigkYmx1ZSwgNSUpO1xyXG4gICAgICAgIG91dGxpbmUtc3R5bGU6IGF1dG87XHJcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gICAgfVxyXG4gICAgJjphY3RpdmUge1xyXG4gICAgICAgIGhlaWdodDogMmVtO1xyXG4gICAgICAgIHBhZGRpbmctYm90dG9tOiAwO1xyXG4gICAgICAgIG1hcmdpbi1ib3R0b206IC4xODJlbTtcclxuICAgICAgICBib3gtc2hhZG93OiBpbnNldCAwIC0wLjA0NmVtIDAgMCBkYXJrZW4oJGJsdWUsIDEwJSk7XHJcbiAgICAgICAgQGluY2x1ZGUgdHJhbnNsYXRlM2QoMCwgLjE4MmVtLCAwKTtcclxuICAgIH1cclxuICAgICY6YmVmb3JlLFxyXG4gICAgJjphZnRlciB7XHJcbiAgICAgICAgY29udGVudDogXCJcIjtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBoZWlnaHQ6IC4xODJlbTtcclxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgdG9wOiAwO1xyXG4gICAgICAgIGxlZnQ6IDA7XHJcbiAgICB9XHJcbiAgICAgICAgJjphY3RpdmU6YmVmb3JlLFxyXG4gICAgICAgICY6YWN0aXZlOmFmdGVyIHtcclxuICAgICAgICAgICAgdG9wOiAtMC4xODJlbTtcclxuICAgICAgICB9XHJcbiAgICAmW2Rpc2FibGVkXSB7XHJcbiAgICAgICAgb3BhY2l0eTogLjQ7XHJcbiAgICB9XHJcbiAgICAubm90LWZvdW5kLXBhZ2UgJiB7XHJcbiAgICAgICAgQGluY2x1ZGUgbWVkaWEoXCI8PW1lZGl1bVwiKSB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgICAgICBtYXJnaW46IDAgYXV0byAkZGVmYXVsdC1tYXJnaW47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3ZnIHtcclxuICAgICAgICB3aWR0aDogIC44ZW07XHJcbiAgICAgICAgaGVpZ2h0OiAuOGVtO1xyXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgICBtYXJnaW4tcmlnaHQ6IC4yNWVtO1xyXG4gICAgfVxyXG4gICAgLmFydGljbGUtaWNvbiB7XHJcbiAgICAgICAgd2lkdGg6ICguOSAqIC44ZW0pO1xyXG4gICAgfVxyXG4gICAgLmZlYXRoZXItaWNvbiB7XHJcbiAgICAgICAgd2lkdGg6ICguNzI1ICogLjhlbSk7XHJcbiAgICB9XHJcbn1cclxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkTE9HT1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuLmxvZ28ge1xuICAgIEBleHRlbmQgJW5vbi1zZWxlY3RhYmxlO1xuICAgIGNvbG9yOiAkdGV4dC1jb2xvcjtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgcGFkZGluZy10b3A6IC41ZW07XG4gICAgcGFkZGluZy1sZWZ0OiAxLjkyM2VtO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBmb250LWZhbWlseTogJGhlYWRpbmctZm9udC1zdGFjaztcbiAgICBmb250LXNpemU6IDMuMjVlbTtcbiAgICBsaW5lLWhlaWdodDogMWVtO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgdGV4dC1zaGFkb3c6IC4wNThlbSAuMDU4ZW0gMCAkYmxhY2stbGlnaHQ7XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICBAaW5jbHVkZSB6LWluZGV4KFwiYWJvdmVcIik7XG4gICAgQGluY2x1ZGUgdHJhbnNpdGlvbjtcbiAgICAmOmhvdmVyLFxuICAgICY6Zm9jdXMsXG4gICAgJjphY3RpdmUge1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgfVxuICAgIEBpbmNsdWRlIG1lZGlhKFwiPm1lZGl1bVwiKSB7XG4gICAgICAgIGZsb2F0OiBsZWZ0O1xuICAgIH1cbiAgICBAaW5jbHVkZSBtZWRpYShcIjw9c21hbGxcIikge1xuICAgICAgICBmb250LXNpemU6IDIuNzVlbTtcbiAgICB9XG4gICAgJjphY3RpdmUge1xuICAgICAgICBAaW5jbHVkZSB0cmFuc2xhdGUzZCgwLCAuMDM5ZW0sIDApO1xuICAgICAgICBzdmcge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJbiBvcmRlciB0byBnZXQgYC5sb2dvIHN2Z2AgdG8gdHJhdmVsIHVwIDJ4IHRoZSBkaXN0YW5jZSB0aGVcbiAgICAgICAgICAgICAqIGAubG9nb2AgdGV4dCBkb2VzLCBmaXJzdCB0aGUgYHRyYW5zbGF0ZWAgYXBwbGllZCBvbiB0aGUgcGFyZW50XG4gICAgICAgICAgICAgKiAob2YgdGhlIGBhc2lkZWApIGhhcyB0byBiZSBjb3VudGVyYWN0ZWQsIHRoZW4gKDIgKiAwLjAzOWVtKVxuICAgICAgICAgICAgICogaXMgYWRkZWQsIHRvdGFsbGluZyAwLjExN2VtLCBtYWRlIG5lZ2F0aXZlIG9uIHRoZSB5LWF4aXMgdG9cbiAgICAgICAgICAgICAqIGdvIHVwLiBXZSBjYW5ub3QgdXNlIGB0cmFuc2xhdGVgIGFzIGl0IGlzIHVzZWQgYmVsb3cgZm9yXG4gICAgICAgICAgICAgKiBmdXJ0aGVyIGFuaW1hdGluZy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdG9wOiAtMC4xMTdlbTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdmcge1xuICAgICAgICB3aWR0aDogMi4zMDdlbTtcbiAgICAgICAgaGVpZ2h0OiAyLjMwN2VtO1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIGxlZnQ6IDA7XG4gICAgICAgIEBpbmNsdWRlIHotaW5kZXgoXCJiZWxvd1wiKTtcbiAgICAgICAgQGluY2x1ZGUgYW5pbWF0aW9uKHNvYXJpbmcgMzBzIGxpbmVhciBhbHRlcm5hdGUgaW5maW5pdGUpO1xuICAgICAgICBAaW5jbHVkZSBhbmltYXRpb24tcGxheS1zdGF0ZShwYXVzZWQpO1xuICAgICAgICBAaW5jbHVkZSB0cmFuc2l0aW9uO1xuICAgICAgICBAaW5jbHVkZSB0cmFuc2xhdGUzZCgwLCAtMC44MTI1ZW0sIDApO1xuICAgIH1cbiAgICAmOmhvdmVyIHN2ZyxcbiAgICAmOmZvY3VzIHN2ZyxcbiAgICAmOmFjdGl2ZSBzdmcge1xuICAgICAgICAvKipcbiAgICAgICAgICogT25seSBhbmltYXRlIHRoZSBpbWFnZSB3aGVuIHRoZSB1c2VyIGhvdmVycyBgLmxvZ29gLlxuICAgICAgICAgKi9cbiAgICAgICAgQGluY2x1ZGUgYW5pbWF0aW9uLXBsYXktc3RhdGUocnVubmluZyk7XG4gICAgfVxufVxuQGtleWZyYW1lcyBzb2FyaW5nIHtcbiAgICAwJSxcbiAgICAxMDAlICB7IEBpbmNsdWRlIHRyYW5zbGF0ZTNkKCAgMCwgICAgICAgIC0wLjgxMjVlbSwgMCApOyB9XG4gICAgMTIuNSUgeyBAaW5jbHVkZSB0cmFuc2xhdGUzZCggLTAuMDYyNWVtLCAtMC42ODc1ZW0sIDAgKTsgfVxuICAgIDI1JSAgIHsgQGluY2x1ZGUgdHJhbnNsYXRlM2QoICAgLjEyNWVtLCAgLTAuMzEyNWVtLCAwICk7IH1cbiAgICAzNy41JSB7IEBpbmNsdWRlIHRyYW5zbGF0ZTNkKCAgIC4zMTI1ZW0sIC0wLjM3NWVtLCAgMCApOyB9XG4gICAgNTAlICAgeyBAaW5jbHVkZSB0cmFuc2xhdGUzZCggICAuMTI1ZW0sICAtMC40Mzc1ZW0sIDAgKTsgfVxuICAgIDYyLjUlIHsgQGluY2x1ZGUgdHJhbnNsYXRlM2QoICAgLjA2MjVlbSwgLTAuMjVlbSwgICAwICk7IH1cbiAgICA3NSUgICB7IEBpbmNsdWRlIHRyYW5zbGF0ZTNkKCAgIC4xODc1ZW0sIC0wLjQzNzVlbSwgMCApOyB9XG4gICAgODcuNSUgeyBAaW5jbHVkZSB0cmFuc2xhdGUzZCggLTAuMDYyNWVtLCAtMC41NjI1ZW0sIDAgKTsgfVxufVxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcclxuICAgICROQVZJR0FUSU9OXHJcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcblxyXG4ucHJpbWFyeS1uYXZpZ2F0aW9uIHtcclxuICAgIHBhZGRpbmctYm90dG9tOiAxLjI1ZW07XHJcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xyXG4gICAgQGluY2x1ZGUgbWVkaWEoXCI+bWVkaXVtXCIpIHtcclxuICAgICAgICBmbG9hdDogcmlnaHQ7XHJcbiAgICAgICAgcGFkZGluZy10b3A6IDEuNWVtO1xyXG4gICAgfVxyXG4gICAgQGluY2x1ZGUgbWVkaWEoXCI8PW1lZGl1bVwiKSB7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcbn1cclxuICAgIC5wcmltYXJ5LW5hdmlnYXRpb24tbGlzdCB7XHJcbiAgICAgICAgaGVpZ2h0OiAzLjc1ZW07XHJcbiAgICAgICAgQGluY2x1ZGUgbWVkaWEoXCI+bWVkaXVtXCIpIHtcclxuICAgICAgICAgICAgZmxvYXQ6IHJpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBAaW5jbHVkZSBtZWRpYShcIjw9bWVkaXVtXCIpIHtcclxuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsaSB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgICAgICAgQGluY2x1ZGUgbWVkaWEoXCI+bWVkaXVtXCIpIHtcclxuICAgICAgICAgICAgICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICsgbGkge1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDFlbTtcclxuICAgICAgICAgICAgICAgIEBpbmNsdWRlIG1lZGlhKFwiPD1tZWRpdW1cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAuNWVtO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgQGluY2x1ZGUgbWVkaWEoXCI8PXNtYWxsXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogLjI1ZW07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgYSB7XHJcbiAgICAgICAgICAgIGNvbG9yOiAkdGV4dC1jb2xvci1hbHQ7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAuNzVlbTtcclxuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMCBzb2xpZCAkYmx1ZTtcclxuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogLjNlbTtcclxuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgICAgICBmb250LWZhbWlseTogJGhlYWRpbmctZm9udC1zdGFjaztcclxuICAgICAgICAgICAgZm9udC1zaXplOiAxLjI1ZW07XHJcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxLjI1ZW07XHJcbiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICAgICAgICAgIEBpbmNsdWRlIHRyYW5zaXRpb24oY29sb3IgICAgICAgICAgICAgICAkdHJhbnNpdGlvbi10aW1lICR0cmFuc2l0aW9uLWZ1bmN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctYm90dG9tICAgICAgJHRyYW5zaXRpb24tdGltZSAkdHJhbnNpdGlvbi1mdW5jdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItYm90dG9tLXdpZHRoICR0cmFuc2l0aW9uLXRpbWUgJHRyYW5zaXRpb24tZnVuY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtICAgICAgICAgICAkdHJhbnNpdGlvbi10aW1lICR0cmFuc2l0aW9uLWZ1bmN0aW9uKTtcclxuICAgICAgICAgICAgJjpob3ZlcixcclxuICAgICAgICAgICAgJjpmb2N1cyxcclxuICAgICAgICAgICAgJjphY3RpdmUge1xyXG4gICAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICY6YWN0aXZlIHtcclxuICAgICAgICAgICAgICAgIEBpbmNsdWRlIHRyYW5zbGF0ZTNkKDAsIC4yZW0sIDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIEBpbmNsdWRlIG1lZGlhKFwiPD1zbWFsbFwiKSB7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nLWxlZnQ6ICAuNWVtO1xyXG4gICAgICAgICAgICAgICAgcGFkZGluZy1yaWdodDogLjVlbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgICAgICAvLyBQcmltYXJ5IE5hdmlnYXRpb24gSG92ZXIgRWZmZWN0XHJcbiAgICAgICAgLnByaW1hcnktbmF2aWdhdGlvbi1saXN0IGE6aG92ZXIsXHJcbiAgICAgICAgLnByaW1hcnktbmF2aWdhdGlvbi1saXN0IGE6Zm9jdXMsXHJcbiAgICAgICAgLnByaW1hcnktbmF2aWdhdGlvbi1saXN0IGE6YWN0aXZlLFxyXG4gICAgICAgIC5ob21lLXBhZ2UgLnByaW1hcnktbmF2aWdhdGlvbi1ob21lIGEsXHJcbiAgICAgICAgLmFib3V0LXBhZ2UgLnByaW1hcnktbmF2aWdhdGlvbi1hYm91dCBhLFxyXG4gICAgICAgIC5hcmNoaXZlLXBhZ2UgLnByaW1hcnktbmF2aWdhdGlvbi1hcmNoaXZlIGEsXHJcbiAgICAgICAgLnBlbnMtcGFnZSAucHJpbWFyeS1uYXZpZ2F0aW9uLXBlbnMgYSB7XHJcbiAgICAgICAgICAgIGNvbG9yOiAkdGV4dC1jb2xvcjtcclxuICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IC41NWVtO1xyXG4gICAgICAgICAgICBib3JkZXItYm90dG9tLXdpZHRoOiAuMmVtO1xyXG4gICAgICAgIH1cclxuICAgICAgICAgICAgLy8gUHJpbWFyeSBOYXZpZ2F0aW9uIEFjdGl2ZSBQYWdlIEFycm93XHJcbiAgICAgICAgICAgIC5ob21lLXBhZ2UgLnByaW1hcnktbmF2aWdhdGlvbi1ob21lIGE6YWZ0ZXIsXHJcbiAgICAgICAgICAgIC5hYm91dC1wYWdlIC5wcmltYXJ5LW5hdmlnYXRpb24tYWJvdXQgYTphZnRlcixcclxuICAgICAgICAgICAgLmFyY2hpdmUtcGFnZSAucHJpbWFyeS1uYXZpZ2F0aW9uLWFyY2hpdmUgYTphZnRlcixcclxuICAgICAgICAgICAgLnBlbnMtcGFnZSAucHJpbWFyeS1uYXZpZ2F0aW9uLXBlbnMgYTphZnRlciB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgYm9yZGVyLXRvcDogICAuNWVtIHNvbGlkICRibHVlO1xyXG4gICAgICAgICAgICAgICAgYm9yZGVyLXJpZ2h0OiAuNWVtIHNvbGlkIHRyYW5zcGFyZW50O1xyXG4gICAgICAgICAgICAgICAgYm9yZGVyLWxlZnQ6ICAuNWVtIHNvbGlkIHRyYW5zcGFyZW50O1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgICAgICAgdG9wOiAxMDAlO1xyXG4gICAgICAgICAgICAgICAgbGVmdDogNTAlO1xyXG4gICAgICAgICAgICAgICAgQGluY2x1ZGUgdHJhbnNsYXRlM2QoLTUwJSwgMCwgMCk7XHJcbiAgICAgICAgICAgIH1cclxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcclxuICAgICRDT05URU5UXHJcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcblxyXG4uY29udGVudCB7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogJGRlZmF1bHQtcGFkZGluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSB3aWR0aCBvZiB0aGUgYXJ0aWNsZXMgaXMgZmx1aWQsIGFuZCBhbHdheXMgaGFzIHBhZGRpbmcgb24gdGhlIGxlZnQtaGFuZFxyXG4gKiBzaWRlIHRvIG1ha2Ugcm9vbSBmb3IgYW55IGBhc2lkZWAsIHdoaWNoIGNhbiBhcHBlYXIgYW55d2hlcmUgaW5zaWRlXHJcbiAqIGBhcnRpY2xlYCBvciBgLmFydGljbGVzLWxpc3RgLlxyXG4gKiBNYXhpbXVtIHRvdGFsIHdpZHRoIG9mIGNvbnRhaW5lclxyXG4gKiAgID0gMTA4MHB4XHJcbiAqIExlZnQtaGFuZCBwYWRkaW5nXHJcbiAqICAgPSAyNSUgb2YgMTA4MHB4ID0gMjcwcHggID0gMTYuODc1ZW1cclxuICovXHJcbmFydGljbGUge1xyXG4gICAgcGFkZGluZy10b3A6ICRkZWZhdWx0LXBhZGRpbmc7XHJcbiAgICBib3JkZXItdG9wOiAkZGVmYXVsdC1ib3JkZXIgc29saWQgJGJsdWU7XHJcbiAgICBAaW5jbHVkZSBtZWRpYShcIj5tZWRpdW1cIikge1xyXG4gICAgICAgIHBhZGRpbmctbGVmdDogKCRhc2lkZS13aWR0aCArICRkZWZhdWx0LXBhZGRpbmcpO1xyXG4gICAgfVxyXG4gICAgQGluY2x1ZGUgbWVkaWEoXCI8PW1lZGl1bVwiKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogV2hlbiB5b3UgaGl0IHRoZSBgbWVkaXVtYCBtZWRpYSBxdWVyeSwgYGFydGljbGVgLCBgYXJ0aWNsZS1saXN0YCwgYW5kXHJcbiAgICAgICAgICogYGFzaWRlYCBiZWNvbWVzIGZ1bGwgd2lkdGggYW5kIGBhc2lkZS5hdXRob3ItaW5mb3JtYXRpb25gIHB1c2hlcyB0b1xyXG4gICAgICAgICAqIHRoZSBib3R0b20gb2YgdGhlIHBhZ2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgfVxyXG59XHJcbi5hcnRpY2xlcy1saXN0IHtcclxuICAgIGxpIHtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgY2xlYXI6IGJvdGg7XHJcbiAgICAgICAgcGFkZGluZzogMS41ZW0gMWVtO1xyXG4gICAgICAgIGJvcmRlci10b3A6ICgkZGVmYXVsdC1ib3JkZXIgLyAyKSBzb2xpZCAkYmxhY2stbWVkaXVtO1xyXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICAmOm50aC1jaGlsZChvZGQpIHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJsYWNrLWxpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBAaW5jbHVkZSBtZWRpYShcIjw9bWVkaXVtXCIpIHtcclxuICAgICAgICAgICAgcGFkZGluZy10b3A6IDEuODc1ZW07XHJcbiAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAxLjg3NWVtO1xyXG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLmFydGljbGUtdGl0bGUsXHJcbiAgICAuYXJ0aWNsZS1kYXRlLFxyXG4gICAgLmNvbW1lbnRzLWxpbmsge1xyXG4gICAgICAgIHRleHQtc2hhZG93OiAwIDFweCAwICR3aGl0ZTtcclxuICAgIH1cclxufVxyXG4gICAgLmFydGljbGUtYmFubmVyIHtcclxuICAgICAgICBAZXh0ZW5kICVyb3VuZGVkO1xyXG4gICAgICAgIHdpZHRoOiA4MTBweDtcclxuICAgICAgICBtYXJnaW4tYm90dG9tOiAxZW07XHJcbiAgICAgICAgQGluY2x1ZGUgbWVkaWEoXCI8PXNtYWxsXCIpIHtcclxuICAgICAgICAgICAgd2lkdGg6IDUwMHB4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC5hcnRpY2xlLXRpdGxlLFxyXG4gICAgLnBhZ2UtdGl0bGUsXHJcbiAgICAuc2l0ZS10YWdsaW5lIHtcclxuICAgICAgICBtYXJnaW4tYm90dG9tOiAuNzVlbTtcclxuICAgIH1cclxuICAgIC5zaXRlLWRlc2NyaXB0aW9uIHtcclxuICAgICAgICBtYXgtd2lkdGg6IDI0ZW07XHJcbiAgICAgICAgbWFyZ2luLXRvcDogLTAuMmVtOyAvLyBtYWtlIHN1cmUgdGV4dCBjYXAtaGVpZ2h0IGFsaWducyB0byB0aGUgYGFzaWRlYFxyXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDFlbTtcclxuICAgICAgICBsaW5lLWhlaWdodDogMS40ZW07XHJcbiAgICAgICAgQGluY2x1ZGUgbWVkaWEoXCI8PW1lZGl1bVwiKSB7XHJcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEuMzg1ZW07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLmFydGljbGUtaW50cm9kdWN0aW9uLFxyXG4gICAgLnBhZ2UtZGVzY3JpcHRpb24ge1xyXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDFlbTtcclxuICAgICAgICBmb250LXNpemU6IDEuMjVlbTtcclxuICAgICAgICBsaW5lLWhlaWdodDogMS41ZW07XHJcbiAgICB9XHJcbiAgICAuYXJ0aWNsZS10aXRsZSxcclxuICAgIC5hcnRpY2xlLWRhdGUsXHJcbiAgICAuYXJ0aWNsZS1pbnRyb2R1Y3Rpb24ge1xyXG4gICAgICAgIEBpbmNsdWRlIG1lZGlhKFwiPD1tZWRpdW1cIikge1xyXG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC5hcnRpY2xlLWludHJvZHVjdGlvbiB7XHJcbiAgICAgICAgbWFyZ2luLXRvcDogLTVweDsgLy8gYWxpZ24gdGV4dCB0byBhdXRob3ItaW1hZ2VcclxuICAgICAgICBAaW5jbHVkZSBtZWRpYShcIjw9bWVkaXVtXCIpIHtcclxuICAgICAgICAgICAgbWFyZ2luLXRvcDogMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLmFydGljbGUtYmFubmVyICsgJiB7XHJcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLmFydGljbGUtdGl0bGUge1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIC5hcnRpY2xlLXRpdGxlLWxpbmsge1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDAgLjI3ZW07XHJcbiAgICAgICAgICAgIGJvcmRlci1ib3R0b206IC4wNzdlbSBzb2xpZCB0cmFuc3BhcmVudDtcclxuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IC0wLjI3ZW07XHJcbiAgICAgICAgICAgIEBpbmNsdWRlIHRyYW5zaXRpb24oYm9yZGVyLWNvbG9yKTtcclxuICAgICAgICAgICAgJjpob3ZlcixcclxuICAgICAgICAgICAgJjpmb2N1cyxcclxuICAgICAgICAgICAgJjphY3RpdmUge1xyXG4gICAgICAgICAgICAgICAgY29sb3I6ICR0ZXh0LWNvbG9yO1xyXG4gICAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogJGJsdWU7XHJcbiAgICAgICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAuYXJ0aWNsZXMtbGlzdCAuYXJ0aWNsZS1kYXRlOmJlZm9yZSB7XHJcbiAgICAgICAgY29udGVudDogXCJcXDIwMTNcXDAwMjBcIjtcclxuICAgICAgICBjb2xvcjogJHRleHQtY29sb3ItYWx0O1xyXG4gICAgfVxyXG4gICAgLmNvbW1lbnRzLWxpbmsge1xyXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgICBtYXJnaW4tdG9wOiAxLjYyNWVtO1xyXG4gICAgICAgIGZvbnQtZmFtaWx5OiAkc2Vjb25kYXJ5LWZvbnQtc3RhY2s7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICAgICAgICBsaW5lLWhlaWdodDogMWVtO1xyXG4gICAgICAgICY6YWZ0ZXIge1xyXG4gICAgICAgICAgICBjb250ZW50OiBcIlxcMDBhMFxcMjE5MlwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBAaW5jbHVkZSBtZWRpYShcIj5tZWRpdW1cIikge1xyXG4gICAgICAgICAgICBmbG9hdDogcmlnaHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIEBpbmNsdWRlIG1lZGlhKFwiPD1tZWRpdW1cIikge1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICAgICAgbWFyZ2luLXRvcDogJGRlZmF1bHQtbWFyZ2luO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbi5zbWFsbC1hcnRpY2xlcy1saXN0IHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgZmxleC13cmFwOiB3cmFwO1xyXG4gICAgbWFyZ2luOiAwIC0wLjVlbSAxLjVlbTtcclxuICAgIGZvbnQtZmFtaWx5OiAkc2Vjb25kYXJ5LWZvbnQtc3RhY2s7XHJcbiAgICBsaW5lLWhlaWdodDogMS4yNWVtO1xyXG4gICAgQGluY2x1ZGUgbWVkaWEoXCI8PW1lZGl1bVwiKSB7XHJcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMS44NzVlbTtcclxuICAgIH1cclxuICAgIGxpIHtcclxuICAgICAgICB3aWR0aDogNDkuMDEyNSU7XHJcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICAgICY6bnRoLWNoaWxkKG4rMykge1xyXG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAxZW07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFzaWRlICYge1xyXG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgJiArIGxpIHtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDFlbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBAaW5jbHVkZSBtZWRpYShcIjw9c21hbGxcIikge1xyXG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgJiArIGxpIHtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDFlbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGEge1xyXG4gICAgICAgIEBleHRlbmQgJXJvdW5kZWQ7XHJcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgcGFkZGluZzogLjVlbTtcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICAmOmhvdmVyLFxyXG4gICAgICAgICY6Zm9jdXMsXHJcbiAgICAgICAgJjphY3RpdmUge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmxhY2stbGlnaHQ7XHJcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAuc21hbGwtYXJ0aWNsZS10aXRsZSxcclxuICAgIC5zbWFsbC1hcnRpY2xlLWludHJvZHVjdGlvbixcclxuICAgIC5zbWFsbC1hcnRpY2xlLWRhdGUge1xyXG4gICAgICAgIHRleHQtc2hhZG93OiAwIDFweCAwICR3aGl0ZTtcclxuICAgIH1cclxuICAgIC5zbWFsbC1hcnRpY2xlLXRpdGxlIHtcclxuICAgICAgICBtYXJnaW4tYm90dG9tOiAuMzEyNWVtO1xyXG4gICAgfVxyXG4gICAgLnNtYWxsLWFydGljbGUtZGF0ZSB7XHJcbiAgICAgICAgY29sb3I6ICR0ZXh0LWNvbG9yLWFsdDtcclxuICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICBmb250LXNpemU6IC44MTI1ZW07XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IFwiXFwyMDEzXFwwMDIwXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgICAgIC5jb2RlcGVuLWljb24gfiAuc21hbGwtYXJ0aWNsZS1kYXRlIHtcclxuICAgICAgICAgICAgbWFyZ2luLXRvcDogLjMxMjVlbTtcclxuICAgICAgICB9XHJcbiAgICAuc21hbGwtYXJ0aWNsZS1pbnRyb2R1Y3Rpb24ge1xyXG4gICAgICAgIGNvbG9yOiAkdGV4dC1jb2xvcjtcclxuICAgICAgICBtYXJnaW4tdG9wOiAuMzEyNWVtO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBGb3IgRmVhdHVyZWQgUGVucywgYHN2Z2AgaXMgYSBjaGlsZCBvZiB0aGUgYGxpYFxyXG4gKi9cclxuLnNtYWxsLWFydGljbGVzLWxpc3Qge1xyXG4gICAgc3ZnIHtcclxuICAgICAgICBvcGFjaXR5OiAoJG9wYWNpdHktbG93IC8gMik7XHJcbiAgICAgICAgd2lkdGg6ICA2LjI1ZW0gIWltcG9ydGFudDsgLy8gb3ZlcnJpZGUgYF9pY29ucy5zY3NzYCArIDRweFxyXG4gICAgICAgIGhlaWdodDogNi4yNWVtO1xyXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICB0b3A6IDUwJTtcclxuICAgICAgICByaWdodDogLjVlbTtcclxuICAgICAgICBzdHJva2U6ICR0ZXh0LWNvbG9yO1xyXG4gICAgICAgIEBpbmNsdWRlIHotaW5kZXgoXCJiZWxvd1wiKTtcclxuICAgICAgICBAaW5jbHVkZSB0cmFuc2l0aW9uO1xyXG4gICAgICAgIEBpbmNsdWRlIHRyYW5zbGF0ZTNkKDAsIC01MCUsIDApO1xyXG4gICAgICAgIEBpbmNsdWRlIG1lZGlhKFwiPD1zbWFsbFwiKSB7XHJcbiAgICAgICAgICAgIHdpZHRoOiAgNGVtICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgICAgIGhlaWdodDogNGVtO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGE6aG92ZXIgc3ZnLFxyXG4gICAgYTpmb2N1cyBzdmcsXHJcbiAgICBhOmFjdGl2ZSBzdmcge1xyXG4gICAgICAgIG9wYWNpdHk6ICRvcGFjaXR5LW1lZGl1bTtcclxuICAgIH1cclxufVxyXG5cclxuLnBlbnMtaW50cm9kdWN0aW9uIHtcclxuICAgIHBhZGRpbmctYm90dG9tOiAkZGVmYXVsdC1tYXJnaW47XHJcbiAgICBib3JkZXItYm90dG9tOiAoJGRlZmF1bHQtYm9yZGVyIC8gMikgc29saWQgJGJsYWNrLW1lZGl1bTtcclxufVxyXG5cclxuLmFydGljbGVzLW5hdmlnYXRpb24ge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBwYWRkaW5nOiAoJGRlZmF1bHQtcGFkZGluZyAtIC4xODIpIDAgJGRlZmF1bHQtcGFkZGluZztcclxuICAgIGJvcmRlci10b3A6ICgkZGVmYXVsdC1ib3JkZXIgLyAyKSBzb2xpZCAkYmxhY2stbWVkaXVtO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgLmFib3V0LXBhZ2UgJiB7XHJcbiAgICAgICAgYm9yZGVyLXRvcDogMDtcclxuICAgICAgICBwYWRkaW5nOiAkZGVmYXVsdC1tYXJnaW4gMDtcclxuICAgIH1cclxuICAgIGJ1dHRvbixcclxuICAgIC5idXR0b24ge1xyXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgICBAaW5jbHVkZSBtZWRpYShcIj5zbWFsbFwiKSB7XHJcbiAgICAgICAgICAgICYgKyBidXR0b24sXHJcbiAgICAgICAgICAgICYgKyAuYnV0dG9uIHtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxLjg3NWVtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4uY29tbWVudHMge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgQGluY2x1ZGUgbWVkaWEoXCI+bWVkaXVtXCIpIHtcclxuICAgICAgICAucGFnaW5hdGlvbiArICYge1xyXG4gICAgICAgICAgICBwYWRkaW5nLXRvcDogJGRlZmF1bHQtcGFkZGluZztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAuc2hvdy1jb21tZW50czpiZWZvcmUsXHJcbiAgICAuc2hvdy1jb21tZW50czphY3RpdmU6YmVmb3JlIHtcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgdG9wOiAwO1xyXG4gICAgfVxyXG4gICAgbm9zY3JpcHQge1xyXG4gICAgICAgIGZvbnQtZmFtaWx5OiAkc2Vjb25kYXJ5LWZvbnQtc3RhY2s7XHJcbiAgICAgICAgZm9udC1zaXplOiAxLjI1ZW07XHJcbiAgICAgICAgZm9udC1zdHlsZTogaXRhbGljO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogU3R5bGUgR3VpZGVcclxuICovXHJcbi5jb2xvci1ibG9jay1saXN0IHtcclxuICAgIG1hcmdpbi1ib3R0b206IC43NWVtO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgbGkge1xyXG4gICAgICAgIEBleHRlbmQgJXJvdW5kZWQ7XHJcbiAgICAgICAgY29sb3I6ICR3aGl0ZTtcclxuICAgICAgICB3aWR0aDogNi41ZW07XHJcbiAgICAgICAgaGVpZ2h0OiA2LjVlbTtcclxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgYm9yZGVyOiAkZGVmYXVsdC1ib3JkZXIgc29saWQgJGJsYWNrLWRhcms7XHJcbiAgICAgICAgbWFyZ2luOiAwIC4yNWVtIC41ZW07XHJcbiAgICAgICAgZm9udC1mYW1pbHk6ICRjb2RlLWZvbnQtc3RhY2s7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICAgICAgICBsaW5lLWhlaWdodDogNmVtO1xyXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xyXG4gICAgICAgICZbZGF0YS1jb2xvcj1cIiM1RjhBQTZcIl0ge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNUY4QUE2O1xyXG4gICAgICAgIH1cclxuICAgICAgICAmW2RhdGEtY29sb3I9XCIjRjlGOUY5XCJdIHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0Y5RjlGOTtcclxuICAgICAgICAgICAgY29sb3I6ICR0ZXh0LWNvbG9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICAmW2RhdGEtY29sb3I9XCIjNEY0RjRGXCJdIHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzRGNEY0RjtcclxuICAgICAgICB9XHJcbiAgICAgICAgJltkYXRhLWNvbG9yPVwiIzczNzM3M1wiXSB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM3MzczNzM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICZbZGF0YS1jb2xvcj1cIiNERERERERcIl0ge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjREREREREO1xyXG4gICAgICAgICAgICBjb2xvcjogJHRleHQtY29sb3I7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi5zdHlsZS1ndWlkZS1wYWdlIHtcclxuICAgIDpub3QoLnBhZ2UtZGVzY3JpcHRpb24pICsgaDNbaWRdIHtcclxuICAgICAgICBtYXJnaW4tdG9wOiAoMS41ICogJGRlZmF1bHQtcGFkZGluZyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb250YWlucyBlbWJlZGRlZCBtZWRpYSBwcm9wZXJseSBhbmQgYWxsb3dzIHRoZW0gdG8gYmUgZHluYW1pY2FsbHkgcmVzaXplZC5cclxuICovXHJcbi5tZWRpYS1jb250YWluZXIge1xyXG4gICAgaGVpZ2h0OiAwO1xyXG4gICAgcGFkZGluZy10b3A6IDMwcHg7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogNTYuNjUlO1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgIGVtYmVkLFxyXG4gICAgaWZyYW1lLFxyXG4gICAgb2JqZWN0LFxyXG4gICAgdmlkZW8ge1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgdG9wOiAwO1xyXG4gICAgICAgIGxlZnQ6IDA7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEZpeCBgaWZyYW1lYCBhbmQgYHZpZGVvYFxyXG4gKi9cclxuaWZyYW1lLFxyXG52aWRlbyB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIG1hcmdpbi1ib3R0b206ICRkZWZhdWx0LW1hcmdpbjtcclxuICAgIGJvcmRlcjogbm9uZTtcclxuICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcclxufVxyXG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxyXG4gICAgJEFTSURFU1xyXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5cclxuLyoqXHJcbiAqIFRoZSB3aWR0aCBvZiB0aGUgYXNpZGVzIGlzIHN0YXRpYyBhbmQgYW5kIGFsd2F5cyBmbG9hdGVkIHdpdGhpbiBhbiBhcnRpY2xlIG9yXHJcbiAqIGxpc3Qgb2YgYXJ0aWNsZXMuIFRoZSBtYXRoIGlzIGNhbGN1bGF0ZWQgYXMgaW4gdGhlIGFydGljbGVzIHBhcnRpYWwuXHJcbiAqL1xyXG5hc2lkZSB7XHJcbiAgICB3aWR0aDogJGFzaWRlLXdpZHRoO1xyXG4gICAgQGluY2x1ZGUgbWVkaWEoXCI+bWVkaXVtXCIpIHtcclxuICAgICAgICBmbG9hdDogbGVmdDtcclxuICAgICAgICBtYXJnaW4tbGVmdDogLSgkYXNpZGUtd2lkdGggKyAkZGVmYXVsdC1wYWRkaW5nKTtcclxuICAgIH1cclxuICAgIEBpbmNsdWRlIG1lZGlhKFwiPD1tZWRpdW1cIikge1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICY6bm90KC5hdXRob3IpIHtcclxuICAgICAgICAgICAgQGV4dGVuZCAlcm91bmRlZDtcclxuICAgICAgICAgICAgYmFja2dyb3VuZDogJGJsYWNrLWxpZ2h0O1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAxZW07XHJcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206ICRkZWZhdWx0LW1hcmdpbjtcclxuICAgICAgICAgICAgJjpsYXN0LWNoaWxkIHtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwLFxyXG4gICAgZmlnY2FwdGlvbiB7XHJcbiAgICAgICAgY2xlYXI6IGJvdGg7XHJcbiAgICAgICAgZm9udC1zaXplOiAuODc1ZW07XHJcbiAgICAgICAgQGluY2x1ZGUgbWVkaWEoXCI8PXNtYWxsXCIpIHtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAxZW07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8qYXNpZGUqLy5hdXRob3Ige1xyXG4gICAgZm9udC1mYW1pbHk6ICRzZWNvbmRhcnktZm9udC1zdGFjaztcclxuICAgIEBpbmNsdWRlIG1lZGlhKFwiPD1tZWRpdW1cIikge1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICBvcmRlcjogOTk5O1xyXG4gICAgICAgIC5hYm91dC1wYWdlICYge1xyXG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAkZGVmYXVsdC1tYXJnaW47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiAgICAuYXV0aG9yLWluZm9ybWF0aW9uIHtcclxuICAgICAgICBtYXJnaW4tYm90dG9tOiAuNWVtO1xyXG4gICAgICAgIGZvbnQtZmFtaWx5OiAkcHJpbWFyeS1mb250LXN0YWNrO1xyXG4gICAgICAgIGZvbnQtc2l6ZTogLjg3NWVtO1xyXG4gICAgICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcclxuICAgICAgICBAaW5jbHVkZSBtZWRpYShcIjw9bWVkaXVtXCIpIHtcclxuICAgICAgICAgICAgb3JkZXI6IDk5ODtcclxuICAgICAgICAgICAgcGFkZGluZy10b3A6ICRkZWZhdWx0LXBhZGRpbmc7XHJcbiAgICAgICAgICAgIGJvcmRlci10b3A6ICgkZGVmYXVsdC1ib3JkZXIgLyAyKSBzb2xpZCAkYmxhY2stbWVkaXVtO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhLFxyXG4gICAgICAgIHN0cm9uZyB7XHJcbiAgICAgICAgICAgIGNvbG9yOiBpbmhlcml0O1xyXG4gICAgICAgICAgICBmb250LWZhbWlseTogJHNlY29uZGFyeS1mb250LXN0YWNrO1xyXG4gICAgICAgICAgICBmb250LXdlaWdodDogNjAwO1xyXG4gICAgICAgICAgICBmb250LXN0eWxlOiBub3JtYWw7XHJcbiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLmF1dGhvci1iaW9ncmFwaHkge1xyXG4gICAgICAgIEBpbmNsdWRlIG1lZGlhKFwiPm1lZGl1bVwiKSB7XHJcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206ICRkZWZhdWx0LW1hcmdpbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgQGluY2x1ZGUgbWVkaWEoXCI8PW1lZGl1bVwiKSB7XHJcbiAgICAgICAgICAgIG9yZGVyOiA5OTk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLmF1dGhvci1uYW1lLFxyXG4gICAgLmF1dGhvci1hZ2UsXHJcbiAgICAuYXV0aG9yLWVtcGxveWVyLFxyXG4gICAgLmFydGljbGUtZGF0ZSxcclxuICAgIC5hcnRpY2xlLWxhYmVsIHtcclxuICAgICAgICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcclxuICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICBtYXJnaW4tYm90dG9tOiAuNWVtO1xyXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxLjQyOWVtO1xyXG4gICAgfVxyXG4gICAgLmFydGljbGUtbGFiZWwgYTphZnRlcixcclxuICAgIC5mZWF0dXJlZC1wZW5zLWxpbms6YWZ0ZXIge1xyXG4gICAgICAgIGNvbnRlbnQ6IFwiXFwwMGEwXFwyMTkyXCI7XHJcbiAgICB9XHJcbiAgICAuYXV0aG9yLWltYWdlIHtcclxuICAgICAgICBAZXh0ZW5kICVyb3VuZGVkO1xyXG4gICAgICAgIGJhY2tncm91bmQtc2l6ZTogMTAwJTtcclxuICAgICAgICB3aWR0aDogIDYuMjVlbTtcclxuICAgICAgICBoZWlnaHQ6IDYuMjVlbTtcclxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAuNjI1ZW07XHJcbiAgICB9XHJcbiAgICAuYXJ0aWNsZS10YWdzIHtcclxuICAgICAgICBkaXNwbGF5OiB0YWJsZS1jZWxsOyAvLyBkb27igJl0IHdyYXAgYXJvdW5kIGAuYXV0aG9yLWltYWdlYFxyXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxLjQyOWVtO1xyXG4gICAgfVxyXG5cclxuQGluY2x1ZGUgbWVkaWEoXCI+bWVkaXVtXCIpIHtcclxuICAgIC5mZWF0dXJlZC1wZW5zLFxyXG4gICAgLnJlbGF0ZWQtYXJ0aWNsZXMge1xyXG4gICAgICAgIG1hcmdpbi10b3A6ICRkZWZhdWx0LW1hcmdpbjtcclxuICAgIH1cclxufVxyXG4uZmVhdHVyZWQtcGVucy10aXRsZSxcclxuLnJlbGF0ZWQtYXJ0aWNsZXMtdGl0bGUge1xyXG4gICAgbWFyZ2luLXRvcDogMDtcclxufVxyXG4uZmVhdHVyZWQtcGVucy1saW5rIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICBtYXJnaW4tdG9wOiAoJGRlZmF1bHQtbWFyZ2luIC8gMik7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xyXG4gICAgQGluY2x1ZGUgbWVkaWEoXCI8PW1lZGl1bVwiKSB7XHJcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogJGRlZmF1bHQtbWFyZ2luO1xyXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIH1cclxufVxyXG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxyXG4gICAgJEZPT1RFUlxyXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5cclxuZm9vdGVyIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICR0ZXh0LWNvbG9yO1xyXG4gICAgY29sb3I6ICR0ZXh0LWNvbG9yLWxpZ2h0O1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBwYWRkaW5nOiAkZGVmYXVsdC1wYWRkaW5nIDA7XHJcbiAgICBib3JkZXItdG9wOiAuMjg2ZW0gc29saWQgJGJsdWU7XHJcbiAgICBmb250LWZhbWlseTogJHNlY29uZGFyeS1mb250LXN0YWNrO1xyXG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICBAaW5jbHVkZSBncmFkaWVudCh0cmFuc3BhcmVudCwgJGJsYWNrLW1lZGl1bSk7XHJcbn1cclxuICAgIC5jb3B5cmlnaHQsXHJcbiAgICAuc29jaWFsLWljb24tbGlzdCB7XHJcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICBAaW5jbHVkZSBtZWRpYShcIj5tZWRpdW1cIikge1xyXG4gICAgICAgICAgICBmbG9hdDogbGVmdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgQGluY2x1ZGUgbWVkaWEoXCI8PW1lZGl1bVwiKSB7XHJcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLnNvY2lhbC1pY29uLWxpc3Qge1xyXG4gICAgICAgIGZsb2F0OiByaWdodDtcclxuICAgICAgICBtYXJnaW4tdG9wOiAuMzEyNWVtO1xyXG4gICAgICAgIEBpbmNsdWRlIG1lZGlhKFwiPD1tZWRpdW1cIikge1xyXG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAuNjI1ZW07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxpIHtcclxuICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICAgICAgICArIGxpIHtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxZW07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAgICAgLmhvbWUtbGluayxcclxuICAgICAgICAuY29weXJpZ2h0LWxpbmssXHJcbiAgICAgICAgLnN0eWxlLWd1aWRlLWxpbmsge1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5ob21lLWxpbmsge1xyXG4gICAgICAgICAgICB3aWR0aDogNTBweDtcclxuICAgICAgICAgICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDFlbTtcclxuICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxuICAgICAgICAgICAgdGV4dC1pbmRlbnQ6IDEwMCU7XHJcbiAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbiAgICAgICAgICAgIEBpbmNsdWRlIHRyYW5zaXRpb247XHJcbiAgICAgICAgICAgICY6aG92ZXIsXHJcbiAgICAgICAgICAgICY6Zm9jdXMsXHJcbiAgICAgICAgICAgICY6YWN0aXZlIHtcclxuICAgICAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAmOmFjdGl2ZSB7XHJcbiAgICAgICAgICAgICAgICBAaW5jbHVkZSB0cmFuc2xhdGUzZCgwLCAuMTQzZW0sIDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIEBpbmNsdWRlIG1lZGlhKFwiPD1zbWFsbFwiKSB7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IC41ZW07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3ZnIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLmNvcHlyaWdodC1saW5rLFxyXG4gICAgICAgIC5zdHlsZS1ndWlkZS1saW5rIHtcclxuICAgICAgICAgICAgY29sb3I6ICR0ZXh0LWNvbG9yLWxpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBAaW5jbHVkZSBtZWRpYShcIjw9c21hbGxcIikge1xyXG4gICAgICAgICAgICAuc3R5bGUtZ3VpZGUtbGluayB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAuZm9vdGVyLXNwYWNlciB7XHJcbiAgICAgICAgICAgIGNvbG9yOiAkdGV4dC1jb2xvci1hbHQ7XHJcbiAgICAgICAgICAgIEBpbmNsdWRlIG1lZGlhKFwiPD1zbWFsbFwiKSB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRDT0RFIEFORCBDT0RFIEJMT0NLU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuY29kZSxcbmtiZCxcbnNhbXAsXG52YXIsXG4ubW9ub3NwYWNlIHtcbiAgICBmb250LWZhbWlseTogJGNvZGUtZm9udC1zdGFjaztcbiAgICBmb250LXNpemU6IC44NzVlbTtcbn1cbiAgICBwIGNvZGUsXG4gICAgb2wgY29kZSxcbiAgICB1bCBjb2RlLFxuICAgIGlucyxcbiAgICBrYmQsXG4gICAgbWFyayxcbiAgICBzYW1wLFxuICAgIHZhciB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoJGJsdWUsICRvcGFjaXR5LWxvdyk7XG4gICAgICAgIHBhZGRpbmc6IC4yMTVlbTtcbiAgICAgICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICAgICAgICBib3JkZXItcmFkaXVzOiAuMjVlbTtcbiAgICB9XG5wcmUge1xuICAgIG1hcmdpbi10b3A6IDA7IC8vIG92ZXJyaWRlIGBub3JtYWxpemUuY3NzYCBhbmQgYG1hcmdpbi1ib3R0b21gIGluIGBfbGF5b3V0LnNjc3NgXG4gICAgJjpub3QoOmxhc3QtY2hpbGQpIHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogJGRlZmF1bHQtbWFyZ2luO1xuICAgIH1cbiAgICAmOm5vdCguY29kZXBlbikge1xuICAgICAgICBAZXh0ZW5kICVyb3VuZGVkO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmxhY2stbGlnaHQ7XG4gICAgICAgIHBhZGRpbmc6IDEuNWVtIDEuNWVtIDFlbTtcbiAgICAgICAgb3ZlcmZsb3cteDogYXV0bztcbiAgICAgICAgb3ZlcmZsb3cteTogaGlkZGVuO1xuICAgICAgICBsaW5lLWhlaWdodDogMS41ZW07XG4gICAgICAgIGNvZGUge1xuICAgICAgICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIH1cbiAgICB9XG59XG4uaGlnaGxpZ2h0IHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG4vKipcbiAqIGBkYXRhLWxhbmdgIGlzIGFsd2F5cyBhbiBhdHRyaWJ1dGUgb24gYSBjb2RlIGVsZW1lbnQgaW5zaWRlIGBkaXYuaGlnaGxpZ2h0YFxuICovXG5bZGF0YS1sYW5nXSB7XG4gICAgcGFkZGluZy10b3A6ICRkZWZhdWx0LXBhZGRpbmc7XG4gICAgJjpiZWZvcmUge1xuICAgICAgICBAZXh0ZW5kICVyb3VuZGVkO1xuICAgICAgICBjb250ZW50OiBhdHRyKGRhdGEtbGFuZyk7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR0ZXh0LWNvbG9yLWFsdDtcbiAgICAgICAgY29sb3I6ICR3aGl0ZTtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICBwYWRkaW5nOiAwIDEuNWVtO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgICAgZm9udC1mYW1pbHk6ICRzZWNvbmRhcnktZm9udC1zdGFjaztcbiAgICAgICAgZm9udC1zaXplOiAxLjI1ZW07XG4gICAgICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyLjRlbTtcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogLjNlbSAuM2VtIDAgMDtcbiAgICAgICAgQGluY2x1ZGUgdHJhbnNpdGlvbjtcbiAgICB9XG4gICAgQGVhY2ggJGxhbmd1YWdlIGluICRjb2RpbmctbGFuZ3VhZ2VzIHtcbiAgICAgICAgJG5hbWU6ICBudGgoJGxhbmd1YWdlLCAxKTtcbiAgICAgICAgJGNvbG9yOiBudGgoJGxhbmd1YWdlLCAyKTtcbiAgICAgICAgJi5sYW5ndWFnZS0jeyRuYW1lfTpiZWZvcmUge1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI3skY29sb3J9O1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEdpdGh1Yi1zdHlsZSBDb2RlIEhpZ2hsaWdodGluZ1xuICovXG4uaGlnaGxpZ2h0IHtcbiAgICAuZXJyIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFcnJvclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGNvcmFsO1xuICAgICAgICBjb2xvcjogZmlyZWJyaWNrO1xuICAgICAgICBmb250LXdlaWdodDogNjAwO1xuICAgIH1cbiAgICAuYywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDb21tZW50XG4gICAgLmNtLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29tbWVudCAtIE11bHRpbGluZVxuICAgIC5jcCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbW1lbnQgLSBQcmVwcm9jXG4gICAgLmMxLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29tbWVudCAtIFNpbmdsZVxuICAgIC5jcyB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbW1lbnQgLSBTcGVjaWFsXG4gICAgICAgIGNvbG9yOiAkdGV4dC1jb2xvci1hbHQ7XG4gICAgICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgICB9XG4gICAgLmdzLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2VuZXJpYyAtIFN0cm9uZ1xuICAgIC5rLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEtleXdvcmRcbiAgICAua2MsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBLZXl3b3JkIC0gQ29uc3RhbnRcbiAgICAua2QsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBLZXl3b3JkIC0gRGVjbGFyYXRpb25cbiAgICAua3AsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBLZXl3b3JkIC0gUHNldWRvXG4gICAgLmtyLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gS2V5d29yZCAtIFJlc2VydmVkXG4gICAgLmt0LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gS2V5d29yZCAtIFR5cGVcbiAgICAubmMsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOYW1lIC0gQ2xhc3NcbiAgICAubmUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOYW1lIC0gRXhjZXB0aW9uXG4gICAgLm5mLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmFtZSAtIEZ1bmN0aW9uXG4gICAgLm8sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3BlcmF0b3JcbiAgICAub3cgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPcGVyYXRvciAtIFdvcmRcbiAgICAgICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICB9XG4gICAgLmdyLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2VuZXJpYyAtIEVycm9yXG4gICAgLmd0LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2VuZXJpYyAtIFRyYWNlYmFja1xuICAgIC5uZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5hbWUgLSBFeGNlcHRpb25cbiAgICAubmYsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOYW1lIC0gRnVuY3Rpb25cbiAgICAucywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMaXRlcmFsIC0gU3RyaW5nXG4gICAgLnNiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTGl0ZXJhbCAtIFN0cmluZyBCYWNrdGlja1xuICAgIC5zYywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExpdGVyYWwgLSBTdHJpbmcgQ2hhclxuICAgIC5zZCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExpdGVyYWwgLSBTdHJpbmcgRG9jXG4gICAgLnMxLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTGl0ZXJhbCAtIFN0cmluZyBTaW5nbGVcbiAgICAuczIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMaXRlcmFsIC0gU3RyaW5nIERvdWJsZVxuICAgIC5zZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExpdGVyYWwgLSBTdHJpbmcgRXNjYXBlXG4gICAgLnNoLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTGl0ZXJhbCAtIFN0cmluZyBIZXJlZG9jXG4gICAgLnNpLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTGl0ZXJhbCAtIFN0cmluZyBJbnRlcnBvbFxuICAgIC5zeCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExpdGVyYWwgLSBTdHJpbmcgT3RoZXJcbiAgICAgICAgY29sb3I6IGZpcmVicmljaztcbiAgICB9XG4gICAgLmdpLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2VuZXJpYyAtIEluc2VydGVkXG4gICAgLmdpIC54IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2VuZXJpYyAtIEluc2VydGVkIFNwZWNpZmljXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHR1cnF1b2lzZTtcbiAgICB9XG4gICAgLmdkLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2VuZXJpYyAtIERlbGV0ZWRcbiAgICAuZ2QgLnggeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmljIC0gRGVsZXRlZCBTcGVjaWZpY1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGNvcmFsO1xuICAgIH1cbiAgICAuZ2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmljIC0gRW1waFxuICAgICAgICBmb250LXN0eWxlOiBpdGFsaWM7XG4gICAgfVxuICAgIC5tLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExpdGVyYWwgLSBOdW1iZXJcbiAgICAuaWwsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMaXRlcmFsIC0gTnVtYmVyIEludGVnZXIgTG9uZ1xuICAgIC5tZiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExpdGVyYWwgLSBOdW1iZXIgRmxvYXRcbiAgICAubWgsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMaXRlcmFsIC0gTnVtYmVyIEhleFxuICAgIC5taSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExpdGVyYWwgLSBOdW1iZXIgSW50ZWdlclxuICAgIC5tbywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExpdGVyYWwgLSBOdW1iZXIgT2N0XG4gICAgLm5iLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmFtZSAtIEJ1aWx0aW5cbiAgICAubm8sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOYW1lIC0gQ29uc3RhbnRcbiAgICAubnYsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOYW1lIC0gVmFyaWFibGVcbiAgICAudmMsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOYW1lIC0gVmFyaWFibGUgQ2xhc3NcbiAgICAudmcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOYW1lIC0gVmFyaWFibGUgR2xvYmFsXG4gICAgLnZpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmFtZSAtIFZhcmlhYmxlIEluc3RhbmNlXG4gICAgICAgIGNvbG9yOiBjYWRldGJsdWU7XG4gICAgfVxuICAgIC5zciB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExpdGVyYWwgLSBTdHJpbmcgUmVnZXhcbiAgICAgICAgY29sb3I6IGZvcmVzdGdyZWVuO1xuICAgIH1cbiAgICAuYnAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOYW1lIC0gQnVpbHRpbiBQc2V1ZG9cbiAgICAuZ2gsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmljIC0gSGVhZGluZ1xuICAgIC5nbywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdlbmVyaWMgLSBPdXRwdXRcbiAgICAuZ3AsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmljIC0gUHJvbXB0XG4gICAgLm5uIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmFtZSAtIE5hbWVzcGFjZVxuICAgICAgICBjb2xvcjogJHRleHQtY29sb3ItYWx0O1xuICAgIH1cbiAgICAuZ3UsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmljIC0gU3ViaGVhZGluZ1xuICAgIC53IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRleHQgLSBXaGl0ZXNwYWNlXG4gICAgICAgIGNvbG9yOiAkdGV4dC1jb2xvci1saWdodDtcbiAgICB9XG4gICAgLmt0LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gS2V5d29yZCAtIFR5cGVcbiAgICAubmEsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOYW1lIC0gQXR0cmlidXRlXG4gICAgLm5jLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmFtZSAtIENsYXNzXG4gICAgLm50IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmFtZSAtIFRhZ1xuICAgICAgICBjb2xvcjogJGJsdWU7XG4gICAgfVxuICAgIC5uaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5hbWUgLSBFbnRpdHlcbiAgICAuc3MgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMaXRlcmFsIC0gU3RyaW5nIFN5bWJvbFxuICAgICAgICBjb2xvcjogc2xhdGVibHVlO1xuICAgICAgICBjb2xvcjogcmViZWNjYXB1cnBsZTtcbiAgICB9XG59XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRJQ09OU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuLy8gSGlkZSBvdXIgU1ZHcyBpbmplY3RlZCBqdXN0IGJlbG93IGA8Ym9keT5gXG4uc3ZnLW1hc3RlciB7XG4gICAgZGlzcGxheTogbm9uZTtcbn1cblxuLyphKi8uaWNvbiB7XG4gICAgb3BhY2l0eTogJG9wYWNpdHktaGlnaDtcbiAgICBoZWlnaHQ6ICRpY29uLXNpemU7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB0ZXh0LWluZGVudDogMTAwJTtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIEBpbmNsdWRlIHRyYW5zaXRpb247XG4gICAgJjpob3ZlcixcbiAgICAmOmZvY3VzLFxuICAgICY6YWN0aXZlIHtcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgIH1cbiAgICAmOmFjdGl2ZSB7XG4gICAgICAgIEBpbmNsdWRlIHRyYW5zbGF0ZTNkKDAsIC4xNGVtLCAwKTtcbiAgICB9XG4gICAgQGVhY2ggJGJyYW5kIGluICRicmFuZHMge1xuICAgICAgICAkbmFtZTogIG50aCgkYnJhbmQsIDEpO1xuICAgICAgICAkcmF0aW86IG50aCgkYnJhbmQsIDMpO1xuICAgICAgICAmLiN7JG5hbWV9LWljb24sXG4gICAgICAgICYuI3skbmFtZX0tbGluayB7XG4gICAgICAgICAgICB3aWR0aDogKCRyYXRpbyAqICRpY29uLXNpemUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN2ZyB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1cbn1cbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJFBSSU5UXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5AaW5jbHVkZSBtZWRpYShcInByaW50XCIpIHtcbiAgICBuYXYsXG4gICAgLnJlbGF0ZWQtYXJ0aWNsZXMsXG4gICAgLnBhZ2luYXRpb24sXG4gICAgLmNvbW1lbnRzLFxuICAgIGZvb3RlciAuaG9tZS1saW5rLFxuICAgIC5jb3B5cmlnaHQtc3BhY2VyLFxuICAgIGZvb3RlciAuc3R5bGUtZ3VpZGUtbGluayxcbiAgICAuc29jaWFsLWljb24tbGlzdCB7XG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuICAgIGJ1dHRvbixcbiAgICAuYnV0dG9uIHtcbiAgICAgICAgY29sb3I6ICR0ZXh0LWNvbG9yO1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAkdGV4dC1jb2xvcjtcbiAgICAgICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0= */