{"version":3,"sources":["components/widget.scss","abstracts/_mixins.scss","abstracts/_variables.scss"],"names":[],"mappings":"AAgBA,iBATA,AAkBK,QAjBD,oBAAa,AAAb,oBAAa,AAAb,aAAa,AACb,4BAAsB,AAAtB,6BAAsB,AAAtB,0BAAsB,AAAtB,qBAAsB,CAKzB,AAHG,cCsFA,WAAW,AACX,MAAO,CDrFN,AAFD,yCC2FI,WAAW,AACX,aAAc,CACjB,AD7FD,oBCgGI,UAAW,CACd,AD5FL,uBACI,wBAAoB,AAApB,oBAAoB,ACsfZ,mBCtdsB,AD+d1B,iCAlBqD,AASjD,gBC1Ra,ADmSjB,oCAlBqD,AD1ezD,6BAA8B,CAMjC,AAVD,6BAQQ,aAAS,CACZ","file":"widget.min.css","sourcesContent":["////\n/// Widget\n/// @group components\n////\n@import \"../imports\";\n\n\n.widget {\n    display: flex;\n    flex-direction: column;\n\n    aside & {\n        @include clear;\n    }\n}\n\n.widget-related-anchor {\n    align-self: flex-end;\n    @include v(margin-top, medium);\n    @include v(font-weight, bold);\n    text-underline-position: under;\n\n    &::after {\n        // NO-BREAK SPACE, LEFTWARDS ARROW WITH HOOK\n        content: \" ↩︎\";\n    }\n}\n","////\n/// Mixins\n/// @group abstracts\n////\n\n\n///\n/// Add a border-radius.\n///\n/// @author Chris Burnell\n///\n/// @param {String} $thickness - Thickness of Border Radius\n/// @param {String} $border-radius - Type of Border Radius\n///\n/// @example scss - Zero parameters\n///   @include radius;\n///   // border-radius: 0.375rem;\n///\n/// @example scss - One parameter\n///   @include radius(1em);\n///   // border-radius: 1em;\n///\n@mixin border-radius($thickness: default, $border-radius: null) {\n    @if not is-length($thickness) {\n        @if map-has-key($border-radii, $thickness) {\n            $thickness: map-get($border-radii, $thickness);\n        }\n        @else if is-edge($thickness) {\n            $border-radius: $thickness;\n            $thickness: $border-radius-default;\n        }\n        @else {\n            @error \"There is no `thickness` named `#{$thickness}` in `$border-radii`. `thickness` should be one of `#{map-keys($border-radii)}`.\";\n        }\n    }\n\n    @if $border-radius and is-edge($border-radius) {\n        $top-left: if($border-radius == \"top\" or $border-radius == \"left\" or $border-radius == \"top-left\", $thickness, 0);\n        $top-right: if($border-radius == \"top\" or $border-radius == \"right\" or $border-radius == \"top-right\", $thickness, 0);\n        $bottom-right: if($border-radius == \"bottom\" or $border-radius == \"right\" or $border-radius == \"bottom-right\", $thickness, 0);\n        $bottom-left: if($border-radius == \"bottom\" or $border-radius == \"left\" or $border-radius == \"bottom-left\", $thickness, 0);\n\n        $border-radius: $top-left $top-right $bottom-right $bottom-left;\n    }\n    @else {\n        $border-radius: $thickness;\n    }\n\n    background-clip: padding-box;\n    border-radius: $border-radius;\n}\n\n\n///\n/// Change the case of text and apply appropriate letter-spacing.\n///\n/// @param {String} $case - Case of Text\n/// @param {String} $letter-spacing [null] - Letter-spacing of Text\n///\n/// @example scss\n///   @include case(uppercase);\n///   // text-transform: uppercase;\n///   // letter-spacing: 1px;\n///\n@mixin case($case, $letter-spacing: null) {\n    @if not $case {\n        @error \"case() expects at least one parameter.\";\n    }\n\n    text-transform: $case;\n\n    @if $letter-spacing != null {\n        letter-spacing: $letter-spacing;\n    }\n    @else if $case == \"uppercase\" {\n        letter-spacing: $letter-spacing-uppercase;\n    }\n}\n\n\n///\n/// Clear an element of floats.\n///\n/// @example scss\n///   @include clear;\n///   // clear: both;\n///   // zoom: 1;\n///   // &::before,\n///   // &::after {\n///   //     content: \"\";\n///   //     display: table;\n///   // }\n///   // &::after {\n///   //     clear: both;\n///   // }\n///\n@mixin clear() {\n    clear: both;\n    zoom: 1;\n\n    &::before,\n    &::after {\n        content: \"\";\n        display: table;\n    }\n\n    &::after {\n        clear: both;\n    }\n}\n\n\n///\n/// Specify a font-family.\n///\n/// @author Chris Burnell\n///\n/// @param {String} $family - Font-family value\n///\n/// @example scss - One family\n///   @include font-family(default);\n///   // font-family: \"Proxima Nova\", sans-serif;\n///\n/// @example scss - One family, one display\n///   @include font-family(serif, auto);\n///   // font-family: Georgia, serif;\n///\n/// @throw Error if no parameters are passed.\n/// @throw Error if parameter passed does not match a key in $font-families.\n///\n@mixin font-family($family) {\n    @if not $family {\n        @error \"font-family() expects at least one parameter.\";\n    }\n\n    @if not map-has-key($font-families, $family) {\n        @error \"There is no `font-family` named `#{$family}` in `$font-families`. `font-family` should be one of `#{map-keys($font-families)}`.\";\n    }\n\n    @include v(font-family, $family);\n\n    @if $family == \"monospace\" {\n        font-variant-ligatures: none;\n    }\n}\n\n\n///\n/// Hyphenate text.\n///\n/// @example scss\n///   @include hyphenate;\n///   // overflow-wrap: break-word;\n///   // hyphens: auto;\n///\n@mixin hyphenate() {\n    overflow-wrap: break-word;\n    hyphens: auto;\n}\n\n\n///\n/// Make text non-selectable.\n///\n/// @example scss\n///   @include non-selectable;\n///   // user-select: none;\n///   // -webkit-touch-callout: default;\n///   // -webkit-touch-callout: none;\n///\n@mixin non-selectable() {\n    user-select: none;\n    -webkit-touch-callout: default;\n    -webkit-touch-callout: none;\n}\n\n\n///\n/// Absolutely position an element.\n///\n/// @author Chris Burnell\n///\n/// @param {String} $position - Position of the element\n/// @param {String} $offset [0] - How much to offset from the position\n///\n/// @example scss\n///   @include absolute(bottom-left);\n///   // position: absolute;\n///   // bottom: 0;\n///   // left: 0;\n///\n/// @example scss\n///   @include absolute(right, 1em);\n///   // position: absolute;\n///   // right: 1em;\n///   // top: 50%;\n///   // transform: translateY(-50%);\n///\n/// @example scss\n///   @include absolute(top-full);\n///   // position: absolute;\n///   // top: 0;\n///   // right: 0;\n///   // left: 0;\n///\n/// @example scss\n///   @include absolute(top-full, 1em);\n///   // position: absolute;\n///   // top: 1em;\n///   // right: 0;\n///   // left: 0;\n///\n/// @example scss\n///   @include absolute(top-full-offset, 1em);\n///   // position: absolute;\n///   // top: 1em;\n///   // right: 1em;\n///   // left: 1em;\n///\n/// @throw Error if no parameters are passed.\n///\n@mixin absolute($position, $offset: 0) {\n\n    @if not $position {\n        @error \"absolute() expects one parameter.\";\n    }\n    @else if $position == none {\n        position: relative;\n        top: auto;\n        right: auto;\n        bottom: auto;\n        left: auto;\n    }\n    @else if $position == center {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translateX(-50%) translateY(-50%);\n    }\n    @else if str-index(#{$position}, \"full\") {\n        position: absolute;\n\n        @if str-index(#{$position}, \"top\") {\n            top: $offset;\n\n            @if str-index(#{$position}, \"offset\") {\n                right: $offset;\n                left: $offset;\n            }\n            @else {\n                right: 0;\n                left: 0;\n            }\n        }\n        @else if str-index(#{$position}, \"right\") {\n            right: $offset;\n\n            @if str-index(#{$position}, \"offset\") {\n                top: $offset;\n                bottom: $offset;\n            }\n            @else {\n                top: 0;\n                bottom: 0;\n            }\n        }\n        @else if str-index(#{$position}, \"bottom\") {\n            bottom: $offset;\n\n            @if str-index(#{$position}, \"offset\") {\n                right: $offset;\n                left: $offset;\n            }\n            @else {\n                right: 0;\n                left: 0;\n            }\n        }\n        @else if str-index(#{$position}, \"left\") {\n            left: $offset;\n\n            @if str-index(#{$position}, \"offset\") {\n                top: $offset;\n                bottom: $offset;\n            }\n            @else {\n                top: 0;\n                bottom: 0;\n            }\n        }\n        @else {\n            top: $offset;\n            right: $offset;\n            bottom: $offset;\n            left: $offset;\n        }\n    }\n    @else if is-edge($position) {\n        position: absolute;\n\n        @if str-index(#{$position}, \"top\") {\n            top: $offset;\n            @if not str-index(#{$position}, \"-\") {\n                left: 50%;\n                transform: translateX(-50%);\n            }\n        }\n        @if str-index(#{$position}, \"right\") {\n            right: $offset;\n            @if not str-index(#{$position}, \"-\") {\n                top: 50%;\n                transform: translateY(-50%);\n            }\n        }\n        @if str-index(#{$position}, \"bottom\") {\n            bottom: $offset;\n            @if not str-index(#{$position}, \"-\") {\n                left: 50%;\n                transform: translateX(-50%);\n            }\n        }\n        @if str-index(#{$position}, \"left\") {\n            left: $offset;\n            @if not str-index(#{$position}, \"-\") {\n                top: 50%;\n                transform: translateY(-50%);\n            }\n        }\n    }\n}\n\n\n///\n/// Define characters for quotes\n///\n/// @author Chris Burnell\n///\n/// @example scss\n///   @include quotes;\n///   // quotes: \"“\" \"”\" \"‘\" \"’\";\n///\n@mixin quotes() {\n    hanging-punctuation: first;\n\n    &,\n    :lang(en) & {\n        quotes: \"“\" \"”\" \"‘\" \"’\";\n    }\n\n    :lang(de) &,\n    :lang(pl) & {\n        quotes: \"„\" \"“\" \"‚\" \"‘\";\n    }\n\n    :lang(fr) & {\n        quotes: \"« \" \" »\" \"‹ \" \" ›\";\n    }\n}\n\n\n///\n/// Reset Font Size\n///\n/// @author Chris Burnell\n///\n/// @example scss\n///   ul {\n///       @include reset-font-size(li);\n///   }\n///   // ul {\n///   //     font-size: 0;\n///   // }\n///   // ul > li {\n///   //     font-size: 1rem;\n///   // }\n///\n@mixin reset-font-size($child: null, $font-size: default) {\n    font-size: 0;\n\n    @if ($child) {\n        #{$child} {\n            @include v(font-size, $font-size);\n        }\n    }\n    @else {\n        & > * {\n            @include v(font-size, $font-size);\n        }\n    }\n}\n\n\n///\n/// Generate transitions based on flexible input parameters.\n/// Pass zero or more properties and zero to two further parameters.\n/// If passing two or more properties, quotation marks must be used.\n///\n/// @author Chris Burnell\n///\n/// @param {String} $values - Values\n///\n/// @example scss - Zero parameters\n///   @include transition;\n///   // transition: all 0.2s ease;\n///\n/// @example scss - One property\n///   @include transition(color);\n///   // transition: color 0.2s ease;\n///\n/// @example scss - Two properties\n///   @include transition(color, border);\n///   // transition: color 0.2s ease, border 0.2s ease;\n///\n/// @example scss - One property, one duration\n///   @include transition(color 0.5s);\n///   // transition: color 0.5s ease;\n///\n/// @example scss - One property, one duration, one timing function\n///   @include transition(color 1s linear);\n///   // transition: color 1s linear;\n///\n/// @example scss - Two properties, two durations, two timing functions\n///   @include transition(color 2s ease-in-out, border 1s linear);\n///   // transition: color 2s ease-in-out, border 1s linear;\n///\n@mixin transition($transitions...) {\n    $transition: ();\n\n    // if no parameter, transition all with default duration and function\n    @if length($transitions) == 0 {\n        $transition: all #{$transition-duration-default} #{$transition-function};\n    }\n    // if parameter just set to `none` then just transition nothing\n    @else if $transitions == none {\n        $transition: none;\n    }\n    // if the parameter contains a comma then operating on multiple properties\n    @else if str-index(#{$transitions}, \",\") {\n        @each $transition-segment in $transitions {\n            $transition: append($transition, unpack-transition($transition-segment), comma);\n        }\n    }\n    @else {\n        $transition: unpack-transition($transitions...);\n    }\n\n    transition: $transition;\n}\n\n\n///\n/// Describes CSS changes to the browser; to be coupled with any transitions.\n///\n/// @author Chris Burnell\n///\n/// @param {String} $values - Values\n///\n/// @example scss - One parameter\n///   @include will-change(color);\n///   // will-change: color;\n///\n/// @example scss - Multiple parameters\n///   @include will-change(color, border);\n///   // will-change: color, border;\n///\n/// @throw Error if no parameters are passed.\n///\n@mixin will-change($changes...) {\n    @if length($changes) == 0 {\n        @error \"will-change() expects at least one parameter.\";\n    }\n\n    will-change: $changes;\n}\n\n\n///\n/// Select a CSS variable and provide a fallback\n///\n@mixin v($property, $variable, $important: false, $show-fallback: true) {\n    $map-name: map-get($property-maps, $property);\n    $nest-name: null;\n    $nest-map-name: null;\n    $map: null;\n    $variable-fallback: null;\n    $variable-output: null;\n\n    // if a Nested List, we need to go deeper\n    @if type-of($map-name) == \"list\" {\n        $nest-name: nth($map-name, 1);\n        $nest-map-name: nth($map-name, 2);\n    }\n\n    // if it is a Nested List\n    @if $nest-name {\n        // get the map from nested map-name\n        $map: map-get($variable-maps, $nest-name);\n        // get the nested map\n        $nest-map: map-get($map, $nest-map-name);\n        // fallback value, get the var value from the nested map\n        $variable-fallback: map-get($nest-map, $variable);\n        // our CSS Variable output\n        $variable-output: var(--#{$nest-name}-#{$nest-map-name}-#{$variable});\n    }\n    @else {\n        // get the map from map name\n        $map: map-get($variable-maps, $map-name);\n        // fallback value, grab the variable's value from the map\n        $variable-fallback: map-get($map, $variable);\n        // our CSS Variable output\n        $variable-output: var(--#{$map-name}-#{$variable});\n    }\n\n    // if show fallback is not overridden to be null\n    @if $show-fallback {\n        @if $important {\n            #{$property}: $variable-fallback !important;\n        }\n        @else {\n            #{$property}: $variable-fallback;\n        }\n    }\n\n    // CSS Variable\n    @if $important {\n        #{$property}: $variable-output !important;\n    }\n    @else {\n        #{$property}: $variable-output;\n    }\n}\n\n\n///\n/// Visually hide an element properly.\n///\n@mixin visually-hidden() {\n    width:  1px !important;\n    height: 1px !important;\n    padding: 0 !important;\n    margin: -1px !important;\n    border: 0 !important;\n    overflow: hidden !important;\n    position: absolute !important;\n    white-space: nowrap !important;\n    clip: rect(0 0 0 0) !important;\n    clip-path: inset(100%) !important;\n}\n","////\n/// Variables\n/// @group abstracts\n////\n\n\n/// @type Length\n$base-font-size: 16px !default;\n\n\n/// @type Length\n$wrapper-width-small:  500px !default;\n/// @type Length\n$wrapper-width-medium: 800px !default;\n/// @type Length\n$wrapper-width-large: 1140px !default;\n/// @type Map\n/// @prop {String} Breakpoint name\n/// @prop {Length} Breakpoint value\n$breakpoints: (\n    small:  $wrapper-width-small,\n    medium: $wrapper-width-medium,\n    large:  $wrapper-width-large\n) !default;\n\n\n/// @type Length\n$gutter-width: 1.250rem !default;\n/// @type Length\n$aside-width: 15.875rem !default;\n/// @type Length\n$article-width: 50.625rem !default;\n// 21em\n/// @type Length\n$line-length-minimum: 336px !default;\n// 30em\n/// @type Length\n$line-length-maximum: 480px !default;\n/// @type Length\n$line-length-responsive: calc(#{$line-length-minimum} + (#{$line-length-maximum / ($line-length-maximum * 0 + 1)} - #{$line-length-minimum / ($line-length-minimum * 0 + 1)}) * ((100vw - #{$wrapper-width-small}) / (#{$wrapper-width-large / ($wrapper-width-large * 0 + 1)} - #{$wrapper-width-small / ($wrapper-width-small * 0 + 1)})));\n\n\n/// @type Length\n$measure-small:           0.625rem !default;\n/// @type Length\n$measure-small-relative:  0.625em !default;\n/// @type Length\n$measure-small-proportional:  2vmin !default;\n/// @type Length\n$measure-medium:          1.250rem !default;\n/// @type Length\n$measure-medium-relative: 1.250em !default;\n/// @type Length\n$measure-medium-proportional: 4vmin !default;\n/// @type Length\n$measure-large:           2.250rem !default;\n/// @type Length\n$measure-large-relative:  2.250em !default;\n/// @type Length\n$measure-large-proportional:  8vmin !default;\n/// @type Length\n$measure-one:                 1rem !default;\n/// @type Length\n$measure-one-relative:        1em !default;\n/// @type Map\n/// @prop {String} Measure name\n/// @prop {Length} Measure value\n/// @see {Mixin} v\n$measures: (\n    small:               $measure-small,\n    small-relative:      $measure-small-relative,\n    small-proportional:  $measure-small-proportional,\n    medium:              $measure-medium,\n    medium-relative:     $measure-medium-relative,\n    medium-proportional: $measure-medium-proportional,\n    large:               $measure-large,\n    large-relative:      $measure-large-relative,\n    large-proportional:  $measure-large-proportional,\n    one:                 $measure-one,\n    one-relative:        $measure-one-relative\n) !default;\n\n\n/// @type Number\n$opacity-alpha: 0.900 !default;\n/// @type Number\n$opacity-beta:  0.700 !default;\n/// @type Number\n$opacity-gamma: 0.100 !default;\n/// @type Number\n$opacity-delta: 0.050 !default;\n\n/// @type Map\n/// @prop {String} Opacity name\n/// @prop {Number} Opacity value\n/// @see {Function} opacities\n/// @see {Mixin} v\n$opacities: (\n    alpha: $opacity-alpha,\n    beta:  $opacity-beta,\n    gamma: $opacity-gamma,\n    delta: $opacity-delta\n) !default;\n\n\n// this allows transparency to be transitioned to a different color\n/// @type Color\n$color-transparent: rgba(0, 0, 0, 0) !default;\n/// @type Color\n$color-black: #060606 !default;\n/// @type Color\n$color-mineshaft: #2b2b2b !default;\n/// @type Color\n$color-kaiser: #4f4f4f !default;\n/// @type Color\n$color-dove: #737373 !default;\n/// @type Color\n$color-alto: #dddddd !default;\n/// @type Color\n$color-white: #f9f9f9 !default;\n/// @type Color\n$color-raven: #5f8aa6 !default; // hsl(204, 29%, 51%)\n/// @type Color\n$color-bowhead: #507791 !default; // hsl(204, 29%, 44%)\n/// @type Color\n$color-coyote: #759ab3 !default; // hsl(204, 29%, 58%)\n/// @type Color\n$color-canada: #ff0000 !default;\n/// @type Color\n$color-highlight: gold !default;\n/// @type Color\n$color-black--alpha: rgba($color-black, map-get($opacities, \"alpha\")) !default;\n/// @type Color\n$color-black--gamma: rgba($color-black, map-get($opacities, \"gamma\")) !default;\n/// @type Color\n$color-black--delta: rgba($color-black, map-get($opacities, \"delta\")) !default;\n/// @type Color\n$color-raven--gamma: rgba($color-raven, map-get($opacities, \"gamma\")) !default;\n/// @type Map\n/// @prop {String} Color Name\n/// @prop {Color} Color Value\n/// @see {Mixin} v\n$site-colors: (\n    transparent:  $color-transparent,\n    bowhead:      $color-bowhead,\n    raven:        $color-raven,\n    coyote:       $color-coyote,\n    canada:       $color-canada,\n    black:        $color-black,\n    mineshaft:    $color-mineshaft,\n    kaiser:       $color-kaiser,\n    dove:         $color-dove,\n    alto:         $color-alto,\n    white:        $color-white,\n    black--alpha: $color-black--alpha,\n    black--gamma: $color-black--gamma,\n    black--delta: $color-black--delta,\n    raven--gamma: $color-raven--gamma\n) !default;\n/// @type Map\n/// @prop {String} Color Name\n/// @prop {Color} Color Value\n$palette-colors: (\n    bowhead:      $color-bowhead,\n    raven:        $color-raven,\n    coyote:       $color-coyote,\n    canada:       $color-canada,\n    black:        $color-black,\n    mineshaft:    $color-mineshaft,\n    kaiser:       $color-kaiser,\n    dove:         $color-dove,\n    alto:         $color-alto,\n    white:        $color-white\n) !default;\n\n\n/// @type Length\n$border-width-default:  0.250rem !default;\n/// @type Length\n$border-width-thin:     0.125rem !default;\n/// @type Length\n$border-width-hairline:     1px !default;\n/// @type Length\n$border-width-button:   0.182em !default;\n/// @type Map\n/// @prop {String} Border Width Name\n/// @prop {Color} Border Width Value\n/// @see {Mixin} v\n$border-widths: (\n    default:  $border-width-default,\n    thin:     $border-width-thin,\n    hairline: $border-width-hairline,\n    button:   $border-width-button\n) !default;\n\n\n/// @type String\n$border-style-default: solid !default;\n/// @type String\n$border-style-alternate: dotted !default;\n/// @type Map\n/// @prop {String} Border Style Name\n/// @prop {Color} Border Style Value\n/// @see {Mixin} v\n$border-styles: (\n    default:   $border-style-default,\n    alternate: $border-style-alternate\n) !default;\n\n\n/// @type Length\n/// @see {Mixin} border-radius\n$border-radius-default:  0.375rem !default;\n/// @type Length\n/// @see {Mixin} border-radius\n$border-radius-thin:     0.250rem !default;\n/// @type Length\n/// @see {Mixin} border-radius\n$border-radius-hairline: 0.125rem !default;\n/// @type Map\n/// @prop {String} Border Radius Name\n/// @prop {Color} Border Radius Value\n/// @see {Mixin} v\n$border-radii: (\n    default:  $border-radius-default,\n    thin:     $border-radius-thin,\n    hairline: $border-radius-hairline\n) !default;\n\n\n/// @type String\n$font-display: swap !default;\n\n\n/// @type Number\n$font-weight-default: 400 !default;\n/// @type Number\n$font-weight-bold:    600 !default;\n/// @type Map\n/// @prop {String} Font Weight Name\n/// @prop {Color} Font Weight Value\n/// @see {Mixin} v\n$font-weights: (\n    default: $font-weight-default,\n    bold:    $font-weight-bold\n) !default;\n\n\n/// @type Length\n$font-size-default: 1rem !default;\n// 72px\n/// @type Length\n$font-size-alpha: 4.500rem !default;\n// 22px\n/// @type Length\n$font-size-beta: 1.375rem !default;\n// 18px\n/// @type Length\n$font-size-gamma: 1.125rem !default;\n// 20px\n/// @type Length\n$font-size-large: 1.250rem !default;\n/// @type Length\n$font-size-large-relative: 1.250em !default;\n// 14px\n/// @type Length\n$font-size-small: 0.875rem !default;\n/// @type Length\n$font-size-small-relative: 0.875em !default;\n/// @type Map\n/// @prop {String} Font Size Name\n/// @prop {Number} Font Size Value\n/// @see {Mixin} v\n$font-sizes: (\n    default: $font-size-default,\n    alpha:   $font-size-alpha,\n    beta:    $font-size-beta,\n    gamma:   $font-size-gamma,\n    large:   $font-size-large,\n    small:   $font-size-small\n) !default;\n\n\n/// @type List\n$font-family-default: \"Proxima Nova\",\n                      -apple-system,\n                      BlinkMacSystemFont,\n                      \"Segoe UI\",\n                      Roboto,\n                      Oxygen-Sans,\n                      Ubuntu,\n                      Cantarell,\n                      \"Helvetica Neue\",\n                      sans-serif !default;\n/// @type List\n$font-family-alpha: \"League Gothic\",\n                    Impact,\n                    sans-serif !default;\n/// @type List\n$font-family-serif: Georgia,\n                    serif !default;\n/// @type List\n$font-family-monospace: \"Menlo for Powerline\",\n                        \"Menlo\",\n                        Consolas,\n                        Monaco,\n                        \"Andale Mono\",\n                        \"Ubuntu Mono\",\n                        monospace !default;\n/// @type Map\n/// @prop {String} key - Font Family name\n/// @prop {Number} value - Font Family value\n/// @see {Mixin} font-family\n/// @see {Mixin} v\n$font-families: (\n    default:   $font-family-default,\n    alpha:     $font-family-alpha,\n    serif:     $font-family-serif,\n    monospace: $font-family-monospace\n) !default;\n/// @type List\n/// @prop {String} family - Font Family\n/// @prop {String} variant - Font Family Variant\n/// @prop {String} style - Font Style\n/// @prop {Number} weight - Font Weight\n/// @prop {String} filename - Font Filename\n$font-families-styles: (\n    (\"League Gothic\", \"Regular\",  normal, 400, \"league-gothic-regular\"),\n    (\"Proxima Nova\",  \"Regular\",  normal, 400, \"proxima-nova-regular\"),\n    (\"Proxima Nova\",  \"Italic\",   italic, 400, \"proxima-nova-italic\"),\n    (\"Proxima Nova\",  \"Semibold\", normal, 600, \"proxima-nova-semibold\")\n) !default;\n\n\n/// @type Number\n$line-height-default: 1.875 !default;\n/// @type Number\n$line-height-small:   1.250 !default;\n/// @type Number\n$line-height-medium:  1.429 !default;\n/// @type Number\n$line-height-code:    2.000 !default;\n/// @type Map\n/// @prop {String} Line Height Name\n/// @prop {Number} Line Height Value\n/// @see {Mixin} v\n$line-heights: (\n    default: $line-height-default,\n    small:   $line-height-small,\n    medium:  $line-height-medium,\n    code:    $line-height-code\n) !default;\n\n\n/// @type Length\n$letter-spacing-default: 0 !default;\n/// @type Length\n$letter-spacing-uppercase: 1px !default;\n\n\n/// @type Length\n$animation-duration: 2s !default;\n/// @type String\n$animation-function: linear !default;\n\n\n/// @type Length\n$rotation-default: 5deg !default;\n\n\n/// @type Length\n/// @see {Mixin} transition\n$transition-duration-default: 0.200s !default;\n/// @type Length\n/// @see {Mixin} transition\n$transition-duration-long: 1.000s !default;\n/// @type String\n/// @see {Mixin} transition\n$transition-function: ease !default;\n\n\n/// @type Number\n$z-index-below: -1 !default;\n/// @type Number\n$z-index-root: 0 !default;\n/// @type Number\n$z-index-default: 1 !default;\n/// @type Number\n$z-index-above: 2 !default;\n/// @type Number\n$z-index-modal: 3 !default;\n/// @type Number\n$z-index-dialog: 4 !default;\n/// @type Number\n$z-index-notification: 5 !default;\n/// @type Map\n/// @prop {String} z-index Name\n/// @prop {Number} z-index Value\n/// @see {Function} z-index\n/// @see {Mixin} v\n$z-indexes: (\n    below:        $z-index-below,\n    root:         $z-index-root,\n    default:      $z-index-default,\n    above:        $z-index-above,\n    modal:        $z-index-modal,\n    dialog:       $z-index-dialog,\n    notification: $z-index-notification\n) !default;\n\n\n/// @type Map\n/// @prop {Array} Aspect Ratio\n/// @prop {Length} Percentage for sizing\n$aspect-ratios: (\n    (16, 9): 56.25%,\n    (4, 3):  75.00%\n) !default;\n\n\n/// @type List\n/// @prop {String} Body / Primary Navigation Class\n$navigation-classes:\n    home,\n    about,\n    article,\n    pen,\n    search !default;\n\n\n/// @type Color\n$color-css: #016fba !default;\n/// @type Color\n$color-html: #e54d26 !default;\n/// @type Color\n$color-javascript: #f1c54c !default;\n/// @type Color\n$color-liquid: #7ab55c !default;\n/// @type Color\n$color-markdown: #4a525a !default;\n/// @type Color\n$color-sass: #c6538c !default;\n/// @type Map\n/// @prop {String} Language name\n/// @prop {Color} Language color\n$language-colors: (\n    css:         $color-css,\n    haml:        $color-html,\n    html:        $color-html,\n    jade:        $color-html,\n    javascript:  $color-javascript,\n    liquid:      $color-liquid,\n    markdown:    $color-markdown,\n    sass:        $color-sass,\n    scss:        $color-sass\n) !default;\n\n\n/// @type Color\n$color-codepen: #212121 !default;\n/// @type Color\n$color-github: #333333 !default;\n/// @type Color\n$color-lastfm: #e31b23 !default;\n/// @type Color\n$color-rss: #ff9770 !default;\n/// @type Color\n$color-spotify: #1db954 !default;\n/// @type Color\n$color-spotify-alt: #191414 !default;\n/// @type Color\n$color-twitter: mix($color-black, #55acee, 10%) !default;\n/// @type List\n/// @prop {String} name - Brand name\n/// @prop {Color} color - Icon color\n/// @prop {Number} opacity - Brand icon opacity\n$brand-colors:\n    codepen  $color-white    1.025,\n    github   $color-white    1.000,\n    lastfm   $color-lastfm   1.000,\n    rss      $color-rss      0.775,\n    spotify  $color-spotify  0.925,\n    twitter  $color-twitter  0.925,\n    article  $color-white    0.900,\n    feather  $color-white    0.725,\n    heart    $color-white    1.000,\n    link     $color-white    1.000,\n    search   $color-white    1.000,\n    tag      $color-white    1.000 !default;\n\n\n/// @type Length\n$icon-size: 40px !default;\n/// @type Length\n$logo-size: 8.5rem !default; // 136px\n/// @type Length\n$avatar-size: 6.25rem !default; // 100px\n\n\n/// @type Number\n$max-columns: 2 !default;\n\n\n/// @type Map\n/// @see {Mixin} v\n$variable-maps: (\n    border-width:   $border-widths,\n    border-style:   $border-styles,\n    color:          $site-colors,\n    font-family:    $font-families,\n    font-size:      $font-sizes,\n    font-weight:    $font-weights,\n    line-height:    $line-heights,\n    measure:        $measures,\n    opacity:        $opacities,\n    z-index:        $z-indexes\n);\n\n/// @type Map\n/// @see {Mixin} v\n$property-maps: (\n    opacity:                opacity,\n    background-color:       color,\n    color:                  color,\n    border-color:           color,\n    border-top-color:       color,\n    border-right-color:     color,\n    border-bottom-color:    color,\n    border-left-color:      color,\n    border-style:           border-style,\n    border-top-style:       border-style,\n    border-right-style:     border-style,\n    border-bottom-style:    border-style,\n    border-left-style:      border-style,\n    border-width:           border-width,\n    border-top-width:       border-width,\n    border-right-width:     border-width,\n    border-bottom-width:    border-width,\n    border-left-width:      border-width,\n    fill:                   color,\n    font-family:            font-family,\n    font-size:              font-size,\n    font-weight:            font-weight,\n    line-height:            line-height,\n    margin:                 measure,\n    margin-top:             measure,\n    margin-right:           measure,\n    margin-bottom:          measure,\n    margin-left:            measure,\n    padding:                measure,\n    padding-top:            measure,\n    padding-right:          measure,\n    padding-bottom:         measure,\n    padding-left:           measure,\n    stroke:                 color,\n    text-decoration-color:  color,\n    text-decoration-width:  border-width,\n    z-index:                z-index\n);\n"]}