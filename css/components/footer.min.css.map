{"version":3,"sources":["components/footer.scss","abstracts/_mixins.scss","abstracts/_variables.scss","vendors/_include-media.scss","components/footer.css","abstracts/_functions.scss"],"names":[],"mappings":"AAOA,OCggBY,yBCtZU,AD+Zd,qCAlBqD,AASjD,WClZQ,AD2ZZ,wBAlBqD,AASjD,gBC1Ra,ADmSjB,oCAlBqD,ADnfzD,wBAAyB,CAU5B,AAdD,WAOQ,oBAAa,AAAb,oBAAa,AAAb,aAAa,AACb,yBAA8B,AAA9B,sBAA8B,AAA9B,6BAA8B,CAKjC,AG+hBD,oCH5iBJ,WAWY,4BAAsB,AAAtB,6BAAsB,AAAtB,0BAAsB,AAAtB,qBAAsB,CAE7B,CIDJ,AJID,uBAEI,eAAgB,CAMnB,AGohBG,oCH5hBJ,uBAKQ,mBAAc,AAAd,kBAAc,AAAd,cAAc,AACd,iBAAkB,CAEzB,CICA,AJCD,sEAGI,qBAAqB,AACrB,kBAAmB,CACtB,AAED,oBACI,eAAgB,AAChB,gBAAgB,AC6dR,qBC5dsB,ADqe1B,kCAlBqD,ADldzD,sBAAsB,AACtB,iBAAiB,AACjB,qBAAqB,AACrB,kBAAmB,CAiCtB,AAxCD,2BC+dY,6BC5ZwB,ADqa5B,yCAlBqD,CD3cxD,AAXL,0BCsZI,qEI9D+C,AJ8D/C,6DI9D+C,AJ8D/C,qDI9D+C,AJ8D/C,mFI9D+C,AJwF/C,8BDja2C,ACgdnC,WCnbS,AD4bb,6BAlBqD,AASjD,aC9YS,ADuZb,wBAlBqD,ADpcrD,WAAW,AACX,YAAY,AACZ,aAAc,CAKjB,AGkfD,kDH3gBJ,0BCsZI,oCI9D+C,AJ8D/C,2BI9D+C,CL/T9C,CIQJ,AJjCD,iGA+BY,SAAU,CACb,AAhCT,iCAqCY,sCAAyC,AAAzC,6BAAyC,CAC5C,AAIT,kDCbI,yBDeuB,ACTnB,mBC0RsB,ADkKlB,oBC5dsB,ADqe1B,iCAlBqD,AASjD,qBC5dsB,ADqe1B,kCAlBqD,ADrazD,6BAA8B,CACjC","file":"footer.min.css","sourcesContent":["////\n/// Footer\n/// @group components\n////\n@import \"../imports\";\n\n\nfooter {\n    @include v(background-color, kaiser);\n    @include v(color, alto);\n    @include v(font-weight, bold);\n    text-transform: uppercase;\n\n    div {\n        display: flex;\n        justify-content: space-between;\n\n        @include media(\"screen\", \"<=medium\") {\n            flex-direction: column;\n        }\n    }\n}\n\n.license,\n.nav-tertiary {\n    overflow: hidden;\n\n    @include media(\"screen\", \"<=medium\") {\n        flex: 1 0 100%;\n        text-align: center;\n    }\n}\n\n.footer-home-anchor,\n.footer-license-anchor,\n.footer-style-guide-anchor {\n    display: inline-block;\n    white-space: nowrap;\n}\n\n.footer-home-anchor {\n    width:  3.125rem;\n    height: 3.125rem;\n    @include v(margin-right, small);\n    vertical-align: middle;\n    text-indent: 100%;\n    text-decoration: none;\n    white-space: nowrap;\n\n    &:active {\n        @include v(background-color, transparent);\n    }\n\n    .icon {\n        @include transition(opacity, transform);\n        @include will-change(opacity, transform);\n        @include v(opacity, alpha);\n        @include v(fill, raven);\n        width: 100%;\n        height: 100%;\n        display: block;\n\n        @include media(\"screen\", \"prefers-reduced-motion\") {\n            @include transition(none);\n        }\n    }\n\n    &:hover,\n    &:focus,\n    &:active {\n        .icon {\n            opacity: 1;\n        }\n    }\n\n    &:active {\n        .icon {\n            transform: translateY($border-width-thin);\n        }\n    }\n}\n\n.footer-license-anchor,\n.footer-style-guide-anchor {\n    @include case(uppercase);\n    @include v(margin-left, small);\n    @include v(margin-right, small);\n    // coming soon!\n    // @include v(text-decoration-width, thin);\n    text-underline-position: under;\n}\n","////\n/// Mixins\n/// @group abstracts\n////\n\n\n///\n/// Add a border-radius.\n///\n/// @author Chris Burnell\n///\n/// @param {String} $thickness - Thickness of Border Radius\n/// @param {String} $border-radius - Type of Border Radius\n///\n/// @example scss - Zero parameters\n///   @include radius;\n///   // border-radius: 0.375rem;\n///\n/// @example scss - One parameter\n///   @include radius(1em);\n///   // border-radius: 1em;\n///\n@mixin border-radius($thickness: default, $border-radius: null) {\n    @if not is-length($thickness) {\n        @if map-has-key($border-radii, $thickness) {\n            $thickness: map-get($border-radii, $thickness);\n        }\n        @else if is-edge($thickness) {\n            $border-radius: $thickness;\n            $thickness: $border-radius-default;\n        }\n        @else {\n            @error \"There is no `thickness` named `#{$thickness}` in `$border-radii`. `thickness` should be one of `#{map-keys($border-radii)}`.\";\n        }\n    }\n\n    @if $border-radius and is-edge($border-radius) {\n        $top-left: if($border-radius == \"top\" or $border-radius == \"left\" or $border-radius == \"top-left\", $thickness, 0);\n        $top-right: if($border-radius == \"top\" or $border-radius == \"right\" or $border-radius == \"top-right\", $thickness, 0);\n        $bottom-right: if($border-radius == \"bottom\" or $border-radius == \"right\" or $border-radius == \"bottom-right\", $thickness, 0);\n        $bottom-left: if($border-radius == \"bottom\" or $border-radius == \"left\" or $border-radius == \"bottom-left\", $thickness, 0);\n\n        $border-radius: $top-left $top-right $bottom-right $bottom-left;\n    }\n    @else {\n        $border-radius: $thickness;\n    }\n\n    background-clip: padding-box;\n    border-radius: $border-radius;\n}\n\n\n///\n/// Change the case of text and apply appropriate letter-spacing.\n///\n/// @param {String} $case - Case of Text\n/// @param {String} $letter-spacing [null] - Letter-spacing of Text\n///\n/// @example scss\n///   @include case(uppercase);\n///   // text-transform: uppercase;\n///   // letter-spacing: 1px;\n///\n@mixin case($case, $letter-spacing: null) {\n    @if not $case {\n        @error \"case() expects at least one parameter.\";\n    }\n\n    text-transform: $case;\n\n    @if $letter-spacing != null {\n        letter-spacing: $letter-spacing;\n    }\n    @else if $case == \"uppercase\" {\n        letter-spacing: $letter-spacing-uppercase;\n    }\n}\n\n\n///\n/// Clear an element of floats.\n///\n/// @example scss\n///   @include clear;\n///   // clear: both;\n///   // zoom: 1;\n///   // &::before,\n///   // &::after {\n///   //     content: \"\";\n///   //     display: table;\n///   // }\n///   // &::after {\n///   //     clear: both;\n///   // }\n///\n@mixin clear() {\n    clear: both;\n    zoom: 1;\n\n    &::before,\n    &::after {\n        content: \"\";\n        display: table;\n    }\n\n    &::after {\n        clear: both;\n    }\n}\n\n\n///\n/// Specify a font-family.\n///\n/// @author Chris Burnell\n///\n/// @param {String} $family - Font-family value\n///\n/// @example scss - One family\n///   @include font-family(default);\n///   // font-family: \"Proxima Nova\", sans-serif;\n///\n/// @example scss - One family, one display\n///   @include font-family(serif, auto);\n///   // font-family: Georgia, serif;\n///\n/// @throw Error if no parameters are passed.\n/// @throw Error if parameter passed does not match a key in $font-families.\n///\n@mixin font-family($family) {\n    @if not $family {\n        @error \"font-family() expects at least one parameter.\";\n    }\n\n    @if not map-has-key($font-families, $family) {\n        @error \"There is no `font-family` named `#{$family}` in `$font-families`. `font-family` should be one of `#{map-keys($font-families)}`.\";\n    }\n\n    @include v(font-family, $family);\n\n    @if $family == \"monospace\" {\n        font-variant-ligatures: none;\n    }\n}\n\n\n///\n/// Hyphenate text.\n///\n/// @example scss\n///   @include hyphenate;\n///   // overflow-wrap: break-word;\n///   // hyphens: auto;\n///\n@mixin hyphenate() {\n    overflow-wrap: break-word;\n    hyphens: auto;\n}\n\n\n///\n/// Make text non-selectable.\n///\n/// @example scss\n///   @include non-selectable;\n///   // user-select: none;\n///   // -webkit-touch-callout: default;\n///   // -webkit-touch-callout: none;\n///\n@mixin non-selectable() {\n    user-select: none;\n    -webkit-touch-callout: default;\n    -webkit-touch-callout: none;\n}\n\n\n///\n/// Absolutely position an element.\n///\n/// @author Chris Burnell\n///\n/// @param {String} $position - Position of the element\n/// @param {String} $offset [0] - How much to offset from the position\n///\n/// @example scss\n///   @include absolute(bottom-left);\n///   // position: absolute;\n///   // bottom: 0;\n///   // left: 0;\n///\n/// @example scss\n///   @include absolute(right, 1em);\n///   // position: absolute;\n///   // right: 1em;\n///   // top: 50%;\n///   // transform: translateY(-50%);\n///\n/// @example scss\n///   @include absolute(top-full);\n///   // position: absolute;\n///   // top: 0;\n///   // right: 0;\n///   // left: 0;\n///\n/// @example scss\n///   @include absolute(top-full, 1em);\n///   // position: absolute;\n///   // top: 1em;\n///   // right: 0;\n///   // left: 0;\n///\n/// @example scss\n///   @include absolute(top-full-offset, 1em);\n///   // position: absolute;\n///   // top: 1em;\n///   // right: 1em;\n///   // left: 1em;\n///\n/// @throw Error if no parameters are passed.\n///\n@mixin absolute($position, $offset: 0) {\n\n    @if not $position {\n        @error \"absolute() expects one parameter.\";\n    }\n    @else if $position == none {\n        position: relative;\n        top: auto;\n        right: auto;\n        bottom: auto;\n        left: auto;\n    }\n    @else if $position == center {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translateX(-50%) translateY(-50%);\n    }\n    @else if str-index(#{$position}, \"full\") {\n        position: absolute;\n\n        @if str-index(#{$position}, \"top\") {\n            top: $offset;\n\n            @if str-index(#{$position}, \"offset\") {\n                right: $offset;\n                left: $offset;\n            }\n            @else {\n                right: 0;\n                left: 0;\n            }\n        }\n        @else if str-index(#{$position}, \"right\") {\n            right: $offset;\n\n            @if str-index(#{$position}, \"offset\") {\n                top: $offset;\n                bottom: $offset;\n            }\n            @else {\n                top: 0;\n                bottom: 0;\n            }\n        }\n        @else if str-index(#{$position}, \"bottom\") {\n            bottom: $offset;\n\n            @if str-index(#{$position}, \"offset\") {\n                right: $offset;\n                left: $offset;\n            }\n            @else {\n                right: 0;\n                left: 0;\n            }\n        }\n        @else if str-index(#{$position}, \"left\") {\n            left: $offset;\n\n            @if str-index(#{$position}, \"offset\") {\n                top: $offset;\n                bottom: $offset;\n            }\n            @else {\n                top: 0;\n                bottom: 0;\n            }\n        }\n        @else {\n            top: $offset;\n            right: $offset;\n            bottom: $offset;\n            left: $offset;\n        }\n    }\n    @else if is-edge($position) {\n        position: absolute;\n\n        @if str-index(#{$position}, \"top\") {\n            top: $offset;\n            @if not str-index(#{$position}, \"-\") {\n                left: 50%;\n                transform: translateX(-50%);\n            }\n        }\n        @if str-index(#{$position}, \"right\") {\n            right: $offset;\n            @if not str-index(#{$position}, \"-\") {\n                top: 50%;\n                transform: translateY(-50%);\n            }\n        }\n        @if str-index(#{$position}, \"bottom\") {\n            bottom: $offset;\n            @if not str-index(#{$position}, \"-\") {\n                left: 50%;\n                transform: translateX(-50%);\n            }\n        }\n        @if str-index(#{$position}, \"left\") {\n            left: $offset;\n            @if not str-index(#{$position}, \"-\") {\n                top: 50%;\n                transform: translateY(-50%);\n            }\n        }\n    }\n}\n\n\n///\n/// Define characters for quotes\n///\n/// @author Chris Burnell\n///\n/// @example scss\n///   @include quotes;\n///   // quotes: \"“\" \"”\" \"‘\" \"’\";\n///\n@mixin quotes() {\n    hanging-punctuation: first;\n\n    &,\n    :lang(en) & {\n        quotes: \"“\" \"”\" \"‘\" \"’\";\n    }\n\n    :lang(de) &,\n    :lang(pl) & {\n        quotes: \"„\" \"“\" \"‚\" \"‘\";\n    }\n\n    :lang(fr) & {\n        quotes: \"« \" \" »\" \"‹ \" \" ›\";\n    }\n}\n\n\n///\n/// Reset Font Size\n///\n/// @author Chris Burnell\n///\n/// @example scss\n///   ul {\n///       @include reset-font-size(li);\n///   }\n///   // ul {\n///   //     font-size: 0;\n///   // }\n///   // ul > li {\n///   //     font-size: 1rem;\n///   // }\n///\n@mixin reset-font-size($child: null, $font-size: default) {\n    font-size: 0;\n\n    @if ($child) {\n        #{$child} {\n            @include v(font-size, $font-size);\n        }\n    }\n    @else {\n        & > * {\n            @include v(font-size, $font-size);\n        }\n    }\n}\n\n\n///\n/// Generate transitions based on flexible input parameters.\n/// Pass zero or more properties and zero to two further parameters.\n/// If passing two or more properties, quotation marks must be used.\n///\n/// @author Chris Burnell\n///\n/// @param {String} $values - Values\n///\n/// @example scss - Zero parameters\n///   @include transition;\n///   // transition: all 0.2s ease;\n///\n/// @example scss - One property\n///   @include transition(color);\n///   // transition: color 0.2s ease;\n///\n/// @example scss - Two properties\n///   @include transition(color, border);\n///   // transition: color 0.2s ease, border 0.2s ease;\n///\n/// @example scss - One property, one duration\n///   @include transition(color 0.5s);\n///   // transition: color 0.5s ease;\n///\n/// @example scss - One property, one duration, one timing function\n///   @include transition(color 1s linear);\n///   // transition: color 1s linear;\n///\n/// @example scss - Two properties, two durations, two timing functions\n///   @include transition(color 2s ease-in-out, border 1s linear);\n///   // transition: color 2s ease-in-out, border 1s linear;\n///\n@mixin transition($transitions...) {\n    $transition: ();\n\n    // if no parameter, transition all with default duration and function\n    @if length($transitions) == 0 {\n        $transition: all #{$transition-duration-default} #{$transition-function};\n    }\n    // if parameter just set to `none` then just transition nothing\n    @else if $transitions == none {\n        $transition: none;\n    }\n    // if the parameter contains a comma then operating on multiple properties\n    @else if str-index(#{$transitions}, \",\") {\n        @each $transition-segment in $transitions {\n            $transition: append($transition, unpack-transition($transition-segment), comma);\n        }\n    }\n    @else {\n        $transition: unpack-transition($transitions...);\n    }\n\n    transition: $transition;\n}\n\n\n///\n/// Describes CSS changes to the browser; to be coupled with any transitions.\n///\n/// @author Chris Burnell\n///\n/// @param {String} $values - Values\n///\n/// @example scss - One parameter\n///   @include will-change(color);\n///   // will-change: color;\n///\n/// @example scss - Multiple parameters\n///   @include will-change(color, border);\n///   // will-change: color, border;\n///\n/// @throw Error if no parameters are passed.\n///\n@mixin will-change($changes...) {\n    @if length($changes) == 0 {\n        @error \"will-change() expects at least one parameter.\";\n    }\n\n    will-change: $changes;\n}\n\n\n///\n/// Select a CSS variable and provide a fallback\n///\n@mixin v($property, $variable, $important: false, $show-fallback: true) {\n    $map-name: map-get($property-maps, $property);\n    $nest-name: null;\n    $nest-map-name: null;\n    $map: null;\n    $variable-fallback: null;\n    $variable-output: null;\n\n    // if a Nested List, we need to go deeper\n    @if type-of($map-name) == \"list\" {\n        $nest-name: nth($map-name, 1);\n        $nest-map-name: nth($map-name, 2);\n    }\n\n    // if it is a Nested List\n    @if $nest-name {\n        // get the map from nested map-name\n        $map: map-get($variable-maps, $nest-name);\n        // get the nested map\n        $nest-map: map-get($map, $nest-map-name);\n        // fallback value, get the var value from the nested map\n        $variable-fallback: map-get($nest-map, $variable);\n        // our CSS Variable output\n        $variable-output: var(--#{$nest-name}-#{$nest-map-name}-#{$variable});\n    }\n    @else {\n        // get the map from map name\n        $map: map-get($variable-maps, $map-name);\n        // fallback value, grab the variable's value from the map\n        $variable-fallback: map-get($map, $variable);\n        // our CSS Variable output\n        $variable-output: var(--#{$map-name}-#{$variable});\n    }\n\n    // if show fallback is not overridden to be null\n    @if $show-fallback {\n        @if $important {\n            #{$property}: $variable-fallback !important;\n        }\n        @else {\n            #{$property}: $variable-fallback;\n        }\n    }\n\n    // CSS Variable\n    @if $important {\n        #{$property}: $variable-output !important;\n    }\n    @else {\n        #{$property}: $variable-output;\n    }\n}\n\n\n///\n/// Visually hide an element properly.\n///\n@mixin visually-hidden() {\n    width:  1px !important;\n    height: 1px !important;\n    padding: 0 !important;\n    margin: -1px !important;\n    border: 0 !important;\n    overflow: hidden !important;\n    position: absolute !important;\n    white-space: nowrap !important;\n    clip: rect(0 0 0 0) !important;\n    clip-path: inset(100%) !important;\n}\n","////\n/// Variables\n/// @group abstracts\n////\n\n\n/// @type Length\n$base-font-size: 16px !default;\n\n\n/// @type Length\n$wrapper-width-small:  500px !default;\n/// @type Length\n$wrapper-width-medium: 800px !default;\n/// @type Length\n$wrapper-width-large: 1140px !default;\n/// @type Map\n/// @prop {String} Breakpoint name\n/// @prop {Length} Breakpoint value\n$breakpoints: (\n    small:  $wrapper-width-small,\n    medium: $wrapper-width-medium,\n    large:  $wrapper-width-large\n) !default;\n\n\n/// @type Length\n$gutter-width: 1.250rem !default;\n/// @type Length\n$aside-width: 15.875rem !default;\n/// @type Length\n$article-width: 50.625rem !default;\n// 21em\n/// @type Length\n$line-length-minimum: 336px !default;\n// 30em\n/// @type Length\n$line-length-maximum: 480px !default;\n/// @type Length\n$line-length-responsive: calc(#{$line-length-minimum} + (#{$line-length-maximum / ($line-length-maximum * 0 + 1)} - #{$line-length-minimum / ($line-length-minimum * 0 + 1)}) * ((100vw - #{$wrapper-width-small}) / (#{$wrapper-width-large / ($wrapper-width-large * 0 + 1)} - #{$wrapper-width-small / ($wrapper-width-small * 0 + 1)})));\n\n\n/// @type Length\n$measure-small:           0.625rem !default;\n/// @type Length\n$measure-small-relative:  0.625em !default;\n/// @type Length\n$measure-small-proportional:  2vmin !default;\n/// @type Length\n$measure-medium:          1.250rem !default;\n/// @type Length\n$measure-medium-relative: 1.250em !default;\n/// @type Length\n$measure-medium-proportional: 4vmin !default;\n/// @type Length\n$measure-large:           2.250rem !default;\n/// @type Length\n$measure-large-relative:  2.250em !default;\n/// @type Length\n$measure-large-proportional:  8vmin !default;\n/// @type Length\n$measure-one:                 1rem !default;\n/// @type Length\n$measure-one-relative:        1em !default;\n/// @type Map\n/// @prop {String} Measure name\n/// @prop {Length} Measure value\n/// @see {Mixin} v\n$measures: (\n    small:               $measure-small,\n    small-relative:      $measure-small-relative,\n    small-proportional:  $measure-small-proportional,\n    medium:              $measure-medium,\n    medium-relative:     $measure-medium-relative,\n    medium-proportional: $measure-medium-proportional,\n    large:               $measure-large,\n    large-relative:      $measure-large-relative,\n    large-proportional:  $measure-large-proportional,\n    one:                 $measure-one,\n    one-relative:        $measure-one-relative\n) !default;\n\n\n/// @type Number\n$opacity-alpha: 0.900 !default;\n/// @type Number\n$opacity-beta:  0.700 !default;\n/// @type Number\n$opacity-gamma: 0.100 !default;\n/// @type Number\n$opacity-delta: 0.050 !default;\n\n/// @type Map\n/// @prop {String} Opacity name\n/// @prop {Number} Opacity value\n/// @see {Function} opacities\n/// @see {Mixin} v\n$opacities: (\n    alpha: $opacity-alpha,\n    beta:  $opacity-beta,\n    gamma: $opacity-gamma,\n    delta: $opacity-delta\n) !default;\n\n\n// this allows transparency to be transitioned to a different color\n/// @type Color\n$color-transparent: rgba(0, 0, 0, 0) !default;\n/// @type Color\n$color-black: #060606 !default;\n/// @type Color\n$color-mineshaft: #2b2b2b !default;\n/// @type Color\n$color-kaiser: #4f4f4f !default;\n/// @type Color\n$color-dove: #737373 !default;\n/// @type Color\n$color-alto: #dddddd !default;\n/// @type Color\n$color-white: #f9f9f9 !default;\n/// @type Color\n$color-raven: #5f8aa6 !default; // hsl(204, 29%, 51%)\n/// @type Color\n$color-bowhead: #507791 !default; // hsl(204, 29%, 44%)\n/// @type Color\n$color-coyote: #759ab3 !default; // hsl(204, 29%, 58%)\n/// @type Color\n$color-canada: #ff0000 !default;\n/// @type Color\n$color-highlight: gold !default;\n/// @type Color\n$color-black--alpha: rgba($color-black, map-get($opacities, \"alpha\")) !default;\n/// @type Color\n$color-black--gamma: rgba($color-black, map-get($opacities, \"gamma\")) !default;\n/// @type Color\n$color-black--delta: rgba($color-black, map-get($opacities, \"delta\")) !default;\n/// @type Color\n$color-raven--gamma: rgba($color-raven, map-get($opacities, \"gamma\")) !default;\n/// @type Map\n/// @prop {String} Color Name\n/// @prop {Color} Color Value\n/// @see {Mixin} v\n$site-colors: (\n    transparent:  $color-transparent,\n    bowhead:      $color-bowhead,\n    raven:        $color-raven,\n    coyote:       $color-coyote,\n    canada:       $color-canada,\n    black:        $color-black,\n    mineshaft:    $color-mineshaft,\n    kaiser:       $color-kaiser,\n    dove:         $color-dove,\n    alto:         $color-alto,\n    white:        $color-white,\n    black--alpha: $color-black--alpha,\n    black--gamma: $color-black--gamma,\n    black--delta: $color-black--delta,\n    raven--gamma: $color-raven--gamma\n) !default;\n/// @type Map\n/// @prop {String} Color Name\n/// @prop {Color} Color Value\n$palette-colors: (\n    bowhead:      $color-bowhead,\n    raven:        $color-raven,\n    coyote:       $color-coyote,\n    canada:       $color-canada,\n    black:        $color-black,\n    mineshaft:    $color-mineshaft,\n    kaiser:       $color-kaiser,\n    dove:         $color-dove,\n    alto:         $color-alto,\n    white:        $color-white\n) !default;\n\n\n/// @type Length\n$border-width-default:  0.250rem !default;\n/// @type Length\n$border-width-thin:     0.125rem !default;\n/// @type Length\n$border-width-hairline:     1px !default;\n/// @type Length\n$border-width-button:   0.182em !default;\n/// @type Map\n/// @prop {String} Border Width Name\n/// @prop {Color} Border Width Value\n/// @see {Mixin} v\n$border-widths: (\n    default:  $border-width-default,\n    thin:     $border-width-thin,\n    hairline: $border-width-hairline,\n    button:   $border-width-button\n) !default;\n\n\n/// @type String\n$border-style-default: solid !default;\n/// @type String\n$border-style-alternate: dotted !default;\n/// @type Map\n/// @prop {String} Border Style Name\n/// @prop {Color} Border Style Value\n/// @see {Mixin} v\n$border-styles: (\n    default:   $border-style-default,\n    alternate: $border-style-alternate\n) !default;\n\n\n/// @type Length\n/// @see {Mixin} border-radius\n$border-radius-default:  0.375rem !default;\n/// @type Length\n/// @see {Mixin} border-radius\n$border-radius-thin:     0.250rem !default;\n/// @type Length\n/// @see {Mixin} border-radius\n$border-radius-hairline: 0.125rem !default;\n/// @type Map\n/// @prop {String} Border Radius Name\n/// @prop {Color} Border Radius Value\n/// @see {Mixin} v\n$border-radii: (\n    default:  $border-radius-default,\n    thin:     $border-radius-thin,\n    hairline: $border-radius-hairline\n) !default;\n\n\n/// @type String\n$font-display: swap !default;\n\n\n/// @type Number\n$font-weight-default: 400 !default;\n/// @type Number\n$font-weight-bold:    600 !default;\n/// @type Map\n/// @prop {String} Font Weight Name\n/// @prop {Color} Font Weight Value\n/// @see {Mixin} v\n$font-weights: (\n    default: $font-weight-default,\n    bold:    $font-weight-bold\n) !default;\n\n\n/// @type Length\n$font-size-default: 1rem !default;\n// 72px\n/// @type Length\n$font-size-alpha: 4.500rem !default;\n// 22px\n/// @type Length\n$font-size-beta: 1.375rem !default;\n// 18px\n/// @type Length\n$font-size-gamma: 1.125rem !default;\n// 20px\n/// @type Length\n$font-size-large: 1.250rem !default;\n/// @type Length\n$font-size-large-relative: 1.250em !default;\n// 14px\n/// @type Length\n$font-size-small: 0.875rem !default;\n/// @type Length\n$font-size-small-relative: 0.875em !default;\n/// @type Map\n/// @prop {String} Font Size Name\n/// @prop {Number} Font Size Value\n/// @see {Mixin} v\n$font-sizes: (\n    default: $font-size-default,\n    alpha:   $font-size-alpha,\n    beta:    $font-size-beta,\n    gamma:   $font-size-gamma,\n    large:   $font-size-large,\n    small:   $font-size-small\n) !default;\n\n\n/// @type List\n$font-family-default: \"Proxima Nova\",\n                      -apple-system,\n                      BlinkMacSystemFont,\n                      \"Segoe UI\",\n                      Roboto,\n                      Oxygen-Sans,\n                      Ubuntu,\n                      Cantarell,\n                      \"Helvetica Neue\",\n                      sans-serif !default;\n/// @type List\n$font-family-alpha: \"League Gothic\",\n                    Impact,\n                    sans-serif !default;\n/// @type List\n$font-family-serif: Georgia,\n                    serif !default;\n/// @type List\n$font-family-monospace: \"Menlo for Powerline\",\n                        \"Menlo\",\n                        Consolas,\n                        Monaco,\n                        \"Andale Mono\",\n                        \"Ubuntu Mono\",\n                        monospace !default;\n/// @type Map\n/// @prop {String} key - Font Family name\n/// @prop {Number} value - Font Family value\n/// @see {Mixin} font-family\n/// @see {Mixin} v\n$font-families: (\n    default:   $font-family-default,\n    alpha:     $font-family-alpha,\n    serif:     $font-family-serif,\n    monospace: $font-family-monospace\n) !default;\n/// @type List\n/// @prop {String} family - Font Family\n/// @prop {String} variant - Font Family Variant\n/// @prop {String} style - Font Style\n/// @prop {Number} weight - Font Weight\n/// @prop {String} filename - Font Filename\n$font-families-styles: (\n    (\"League Gothic\", \"Regular\",  normal, 400, \"league-gothic-regular\"),\n    (\"Proxima Nova\",  \"Regular\",  normal, 400, \"proxima-nova-regular\"),\n    (\"Proxima Nova\",  \"Italic\",   italic, 400, \"proxima-nova-italic\"),\n    (\"Proxima Nova\",  \"Semibold\", normal, 600, \"proxima-nova-semibold\")\n) !default;\n\n\n/// @type Number\n$line-height-default: 1.875 !default;\n/// @type Number\n$line-height-small:   1.250 !default;\n/// @type Number\n$line-height-medium:  1.429 !default;\n/// @type Number\n$line-height-code:    2.000 !default;\n/// @type Map\n/// @prop {String} Line Height Name\n/// @prop {Number} Line Height Value\n/// @see {Mixin} v\n$line-heights: (\n    default: $line-height-default,\n    small:   $line-height-small,\n    medium:  $line-height-medium,\n    code:    $line-height-code\n) !default;\n\n\n/// @type Length\n$letter-spacing-default: 0 !default;\n/// @type Length\n$letter-spacing-uppercase: 1px !default;\n\n\n/// @type Length\n$animation-duration: 2s !default;\n/// @type String\n$animation-function: linear !default;\n\n\n/// @type Length\n$rotation-default: 5deg !default;\n\n\n/// @type Length\n/// @see {Mixin} transition\n$transition-duration-default: 0.200s !default;\n/// @type Length\n/// @see {Mixin} transition\n$transition-duration-long: 1.000s !default;\n/// @type String\n/// @see {Mixin} transition\n$transition-function: ease !default;\n\n\n/// @type Number\n$z-index-below: -1 !default;\n/// @type Number\n$z-index-root: 0 !default;\n/// @type Number\n$z-index-default: 1 !default;\n/// @type Number\n$z-index-above: 2 !default;\n/// @type Number\n$z-index-modal: 3 !default;\n/// @type Number\n$z-index-dialog: 4 !default;\n/// @type Number\n$z-index-notification: 5 !default;\n/// @type Map\n/// @prop {String} z-index Name\n/// @prop {Number} z-index Value\n/// @see {Function} z-index\n/// @see {Mixin} v\n$z-indexes: (\n    below:        $z-index-below,\n    root:         $z-index-root,\n    default:      $z-index-default,\n    above:        $z-index-above,\n    modal:        $z-index-modal,\n    dialog:       $z-index-dialog,\n    notification: $z-index-notification\n) !default;\n\n\n/// @type Map\n/// @prop {Array} Aspect Ratio\n/// @prop {Length} Percentage for sizing\n$aspect-ratios: (\n    (16, 9): 56.25%,\n    (4, 3):  75.00%\n) !default;\n\n\n/// @type List\n/// @prop {String} Body / Primary Navigation Class\n$navigation-classes:\n    home,\n    about,\n    article,\n    pen,\n    search !default;\n\n\n/// @type Color\n$color-css: #016fba !default;\n/// @type Color\n$color-html: #e54d26 !default;\n/// @type Color\n$color-javascript: #f1c54c !default;\n/// @type Color\n$color-liquid: #7ab55c !default;\n/// @type Color\n$color-markdown: #4a525a !default;\n/// @type Color\n$color-sass: #c6538c !default;\n/// @type Map\n/// @prop {String} Language name\n/// @prop {Color} Language color\n$language-colors: (\n    css:         $color-css,\n    haml:        $color-html,\n    html:        $color-html,\n    jade:        $color-html,\n    javascript:  $color-javascript,\n    liquid:      $color-liquid,\n    markdown:    $color-markdown,\n    sass:        $color-sass,\n    scss:        $color-sass\n) !default;\n\n\n/// @type Color\n$color-codepen: #212121 !default;\n/// @type Color\n$color-github: #333333 !default;\n/// @type Color\n$color-lastfm: #e31b23 !default;\n/// @type Color\n$color-rss: #ff9770 !default;\n/// @type Color\n$color-spotify: #1db954 !default;\n/// @type Color\n$color-spotify-alt: #191414 !default;\n/// @type Color\n$color-twitter: mix($color-black, #55acee, 10%) !default;\n/// @type List\n/// @prop {String} name - Brand name\n/// @prop {Color} color - Icon color\n/// @prop {Number} opacity - Brand icon opacity\n$brand-colors:\n    codepen  $color-white    1.025,\n    github   $color-white    1.000,\n    lastfm   $color-lastfm   1.000,\n    rss      $color-rss      0.775,\n    spotify  $color-spotify  0.925,\n    twitter  $color-twitter  0.925,\n    article  $color-white    0.900,\n    feather  $color-white    0.725,\n    heart    $color-white    1.000,\n    link     $color-white    1.000,\n    search   $color-white    1.000,\n    tag      $color-white    1.000 !default;\n\n\n/// @type Length\n$icon-size: 40px !default;\n/// @type Length\n$logo-size: 8.5rem !default; // 136px\n/// @type Length\n$avatar-size: 6.25rem !default; // 100px\n\n\n/// @type Number\n$max-columns: 2 !default;\n\n\n/// @type Map\n/// @see {Mixin} v\n$variable-maps: (\n    border-width:   $border-widths,\n    border-style:   $border-styles,\n    color:          $site-colors,\n    font-family:    $font-families,\n    font-size:      $font-sizes,\n    font-weight:    $font-weights,\n    line-height:    $line-heights,\n    measure:        $measures,\n    opacity:        $opacities,\n    z-index:        $z-indexes\n);\n\n/// @type Map\n/// @see {Mixin} v\n$property-maps: (\n    opacity:                opacity,\n    background-color:       color,\n    color:                  color,\n    border-color:           color,\n    border-top-color:       color,\n    border-right-color:     color,\n    border-bottom-color:    color,\n    border-left-color:      color,\n    border-style:           border-style,\n    border-top-style:       border-style,\n    border-right-style:     border-style,\n    border-bottom-style:    border-style,\n    border-left-style:      border-style,\n    border-width:           border-width,\n    border-top-width:       border-width,\n    border-right-width:     border-width,\n    border-bottom-width:    border-width,\n    border-left-width:      border-width,\n    fill:                   color,\n    font-family:            font-family,\n    font-size:              font-size,\n    font-weight:            font-weight,\n    line-height:            line-height,\n    margin:                 measure,\n    margin-top:             measure,\n    margin-right:           measure,\n    margin-bottom:          measure,\n    margin-left:            measure,\n    padding:                measure,\n    padding-top:            measure,\n    padding-right:          measure,\n    padding-bottom:         measure,\n    padding-left:           measure,\n    stroke:                 color,\n    text-decoration-color:  color,\n    text-decoration-width:  border-width,\n    z-index:                z-index\n);\n","//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//                http://include-media.com\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n\n\n///\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n///\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)',\n  'script': 'script',\n  'half-hover': '(any-hover: on-demand)',\n  'hover': '(any-hover: hover)',\n  'coarse': '(any-pointer: coarse)',\n  'fine': '(any-pointer: fine)',\n  'prefers-reduced-motion': '(prefers-reduced-motion: reduce)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n///\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n///\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n///\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n///\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n///\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n///\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n///\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n///\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n","footer {\n    background-color: #4f4f4f;\n    background-color: var(--color-kaiser);\n    color: #dddddd;\n    color: var(--color-alto);\n    font-weight: 600;\n    font-weight: var(--font-weight-bold);\n    text-transform: uppercase;\n}\n\nfooter div {\n    display: flex;\n    justify-content: space-between;\n}\n\n@media screen and (max-width: 800px) {\n    footer div {\n        flex-direction: column;\n    }\n}\n\n.license,\n.nav-tertiary {\n    overflow: hidden;\n}\n\n@media screen and (max-width: 800px) {\n    .license,\n    .nav-tertiary {\n        flex: 1 0 100%;\n        text-align: center;\n    }\n}\n\n.footer-home-anchor,\n.footer-license-anchor,\n.footer-style-guide-anchor {\n    display: inline-block;\n    white-space: nowrap;\n}\n\n.footer-home-anchor {\n    width: 3.125rem;\n    height: 3.125rem;\n    margin-right: 0.625rem;\n    margin-right: var(--measure-small);\n    vertical-align: middle;\n    text-indent: 100%;\n    text-decoration: none;\n    white-space: nowrap;\n}\n\n.footer-home-anchor:active {\n    background-color: transparent;\n    background-color: var(--color-transparent);\n}\n\n.footer-home-anchor .icon {\n    transition: opacity 0.2s ease 0s, transform 0.2s ease 0s;\n    will-change: opacity, transform;\n    opacity: 0.9;\n    opacity: var(--opacity-alpha);\n    fill: #5f8aa6;\n    fill: var(--color-raven);\n    width: 100%;\n    height: 100%;\n    display: block;\n}\n\n@media screen and (prefers-reduced-motion: reduce) {\n    .footer-home-anchor .icon {\n        transition: none 0.2s ease 0s;\n    }\n}\n\n.footer-home-anchor:hover .icon, .footer-home-anchor:focus .icon, .footer-home-anchor:active .icon {\n    opacity: 1;\n}\n\n.footer-home-anchor:active .icon {\n    transform: translateY(0.125rem);\n}\n\n.footer-license-anchor,\n.footer-style-guide-anchor {\n    text-transform: uppercase;\n    letter-spacing: 1px;\n    margin-left: 0.625rem;\n    margin-left: var(--measure-small);\n    margin-right: 0.625rem;\n    margin-right: var(--measure-small);\n    text-underline-position: under;\n}\n","////\n/// Functions\n/// @group abstracts\n////\n\n\n///\n/// Test if `$value` is a valid direction\n///\n/// @param {*} $value - Value to test\n///\n/// @throw Error if no parameter is passed.\n///\n/// @return {Bool}\n///\n@function is-direction($value) {\n    @if not $value {\n        @warn \"`is-direction()` expects one parameter.\";\n        @return false;\n    }\n\n    $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);\n    $is-angle: type-of($value) == \"number\" and index(\"deg\" \"grad\" \"turn\" \"rad\", unit($value));\n\n    @return $is-keyword or $is-angle;\n}\n\n\n///\n/// Test if `$value` is a valid corner or side\n///\n/// @param {*} $value - Value to test\n///\n/// @throw Error if no parameter is passed.\n///\n/// @return {Bool}\n///\n@function is-edge($value) {\n    @if not $value {\n        @warn \"`is-edge()` expects one parameter.\";\n        @return false;\n    }\n\n    $is-side: index((top, right, bottom, left), $value);\n    $is-corner: index((top-left, top-right, bottom-right, bottom-left), $value);\n\n    @return $is-side or $is-corner;\n}\n\n\n///\n/// Test if `$value` is a valid length\n///\n/// @param {*} $value - Value to test\n///\n/// @throw Error if no parameter is passed.\n///\n/// @return {Bool}\n///\n@function is-length($value) {\n    @if not $value {\n        @warn \"`is-length()` expects one parameter.\";\n        @return false;\n    }\n\n    $is-length: type-of($value) == \"number\" and index(\"%\" \"ch\" \"cm\" \"em\" \"ex\" \"in\" \"mm\" \"pc\" \"pt\" \"px\" \"rem\" \"vmax\" \"vmin\" \"vh\" \"vw\", unit($value));\n\n    @return $is-length;\n}\n\n\n///\n/// Contrasting Text Color\n///\n/// @param {Color} $background-color - Background-color to contrast against\n/// @param {Color} $text-color-light [$color-white] - Color for dark backgrounds\n/// @param {Color} $text-color-dark [$color-black] - Color for light backgrounds\n///\n/// @example scss\n///   background-color: #111111;\n///   color: contrasting-color(#111111);\n///   // background-color: #111111;\n///   // color: #f9f9f9;\n///\n/// @throw Error if no parameters are passed.\n///\n/// @return {Color} Contrasting Text Color\n///\n@function contrasting-color($background-color, $text-color-dark: $color-kaiser, $text-color-light: $color-white) {\n    @if not $background-color {\n        @warn \"`contrasting-color()` expects at least one parameter.\";\n        @return false;\n    }\n\n    @if lightness($background-color) > 65 {\n        @return $text-color-dark;\n    }\n\n    @return $text-color-light;\n}\n\n\n///\n/// Accepts 2 or more parameters.\n///\n/// @param {String} $direction [to bottom] - Gradient direction\n/// @param {List} $color-stops - List of Color values\n///\n/// @example scss - 2 parameters\n///   background-image: gradient(white, black);\n///   // background-image: linear-gradient(to bottom, white, black);\n///\n/// @example scss - 3+ parameters\n///   background-image: gradient(to top right, red, green, blue);\n///   // background-image: linear-gradient(to top right, red, green, blue);\n///\n/// @throw Error if 2 or more parameters are not passed.\n///\n/// @return {String} Linear Gradient snippet\n///\n@function gradient($direction, $color-stops...) {\n    @if not $direction and not $color-stops {\n        @warn \"`gradient()` expects a direction and/or 2 or more colors to gradient between.\";\n        @return false;\n    }\n\n    @if not is-direction($direction) {\n        $color-stops: $direction, $color-stops;\n        $direction: \"to bottom\";\n    }\n\n    @return linear-gradient(#{$direction},\n                            #{$color-stops});\n}\n\n\n///\n/// Accepts 2 or 3 parameters.\n///\n/// @param {String} $direction [to bottom] - Gradient direction\n/// @param {List} $color-stops - List of Color values\n///\n/// @throw Error if 2 or 3 parameters are not passed.\n///\n/// @return {String} Scrim Gradient snippet\n///\n@function scrim-gradient($direction, $color-stops...) {\n    @if not $direction and not $color-stops {\n        @warn \"`scrim-gradient()` expects a direction and/or two colors to gradient between.\";\n        @return false;\n    }\n\n    @if not is-direction($direction) {\n        $color-stops: $direction, $color-stops;\n        $direction: \"to bottom\";\n    }\n\n    $start-color: nth($color-stops, 1);\n    $end-color:   nth($color-stops, 2);\n\n    @return linear-gradient(#{$direction},\n                            mix($start-color, $end-color,  100%)    0%,\n                            mix($start-color, $end-color, 73.8%) 19.0%,\n                            mix($start-color, $end-color, 54.1%) 34.0%,\n                            mix($start-color, $end-color, 38.2%) 47.0%,\n                            mix($start-color, $end-color, 27.8%) 56.5%,\n                            mix($start-color, $end-color, 19.4%) 65.0%,\n                            mix($start-color, $end-color, 12.6%) 73.0%,\n                            mix($start-color, $end-color,  7.5%) 80.2%,\n                            mix($start-color, $end-color,  4.2%) 86.1%,\n                            mix($start-color, $end-color,  2.1%) 91.0%,\n                            mix($start-color, $end-color,  0.8%) 95.2%,\n                            mix($start-color, $end-color,  0.2%) 98.2%,\n                            mix($start-color, $end-color,    0%)  100%);\n}\n\n\n///\n/// Remap a number from one range to another\n///\n/// @param {Number} $number - Initial Value\n/// @param {Number} $ranges - 2/4 minimum/maximum values representing the ranges\n///\n/// @example scss\n///   $variable: range-map(2, 4, 100);\n///   // $variable: 50;\n///\n/// @example scss\n///   $variable: range-map(68, 30, 160, 0, 100);\n///   // $variable: 42.5;\n///\n/// @return {Number} Number re-mapped in new range\n///\n@function range-map($number, $ranges...) {\n    @if not $number or not $ranges or not (length($ranges) == 2 or length($ranges) == 4) {\n        @warn \"`range-map()` requires three or five parameters: initial number, (old minimum), old maximum, (new minimum), and new maximum.\";\n        @return false;\n    }\n\n    $old-minimum: if(length($ranges) == 2, 0,               nth($ranges, 1));\n    $old-maximum: if(length($ranges) == 2, nth($ranges, 1), nth($ranges, 2));\n    $new-minimum: if(length($ranges) == 2, 0,               nth($ranges, 3));\n    $new-maximum: if(length($ranges) == 2, nth($ranges, 2), nth($ranges, 4));\n\n    @if $old-minimum >= $old-maximum {\n        @warn \"old maximum must be greater than old minimum\";\n        @return false;\n    }\n    @if $number <= $old-minimum {\n        @warn \"initial number must be greater than old minimum\";\n        @return false;\n    }\n    @if $number >= $old-maximum {\n        @warn \"initial number must be less than old maximum\";\n        @return false;\n    }\n    @if $new-minimum >= $new-maximum {\n        @warn \"new maximum must be greater than new minimum\";\n        @return false;\n    }\n\n    @return ($number - $old-minimum) / ($old-maximum - $old-minimum) * ($new-maximum - $new-minimum) + $new-minimum;\n}\n\n\n///\n/// Strip Units from a Number\n///\n/// @param {Number} $number - Number with units\n///\n/// @example scss\n///   line-height: strip-units(2em);\n///   // line-height: 2;\n///\n/// @throw Error if no parameter is passed.\n///\n/// @return {Number} Number without units\n///\n@function strip-units($number) {\n    @if not $number {\n        @warn \"`strip-units()` expects one `$number` parameter.\";\n        @return false;\n    }\n\n    @return $number / ($number * 0 + 1);\n}\n\n\n// stylelint-disable max-nesting-depth\n///\n/// Unique Groups\n///\n/// @param {List|Map} $data - Data in List/Map format\n///\n/// @example scss\n///   $list:\n///     alpha,\n///     beta,\n///     gamma;\n///   @each $unique-group in unique-groups($list) {\n///     @each $item in $unique-group {\n///       .from-#{nth($item, 1)}-to-#{nth($item, 2)} {\n///         color: initial;\n///       }\n///     }\n///   }\n///   // .from-alpha-to-beta {\n///   //   color: initial;\n///   // }\n///   // .from-alpha-to-gamma {\n///   //   color: initial;\n///   // }\n///   // .from-beta-to-gamma {\n///   //   color: initial;\n///   // }\n///\n/// @throw Error if no parameter is passed.\n/// @throw Error if parameter passed is neither a List nor a Map.\n///\n/// @return {Map} Unique groups\n///\n@function unique-groups($data, $size: 2) {\n    @if not $data or not (type-of($data) == list or type-of($data) == map) {\n        @warn \"`unique-groups()` expects either a single List or single Map for `$data`.\";\n        @return false;\n    }\n\n    $unique-groups: ();\n\n    @if type-of($data) == list {\n        $seen-first: ();\n        @each $first in $data {\n            $seen-first: append($seen-first, $first);\n            $seen-second: ();\n            @each $second in $data {\n                $seen-second: append($seen-second, $second);\n                @if $first != $second and not index($seen-first, $second) {\n                    @if $size >= 3 {\n                        @each $third in $data {\n                            @if $second != $third and not index($seen-second, $third) {\n                                $unique-group: (\n                                    $first,\n                                    $second,\n                                    $third\n                                );\n                                $unique-groups: append($unique-groups, $unique-group);\n                            }\n                        }\n                    }\n                    @else {\n                        $unique-group: (\n                            $first,\n                            $second\n                        );\n                        $unique-groups: append($unique-groups, $unique-group);\n                    }\n                }\n            }\n        }\n    }\n    @else if type-of($data) == map {\n        $seen-first: ();\n        @each $first-key, $first-value in $data {\n            $seen-first: append($seen-first, $first-key);\n            $seen-second: ();\n            @each $second-key, $second-value in $data {\n                $seen-second: append($seen-second, $second-key);\n                @if $first-key != $second-key and not index($seen-first, $second-key) {\n                    @if $size >= 3 {\n                        @each $third-key, $third-value in $data {\n                            @if $second-key != $third-key and not index($seen-second, $third-key) {\n                                $unique-group: (\n                                    ($first-key: $first-value),\n                                    ($second-key: $second-value),\n                                    ($third-key: $third-value)\n                                );\n                                $unique-groups: append($unique-groups, $unique-group);\n                            }\n                        }\n                    }\n                    @else {\n                        $unique-group: (\n                            ($first-key: $first-value),\n                            ($second-key: $second-value)\n                        );\n                        $unique-groups: append($unique-groups, $unique-group);\n                    }\n                }\n            }\n        }\n    }\n\n    @else {\n        @warn \"`unique-groups()` expects either a List or Map `$data` parameter.\";\n        @return false;\n    }\n\n    @return $unique-groups;\n}\n// stylelint-enable max-nesting-depth\n\n\n///\n/// Unpack Transition List\n///\n/// @param {list} $list - Transition list to unpack\n///\n/// @example scss\n///   transition: unpack-transition(all 1s)\n///   // transition: all 1s ease;\n///\n/// @throw Error if no parameter is passed.\n///\n/// @return {String} Full Transition\n///\n@function unpack-transition($list) {\n    @if not $list {\n        @warn \"`unpack-transition()` expects a `$list` parameter.\";\n        @return false;\n    }\n\n    $property: nth($list, 1);\n    $time: if(length($list) > 1, nth($list, 2), $transition-duration-default);\n    $function: if(length($list) > 2, nth($list, 3), $transition-function);\n    $delay: if(length($list) > 3, nth($list, 4), 0s);\n\n    @return $property $time $function $delay;\n}\n\n\n///\n/// Walk through a List with a Function\n///\n/// @param {List} $list - List to walk through\n/// @param {String} $function - Function to apply to all members\n/// @param {ArgList} $args - Extra parameters to pass to the function\n///\n/// @example scss\n///   content: \"#{walk(one two three, to-upper-case)}\";\n///   // content: \"ONE TWO THREE\";\n///\n/// @throw Error if no parameters are passed.\n/// @throw Error if `$function parameter passed does not match an existing function.\n///\n/// @return {List} Updated list\n///\n@function walk($list, $function, $args...) {\n    @if not $list or $function {\n        @warn \"`walk()` expects two or more parameters (`$list`, `$function`, `$args...`).\";\n        @return false;\n    }\n\n    @if not function-exists($function) {\n        @warn \"There is no function named `#{$function}`.\";\n        @return false;\n    }\n\n    @for $i from 1 through length($list) {\n        $list: set-nth($list, $i, call($function, nth($list, $i), $args...));\n    }\n\n    @return $list;\n}\n\n\n///\n/// Simplify z-index.\n///\n/// @param {String} $z-index - Generic level\n///\n/// @example scss\n///   z-index: z-index(above);\n///   // z-index: 2;\n///\n/// @throw Error if no parameters are passed.\n/// @throw Error if `$z-index` parameter passed does not match a key in `$z-indexes`.\n///\n/// @return {Number} z-index\n///\n@function z-index($z-index) {\n    @if not $z-index {\n        @warn \"`z-index()` expects at least one parameter.\";\n        @return false;\n    }\n\n    @if not map-has-key($z-indexes, $z-index) {\n        @warn \"There is no `$z-index` named `#{$z-index}` in `$z-indexes`. `$z-index` should be one of `#{map-keys($z-index)}`.\";\n        @return false;\n    }\n\n    @return map-get($z-indexes, $z-index);\n}\n"]}