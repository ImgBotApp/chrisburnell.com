//
// #UTILS - Mixins
//

///
/// Flexible Transitions
///   generate transitions based on flexible input parameters
///   pass zero or more properties and zero or more further parameters
///
/// @author Chris Burnell
///
/// @param {String} $values - Values
///
/// @example scss - No Values
///   include transition()
///   // transition: all .2s ease;
///
/// @example scss - One Property
///   include transition(color)
///   // transition: color .2s ease;
///
/// @example scss - Two Properties
///   include transition(color, border)
///   // transition: color .2s ease, border .2s ease;
///
/// @example scss - One Property, One Duration
///   include transition(color .5s)
///   // transition: color .5s ease;
///
/// @example scss - One Property, One Duration, One Timing Function
///   include transition(color 1s linear)
///   // transition: color 1s linear;
///
/// @example scss - Two Properties, Two Durations, Two Timing Functions
///   include transition(color 2s ease-in-out, border 1s linear)
///   // transition: color 2s ease-in-out, border 1s linear;
///
@mixin transition($values...) {
    $transition: ();
    @if( length($values) == 0 ) {
        $transition: all #{$transition-time} #{$transition-function};
    }
    @else if( str-index(""+$values+"", " ") == null and str-index(""+$values+"", ",") == null and $values != "none" ) {
        $transition: #{$values} #{$transition-time} #{$transition-function};
    }
    @else if( str-index(""+$values+"", ",") != null ) {
        @each $value in $values {
            @if( str-index(""+$value+"", " ") == null ) {
                $transition: append($transition, unquote("#{$value} #{$transition-time} #{$transition-function}"), comma);
            }
            @else {
                $transition: append($transition, unquote("#{$value}"), comma);
            }
        }
    }
    @else {
        $transition: #{$values};
    }
    transition: #{$transition};
}

///
/// Will-Change
///   to be coupled with any transitions
///
/// @param {String} $values - Values
///
/// @throw Error if no values are passed.
///
@mixin will-change($values...) {
    @if( length($values) == 0 ) {
        @error "will-change() expects one or more values.";
    }
    will-change: #{$values};
}

///
/// Animation
///
/// @param {String} $values - Values
///
/// @throw Error if no values are passed.
///
@mixin animation($values...) {
    @if( length($values) == 0 ) {
        @error "animation() expects one or more values.";
    }
    animation: #{$values};
}

///
/// Animation Play State
///
/// @param {String} $state - State
///
/// @throw Error if no values are passed.
///
@mixin animation-play-state($state) {
    @if( length($state) == 0 ) {
        @error "animation-play-state() expects a value.";
    }
    animation-play-state: #{$state};
}

///
/// Center
///   centers an object horizontall and vertically
///
@mixin center() {
    position: absolute;
    top:  50%;
    left: 50%;
    transform: translateX(-50%) translateY(-50%);
}
